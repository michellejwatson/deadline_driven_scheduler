
Project0_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e64  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ee0  20001ee0  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ecc1  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024e3  00000000  00000000  0002ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d90  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c58  00000000  00000000  00031fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005da5  00000000  00000000  00032c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000493f  00000000  00000000  000389dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d31c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003e14  00000000  00000000  0003d398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005494 	.word	0x08005494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005494 	.word	0x08005494

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f934 	bl	800188c <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f850 	bl	8001714 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f000 ff0e 	bl	80015a0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <pvPortMalloc+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <pvPortMalloc+0x8c>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <pvPortMalloc+0x88>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <pvPortMalloc+0x90>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <pvPortMalloc+0x90>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <pvPortMalloc+0x90>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <pvPortMalloc+0x88>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <pvPortMalloc+0x90>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <pvPortMalloc+0x90>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <pvPortMalloc+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f000 fef4 	bl	80015bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80007da:	f003 fa81 	bl	8003ce0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001ca4 	.word	0x20001ca4
 80007ec:	200000a8 	.word	0x200000a8
 80007f0:	20001ca0 	.word	0x20001ca0

080007f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <vPortFree+0x22>
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e7fe      	b.n	8000814 <vPortFree+0x20>
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <xPortGetFreeHeapSize+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8000830:	3318      	adds	r3, #24
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20001ca0 	.word	0x20001ca0

08000840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <xQueueGenericReset+0x28>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	e7fe      	b.n	8000866 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000868:	f7ff fe6a 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	68f9      	ldr	r1, [r7, #12]
 8000876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000898:	3b01      	subs	r3, #1
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3310      	adds	r3, #16
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f8ac 	bl	8001a28 <xTaskRemoveFromEventList>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d012      	beq.n	80008fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <xQueueGenericReset+0xcc>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	e009      	b.n	80008fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3310      	adds	r3, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc6f 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3324      	adds	r3, #36	; 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc6a 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008fc:	f7ff fe4e 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <xQueueGenericCreate+0x28>
 8000924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e7fe      	b.n	8000936 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e004      	b.n	800094e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3348      	adds	r3, #72	; 0x48
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff04 	bl	8000760 <pvPortMalloc>
 8000958:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3348      	adds	r3, #72	; 0x48
 8000964:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4613      	mov	r3, r2
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 f805 	bl	8000982 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000978:	69bb      	ldr	r3, [r7, #24]
	}
 800097a:	4618      	mov	r0, r3
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e002      	b.n	80009a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009b0:	2101      	movs	r1, #1
 80009b2:	69b8      	ldr	r0, [r7, #24]
 80009b4:	f7ff ff44 	bl	8000840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f81c 	bl	8000a24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f7ff ff7f 	bl	8000910 <xQueueGenericCreate>
 8000a12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff ffd3 	bl	80009c0 <prvInitialiseMutex>

		return pxNewQueue;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d109      	bne.n	8000a54 <xQueueGenericSend+0x30>
 8000a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a44:	f383 8811 	msr	BASEPRI, r3
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a52:	e7fe      	b.n	8000a52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x3e>
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <xQueueGenericSend+0x42>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <xQueueGenericSend+0x44>
 8000a66:	2300      	movs	r3, #0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <xQueueGenericSend+0x5c>
 8000a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a70:	f383 8811 	msr	BASEPRI, r3
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7e:	e7fe      	b.n	8000a7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d103      	bne.n	8000a8e <xQueueGenericSend+0x6a>
 8000a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <xQueueGenericSend+0x6e>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <xQueueGenericSend+0x70>
 8000a92:	2300      	movs	r3, #0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <xQueueGenericSend+0x88>
 8000a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	e7fe      	b.n	8000aaa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aac:	f001 f978 	bl	8001da0 <xTaskGetSchedulerState>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <xQueueGenericSend+0x98>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <xQueueGenericSend+0x9c>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <xQueueGenericSend+0x9e>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d109      	bne.n	8000ada <xQueueGenericSend+0xb6>
 8000ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aca:	f383 8811 	msr	BASEPRI, r3
 8000ace:	f3bf 8f6f 	isb	sy
 8000ad2:	f3bf 8f4f 	dsb	sy
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	e7fe      	b.n	8000ad8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000ada:	f7ff fd31 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d302      	bcc.n	8000af0 <xQueueGenericSend+0xcc>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d129      	bne.n	8000b44 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000af6:	f000 fa35 	bl	8000f64 <prvCopyDataToQueue>
 8000afa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d010      	beq.n	8000b26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b06:	3324      	adds	r3, #36	; 0x24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 ff8d 	bl	8001a28 <xTaskRemoveFromEventList>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000b14:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <xQueueGenericSend+0x1f0>)
 8000b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	f3bf 8f4f 	dsb	sy
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	e00a      	b.n	8000b3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d007      	beq.n	8000b3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000b2c:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <xQueueGenericSend+0x1f0>)
 8000b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000b3c:	f7ff fd2e 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e063      	b.n	8000c0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d103      	bne.n	8000b52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000b4a:	f7ff fd27 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e05c      	b.n	8000c0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d106      	bne.n	8000b66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 ffc5 	bl	8001aec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000b66:	f7ff fd19 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b6a:	f000 fd19 	bl	80015a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b6e:	f7ff fce7 	bl	8000540 <vPortEnterCritical>
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7e:	d103      	bne.n	8000b88 <xQueueGenericSend+0x164>
 8000b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d103      	bne.n	8000b9e <xQueueGenericSend+0x17a>
 8000b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b9e:	f7ff fcfd 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ba2:	1d3a      	adds	r2, r7, #4
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 ffc2 	bl	8001b34 <xTaskCheckForTimeOut>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d124      	bne.n	8000c00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bb8:	f000 facc 	bl	8001154 <prvIsQueueFull>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d018      	beq.n	8000bf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	3310      	adds	r3, #16
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fede 	bl	800198c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bd2:	f000 fa57 	bl	8001084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000bd6:	f000 fcf1 	bl	80015bc <xTaskResumeAll>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f47f af7c 	bne.w	8000ada <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <xQueueGenericSend+0x1f0>)
 8000be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	f3bf 8f4f 	dsb	sy
 8000bee:	f3bf 8f6f 	isb	sy
 8000bf2:	e772      	b.n	8000ada <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bf6:	f000 fa45 	bl	8001084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000bfa:	f000 fcdf 	bl	80015bc <xTaskResumeAll>
 8000bfe:	e76c      	b.n	8000ada <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c02:	f000 fa3f 	bl	8001084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c06:	f000 fcd9 	bl	80015bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000c0a:	2300      	movs	r3, #0
		}
	}
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	e000ed04 	.word	0xe000ed04

08000c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <xQueueGenericSendFromISR+0x2c>
 8000c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c34:	f383 8811 	msr	BASEPRI, r3
 8000c38:	f3bf 8f6f 	isb	sy
 8000c3c:	f3bf 8f4f 	dsb	sy
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
 8000c42:	e7fe      	b.n	8000c42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <xQueueGenericSendFromISR+0x3a>
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <xQueueGenericSendFromISR+0x3e>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <xQueueGenericSendFromISR+0x40>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <xQueueGenericSendFromISR+0x58>
 8000c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	623b      	str	r3, [r7, #32]
 8000c6e:	e7fe      	b.n	8000c6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d103      	bne.n	8000c7e <xQueueGenericSendFromISR+0x66>
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d101      	bne.n	8000c82 <xQueueGenericSendFromISR+0x6a>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <xQueueGenericSendFromISR+0x6c>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d109      	bne.n	8000c9c <xQueueGenericSendFromISR+0x84>
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e7fe      	b.n	8000c9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c9c:	f7ff fd22 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000ca0:	f3ef 8211 	mrs	r2, BASEPRI
 8000ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca8:	f383 8811 	msr	BASEPRI, r3
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f3bf 8f4f 	dsb	sy
 8000cb4:	61ba      	str	r2, [r7, #24]
 8000cb6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d302      	bcc.n	8000cce <xQueueGenericSendFromISR+0xb6>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d12c      	bne.n	8000d28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cde:	f000 f941 	bl	8000f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000ce2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cea:	d112      	bne.n	8000d12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d016      	beq.n	8000d22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf6:	3324      	adds	r3, #36	; 0x24
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fe95 	bl	8001a28 <xTaskRemoveFromEventList>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00e      	beq.n	8000d22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e007      	b.n	8000d22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	b25a      	sxtb	r2, r3
 8000d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d22:	2301      	movs	r3, #1
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000d26:	e001      	b.n	8000d2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3738      	adds	r7, #56	; 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <xQueueGenericReceive+0x30>
	__asm volatile
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	e7fe      	b.n	8000d6e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <xQueueGenericReceive+0x3e>
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <xQueueGenericReceive+0x42>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <xQueueGenericReceive+0x44>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <xQueueGenericReceive+0x5c>
 8000d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	623b      	str	r3, [r7, #32]
 8000d9a:	e7fe      	b.n	8000d9a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d9c:	f001 f800 	bl	8001da0 <xTaskGetSchedulerState>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <xQueueGenericReceive+0x6c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <xQueueGenericReceive+0x70>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <xQueueGenericReceive+0x72>
 8000db0:	2300      	movs	r3, #0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <xQueueGenericReceive+0x8a>
 8000db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	e7fe      	b.n	8000dc8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dca:	f7ff fbb9 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d046      	beq.n	8000e68 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000de4:	f000 f928 	bl	8001038 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d121      	bne.n	8000e32 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d104      	bne.n	8000e08 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000dfe:	f001 f8e7 	bl	8001fd0 <pvTaskIncrementMutexHeldCount>
 8000e02:	4602      	mov	r2, r0
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d027      	beq.n	8000e60 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	3310      	adds	r3, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fe07 	bl	8001a28 <xTaskRemoveFromEventList>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d01f      	beq.n	8000e60 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000e20:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <xQueueGenericReceive+0x220>)
 8000e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	e016      	b.n	8000e60 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e36:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00f      	beq.n	8000e60 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e42:	3324      	adds	r3, #36	; 0x24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fdef 	bl	8001a28 <xTaskRemoveFromEventList>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <xQueueGenericReceive+0x220>)
 8000e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000e60:	f7ff fb9c 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e077      	b.n	8000f58 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d103      	bne.n	8000e76 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e6e:	f7ff fb95 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e070      	b.n	8000f58 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fe33 	bl	8001aec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e8a:	f7ff fb87 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e8e:	f000 fb87 	bl	80015a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e92:	f7ff fb55 	bl	8000540 <vPortEnterCritical>
 8000e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea2:	d103      	bne.n	8000eac <xQueueGenericReceive+0x16c>
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d103      	bne.n	8000ec2 <xQueueGenericReceive+0x182>
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ec2:	f7ff fb6b 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fe30 	bl	8001b34 <xTaskCheckForTimeOut>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d131      	bne.n	8000f3e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000edc:	f000 f924 	bl	8001128 <prvIsQueueEmpty>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d025      	beq.n	8000f32 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d108      	bne.n	8000f00 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000eee:	f7ff fb27 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 ff70 	bl	8001ddc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000efc:	f7ff fb4e 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	3324      	adds	r3, #36	; 0x24
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fd3f 	bl	800198c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f10:	f000 f8b8 	bl	8001084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f14:	f000 fb52 	bl	80015bc <xTaskResumeAll>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f47f af55 	bne.w	8000dca <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <xQueueGenericReceive+0x220>)
 8000f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	e74b      	b.n	8000dca <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f34:	f000 f8a6 	bl	8001084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f38:	f000 fb40 	bl	80015bc <xTaskResumeAll>
 8000f3c:	e745      	b.n	8000dca <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f40:	f000 f8a0 	bl	8001084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f44:	f000 fb3a 	bl	80015bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f4a:	f000 f8ed 	bl	8001128 <prvIsQueueEmpty>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f43f af3a 	beq.w	8000dca <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3738      	adds	r7, #56	; 0x38
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	e000ed04 	.word	0xe000ed04

08000f64 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d14d      	bne.n	8001026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 ff9a 	bl	8001ec8 <xTaskPriorityDisinherit>
 8000f94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	e043      	b.n	8001026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d119      	bne.n	8000fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6898      	ldr	r0, [r3, #8]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	461a      	mov	r2, r3
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	f003 fa5a 	bl	8004468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	441a      	add	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d32b      	bcc.n	8001026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e026      	b.n	8001026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	68d8      	ldr	r0, [r3, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	f003 fa40 	bl	8004468 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	441a      	add	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	425b      	negs	r3, r3
 800100e:	441a      	add	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d105      	bne.n	8001026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3b01      	subs	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800102e:	697b      	ldr	r3, [r7, #20]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d018      	beq.n	800107c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	441a      	add	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d303      	bcc.n	800106c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68d9      	ldr	r1, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	461a      	mov	r2, r3
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f003 f9f6 	bl	8004468 <memcpy>
	}
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800108c:	f7ff fa58 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001098:	e011      	b.n	80010be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3324      	adds	r3, #36	; 0x24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fcbe 	bl	8001a28 <xTaskRemoveFromEventList>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80010b2:	f000 fd9d 	bl	8001bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dce9      	bgt.n	800109a <prvUnlockQueue+0x16>
 80010c6:	e000      	b.n	80010ca <prvUnlockQueue+0x46>
					break;
 80010c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80010d2:	f7ff fa63 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80010d6:	f7ff fa33 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010e2:	e011      	b.n	8001108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d012      	beq.n	8001112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3310      	adds	r3, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fc99 	bl	8001a28 <xTaskRemoveFromEventList>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80010fc:	f000 fd78 	bl	8001bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	3b01      	subs	r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dce9      	bgt.n	80010e4 <prvUnlockQueue+0x60>
 8001110:	e000      	b.n	8001114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800111c:	f7ff fa3e 	bl	800059c <vPortExitCritical>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001130:	f7ff fa06 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e001      	b.n	8001146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001146:	f7ff fa29 	bl	800059c <vPortExitCritical>

	return xReturn;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800115c:	f7ff f9f0 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	429a      	cmp	r2, r3
 800116a:	d102      	bne.n	8001172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e001      	b.n	8001176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001176:	f7ff fa11 	bl	800059c <vPortExitCritical>

	return xReturn;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e014      	b.n	80011be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <vQueueAddToRegistry+0x4c>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80011a0:	490b      	ldr	r1, [pc, #44]	; (80011d0 <vQueueAddToRegistry+0x4c>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <vQueueAddToRegistry+0x4c>)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80011b6:	e005      	b.n	80011c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d9e7      	bls.n	8001194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20001e0c 	.word	0x20001e0c

080011d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80011e4:	f7ff f9ac 	bl	8000540 <vPortEnterCritical>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d103      	bne.n	80011fe <vQueueWaitForMessageRestricted+0x2a>
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120a:	d103      	bne.n	8001214 <vQueueWaitForMessageRestricted+0x40>
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001214:	f7ff f9c2 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3324      	adds	r3, #36	; 0x24
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fbd3 	bl	80019d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff28 	bl	8001084 <prvUnlockQueue>
	}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af04      	add	r7, sp, #16
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fa85 	bl	8000760 <pvPortMalloc>
 8001256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00e      	beq.n	800127c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800125e:	2050      	movs	r0, #80	; 0x50
 8001260:	f7ff fa7e 	bl	8000760 <pvPortMalloc>
 8001264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
 8001272:	e005      	b.n	8001280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff fabd 	bl	80007f4 <vPortFree>
 800127a:	e001      	b.n	8001280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	2300      	movs	r3, #0
 800128a:	9303      	str	r3, [sp, #12]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f80e 	bl	80012be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f000 f892 	bl	80013cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e002      	b.n	80012b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80012b4:	69bb      	ldr	r3, [r7, #24]
	}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b088      	sub	sp, #32
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	461a      	mov	r2, r3
 80012d6:	21a5      	movs	r1, #165	; 0xa5
 80012d8:	f003 f8d1 	bl	800447e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e6:	3b01      	subs	r3, #1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 80012f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d009      	beq.n	8001314 <prvInitialiseNewTask+0x56>
 8001300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001304:	f383 8811 	msr	BASEPRI, r3
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e7fe      	b.n	8001312 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e012      	b.n	8001340 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	7819      	ldrb	r1, [r3, #0]
 8001322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	4413      	add	r3, r2
 8001328:	3334      	adds	r3, #52	; 0x34
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d9e9      	bls.n	800131a <prvInitialiseNewTask+0x5c>
 8001346:	e000      	b.n	800134a <prvInitialiseNewTask+0x8c>
		{
			break;
 8001348:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	2b04      	cmp	r3, #4
 8001356:	d901      	bls.n	800135c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001358:	2304      	movs	r3, #4
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	3304      	adds	r3, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7fe ff4c 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	3318      	adds	r3, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff47 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	f1c3 0205 	rsb	r2, r3, #5
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139a:	2200      	movs	r2, #0
 800139c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	68f9      	ldr	r1, [r7, #12]
 80013aa:	69b8      	ldr	r0, [r7, #24]
 80013ac:	f7fe ffc4 	bl	8000338 <pxPortInitialiseStack>
 80013b0:	4602      	mov	r2, r0
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80013b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80013d4:	f7ff f8b4 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a29      	ldr	r2, [pc, #164]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d110      	bne.n	800141a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80013f8:	f000 fc20 	bl	8001c3c <prvInitialiseTaskLists>
 80013fc:	e00d      	b.n	800141a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <prvAddNewTaskToReadyList+0xc0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	429a      	cmp	r2, r3
 8001412:	d802      	bhi.n	800141a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <prvAddNewTaskToReadyList+0xc4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <prvAddNewTaskToReadyList+0xc4>)
 8001422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <prvAddNewTaskToReadyList+0xc8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <prvAddNewTaskToReadyList+0xc8>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <prvAddNewTaskToReadyList+0xcc>)
 8001444:	441a      	add	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f7fe feec 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001452:	f7ff f8a3 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <prvAddNewTaskToReadyList+0xc0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00e      	beq.n	800147c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <prvAddNewTaskToReadyList+0xd0>)
 800146e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20001d80 	.word	0x20001d80
 8001488:	20001ca8 	.word	0x20001ca8
 800148c:	20001d8c 	.word	0x20001d8c
 8001490:	20001d9c 	.word	0x20001d9c
 8001494:	20001d88 	.word	0x20001d88
 8001498:	20001cac 	.word	0x20001cac
 800149c:	e000ed04 	.word	0xe000ed04

080014a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <vTaskDelay+0x60>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <vTaskDelay+0x2e>
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	e7fe      	b.n	80014cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80014ce:	f000 f867 	bl	80015a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fd8f 	bl	8001ff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80014da:	f000 f86f 	bl	80015bc <xTaskResumeAll>
 80014de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <vTaskDelay+0x64>)
 80014e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20001da8 	.word	0x20001da8
 8001504:	e000ed04 	.word	0xe000ed04

08001508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <vTaskStartScheduler+0x80>)
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	2282      	movs	r2, #130	; 0x82
 800151a:	491c      	ldr	r1, [pc, #112]	; (800158c <vTaskStartScheduler+0x84>)
 800151c:	481c      	ldr	r0, [pc, #112]	; (8001590 <vTaskStartScheduler+0x88>)
 800151e:	f7ff fe8d 	bl	800123c <xTaskCreate>
 8001522:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800152a:	f000 fdcb 	bl	80020c4 <xTimerCreateTimerTask>
 800152e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d115      	bne.n	8001562 <vTaskStartScheduler+0x5a>
 8001536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153a:	f383 8811 	msr	BASEPRI, r3
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	f3bf 8f4f 	dsb	sy
 8001546:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <vTaskStartScheduler+0x8c>)
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <vTaskStartScheduler+0x90>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <vTaskStartScheduler+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800155c:	f7fe ff64 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001560:	e00d      	b.n	800157e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d109      	bne.n	800157e <vTaskStartScheduler+0x76>
 800156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156e:	f383 8811 	msr	BASEPRI, r3
 8001572:	f3bf 8f6f 	isb	sy
 8001576:	f3bf 8f4f 	dsb	sy
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e7fe      	b.n	800157c <vTaskStartScheduler+0x74>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20001da4 	.word	0x20001da4
 800158c:	08004df0 	.word	0x08004df0
 8001590:	08001c09 	.word	0x08001c09
 8001594:	20001da0 	.word	0x20001da0
 8001598:	20001d8c 	.word	0x20001d8c
 800159c:	20001d84 	.word	0x20001d84

080015a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <vTaskSuspendAll+0x18>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <vTaskSuspendAll+0x18>)
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20001da8 	.word	0x20001da8

080015bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <xTaskResumeAll+0x114>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <xTaskResumeAll+0x2a>
 80015d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	e7fe      	b.n	80015e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80015e6:	f7fe ffab 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <xTaskResumeAll+0x114>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <xTaskResumeAll+0x114>)
 80015f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <xTaskResumeAll+0x114>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d161      	bne.n	80016c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <xTaskResumeAll+0x118>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05d      	beq.n	80016c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001604:	e02e      	b.n	8001664 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <xTaskResumeAll+0x11c>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3318      	adds	r3, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fe66 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3304      	adds	r3, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fe61 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	2201      	movs	r2, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <xTaskResumeAll+0x120>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <xTaskResumeAll+0x120>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <xTaskResumeAll+0x124>)
 8001642:	441a      	add	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3304      	adds	r3, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f7fe fded 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <xTaskResumeAll+0x128>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <xTaskResumeAll+0x12c>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <xTaskResumeAll+0x11c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1cc      	bne.n	8001606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001672:	f000 fb6f 	bl	8001d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <xTaskResumeAll+0x130>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001682:	f000 f847 	bl	8001714 <xTaskIncrementTick>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <xTaskResumeAll+0x12c>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3b01      	subs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f1      	bne.n	8001682 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <xTaskResumeAll+0x130>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <xTaskResumeAll+0x12c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <xTaskResumeAll+0x134>)
 80016b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80016c0:	f7fe ff6c 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20001da8 	.word	0x20001da8
 80016d4:	20001d80 	.word	0x20001d80
 80016d8:	20001d40 	.word	0x20001d40
 80016dc:	20001d88 	.word	0x20001d88
 80016e0:	20001cac 	.word	0x20001cac
 80016e4:	20001ca8 	.word	0x20001ca8
 80016e8:	20001d94 	.word	0x20001d94
 80016ec:	20001d90 	.word	0x20001d90
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <xTaskGetTickCount+0x1c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20001d84 	.word	0x20001d84

08001714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <xTaskIncrementTick+0x14c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 808c 	bne.w	8001840 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <xTaskIncrementTick+0x150>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <xTaskIncrementTick+0x150>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11f      	bne.n	800177c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800173c:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <xTaskIncrementTick+0x154>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <xTaskIncrementTick+0x46>
 8001746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174a:	f383 8811 	msr	BASEPRI, r3
 800174e:	f3bf 8f6f 	isb	sy
 8001752:	f3bf 8f4f 	dsb	sy
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	e7fe      	b.n	8001758 <xTaskIncrementTick+0x44>
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <xTaskIncrementTick+0x154>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <xTaskIncrementTick+0x158>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a40      	ldr	r2, [pc, #256]	; (8001868 <xTaskIncrementTick+0x154>)
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4a40      	ldr	r2, [pc, #256]	; (800186c <xTaskIncrementTick+0x158>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <xTaskIncrementTick+0x15c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <xTaskIncrementTick+0x15c>)
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	f000 faec 	bl	8001d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <xTaskIncrementTick+0x160>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d34d      	bcc.n	8001822 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <xTaskIncrementTick+0x154>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <xTaskIncrementTick+0x80>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <xTaskIncrementTick+0x82>
 8001794:	2300      	movs	r3, #0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <xTaskIncrementTick+0x160>)
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	601a      	str	r2, [r3, #0]
					break;
 80017a2:	e03e      	b.n	8001822 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <xTaskIncrementTick+0x154>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d203      	bcs.n	80017c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80017bc:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <xTaskIncrementTick+0x160>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
						break;
 80017c2:	e02e      	b.n	8001822 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fd8b 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3318      	adds	r3, #24
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fd82 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	2201      	movs	r2, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <xTaskIncrementTick+0x164>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <xTaskIncrementTick+0x164>)
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <xTaskIncrementTick+0x168>)
 8001800:	441a      	add	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3304      	adds	r3, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7fe fd0e 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <xTaskIncrementTick+0x16c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d3b4      	bcc.n	8001786 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001820:	e7b1      	b.n	8001786 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <xTaskIncrementTick+0x16c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001828:	4914      	ldr	r1, [pc, #80]	; (800187c <xTaskIncrementTick+0x168>)
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d907      	bls.n	800184a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e004      	b.n	800184a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <xTaskIncrementTick+0x170>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <xTaskIncrementTick+0x170>)
 8001848:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <xTaskIncrementTick+0x174>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001852:	2301      	movs	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001856:	697b      	ldr	r3, [r7, #20]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20001da8 	.word	0x20001da8
 8001864:	20001d84 	.word	0x20001d84
 8001868:	20001d38 	.word	0x20001d38
 800186c:	20001d3c 	.word	0x20001d3c
 8001870:	20001d98 	.word	0x20001d98
 8001874:	20001da0 	.word	0x20001da0
 8001878:	20001d88 	.word	0x20001d88
 800187c:	20001cac 	.word	0x20001cac
 8001880:	20001ca8 	.word	0x20001ca8
 8001884:	20001d90 	.word	0x20001d90
 8001888:	20001d94 	.word	0x20001d94

0800188c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <vTaskSwitchContext+0xec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <vTaskSwitchContext+0xf0>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80018a0:	e065      	b.n	800196e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <vTaskSwitchContext+0xf0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <vTaskSwitchContext+0xf4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d111      	bne.n	80018e4 <vTaskSwitchContext+0x58>
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3304      	adds	r3, #4
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10b      	bne.n	80018e4 <vTaskSwitchContext+0x58>
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3308      	adds	r3, #8
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d105      	bne.n	80018e4 <vTaskSwitchContext+0x58>
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	330c      	adds	r3, #12
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d008      	beq.n	80018f6 <vTaskSwitchContext+0x6a>
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <vTaskSwitchContext+0xf4>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <vTaskSwitchContext+0xf4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3334      	adds	r3, #52	; 0x34
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f002 f9f8 	bl	8003ce6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <vTaskSwitchContext+0xf8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	f1c3 031f 	rsb	r3, r3, #31
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	491e      	ldr	r1, [pc, #120]	; (8001988 <vTaskSwitchContext+0xfc>)
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e7fe      	b.n	8001932 <vTaskSwitchContext+0xa6>
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <vTaskSwitchContext+0xfc>)
 8001940:	4413      	add	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	3308      	adds	r3, #8
 8001956:	429a      	cmp	r2, r3
 8001958:	d104      	bne.n	8001964 <vTaskSwitchContext+0xd8>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <vTaskSwitchContext+0xf4>)
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20001da8 	.word	0x20001da8
 800197c:	20001d94 	.word	0x20001d94
 8001980:	20001ca8 	.word	0x20001ca8
 8001984:	20001d88 	.word	0x20001d88
 8001988:	20001cac 	.word	0x20001cac

0800198c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d109      	bne.n	80019b0 <vTaskPlaceOnEventList+0x24>
 800199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a0:	f383 8811 	msr	BASEPRI, r3
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	f3bf 8f4f 	dsb	sy
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e7fe      	b.n	80019ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <vTaskPlaceOnEventList+0x44>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3318      	adds	r3, #24
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7fe fc5a 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019be:	2101      	movs	r1, #1
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f000 fb19 	bl	8001ff8 <prvAddCurrentTaskToDelayedList>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20001ca8 	.word	0x20001ca8

080019d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <vTaskPlaceOnEventListRestricted+0x26>
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e7fe      	b.n	80019f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <vTaskPlaceOnEventListRestricted+0x50>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3318      	adds	r3, #24
 8001a00:	4619      	mov	r1, r3
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7fe fc11 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f000 faee 	bl	8001ff8 <prvAddCurrentTaskToDelayedList>
	}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20001ca8 	.word	0x20001ca8

08001a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <xTaskRemoveFromEventList+0x2a>
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e7fe      	b.n	8001a50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3318      	adds	r3, #24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc44 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <xTaskRemoveFromEventList+0xac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11c      	bne.n	8001a9e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	3304      	adds	r3, #4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fc3b 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <xTaskRemoveFromEventList+0xb0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <xTaskRemoveFromEventList+0xb0>)
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <xTaskRemoveFromEventList+0xb4>)
 8001a8e:	441a      	add	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	3304      	adds	r3, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7fe fbc7 	bl	800022a <vListInsertEnd>
 8001a9c:	e005      	b.n	8001aaa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480e      	ldr	r0, [pc, #56]	; (8001ae0 <xTaskRemoveFromEventList+0xb8>)
 8001aa6:	f7fe fbc0 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <xTaskRemoveFromEventList+0xbc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d905      	bls.n	8001ac4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <xTaskRemoveFromEventList+0xc0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e001      	b.n	8001ac8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001ac8:	697b      	ldr	r3, [r7, #20]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20001da8 	.word	0x20001da8
 8001ad8:	20001d88 	.word	0x20001d88
 8001adc:	20001cac 	.word	0x20001cac
 8001ae0:	20001d40 	.word	0x20001d40
 8001ae4:	20001ca8 	.word	0x20001ca8
 8001ae8:	20001d94 	.word	0x20001d94

08001aec <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <vTaskSetTimeOutState+0x22>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e7fe      	b.n	8001b0c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <vTaskSetTimeOutState+0x40>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <vTaskSetTimeOutState+0x44>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	605a      	str	r2, [r3, #4]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20001d98 	.word	0x20001d98
 8001b30:	20001d84 	.word	0x20001d84

08001b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <xTaskCheckForTimeOut+0x24>
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e7fe      	b.n	8001b56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <xTaskCheckForTimeOut+0x3e>
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	f3bf 8f6f 	isb	sy
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	e7fe      	b.n	8001b70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001b72:	f7fe fce5 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <xTaskCheckForTimeOut+0xb4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d102      	bne.n	8001b8c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e026      	b.n	8001bda <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <xTaskCheckForTimeOut+0xb8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d007      	beq.n	8001ba8 <xTaskCheckForTimeOut+0x74>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d802      	bhi.n	8001ba8 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e018      	b.n	8001bda <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d20e      	bcs.n	8001bd6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1acb      	subs	r3, r1, r3
 8001bc4:	441a      	add	r2, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff8e 	bl	8001aec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e001      	b.n	8001bda <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001bda:	f7fe fcdf 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001bde:	697b      	ldr	r3, [r7, #20]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20001d84 	.word	0x20001d84
 8001bec:	20001d98 	.word	0x20001d98

08001bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <vTaskMissedYield+0x14>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	20001d94 	.word	0x20001d94

08001c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001c10:	f000 f854 	bl	8001cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <prvIdleTask+0x2c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d907      	bls.n	8001c2c <prvIdleTask+0x24>
			{
				taskYIELD();
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <prvIdleTask+0x30>)
 8001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001c2c:	f002 f861 	bl	8003cf2 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001c30:	e7ee      	b.n	8001c10 <prvIdleTask+0x8>
 8001c32:	bf00      	nop
 8001c34:	20001cac 	.word	0x20001cac
 8001c38:	e000ed04 	.word	0xe000ed04

08001c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e00c      	b.n	8001c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <prvInitialiseTaskLists+0x60>)
 8001c54:	4413      	add	r3, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe faba 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d9ef      	bls.n	8001c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <prvInitialiseTaskLists+0x64>)
 8001c6a:	f7fe fab1 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <prvInitialiseTaskLists+0x68>)
 8001c70:	f7fe faae 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <prvInitialiseTaskLists+0x6c>)
 8001c76:	f7fe faab 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c7a:	480c      	ldr	r0, [pc, #48]	; (8001cac <prvInitialiseTaskLists+0x70>)
 8001c7c:	f7fe faa8 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <prvInitialiseTaskLists+0x74>)
 8001c82:	f7fe faa5 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <prvInitialiseTaskLists+0x78>)
 8001c88:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <prvInitialiseTaskLists+0x64>)
 8001c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <prvInitialiseTaskLists+0x7c>)
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <prvInitialiseTaskLists+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20001cac 	.word	0x20001cac
 8001ca0:	20001d10 	.word	0x20001d10
 8001ca4:	20001d24 	.word	0x20001d24
 8001ca8:	20001d40 	.word	0x20001d40
 8001cac:	20001d54 	.word	0x20001d54
 8001cb0:	20001d6c 	.word	0x20001d6c
 8001cb4:	20001d38 	.word	0x20001d38
 8001cb8:	20001d3c 	.word	0x20001d3c

08001cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cc2:	e028      	b.n	8001d16 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001cc4:	f7ff fc6c 	bl	80015a0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <prvCheckTasksWaitingTermination+0x6c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001cd8:	f7ff fc70 	bl	80015bc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001ce2:	f7fe fc2d 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <prvCheckTasksWaitingTermination+0x6c>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe faf6 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <prvCheckTasksWaitingTermination+0x70>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <prvCheckTasksWaitingTermination+0x70>)
 8001d00:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <prvCheckTasksWaitingTermination+0x74>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <prvCheckTasksWaitingTermination+0x74>)
 8001d0a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001d0c:	f7fe fc46 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f000 f80f 	bl	8001d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <prvCheckTasksWaitingTermination+0x74>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1d2      	bne.n	8001cc4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20001d54 	.word	0x20001d54
 8001d2c:	20001d80 	.word	0x20001d80
 8001d30:	20001d68 	.word	0x20001d68

08001d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fd57 	bl	80007f4 <vPortFree>
			vPortFree( pxTCB );
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fd54 	bl	80007f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <prvResetNextTaskUnblockTime+0x44>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <prvResetNextTaskUnblockTime+0x14>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <prvResetNextTaskUnblockTime+0x16>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <prvResetNextTaskUnblockTime+0x48>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001d76:	e008      	b.n	8001d8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <prvResetNextTaskUnblockTime+0x44>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <prvResetNextTaskUnblockTime+0x48>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20001d38 	.word	0x20001d38
 8001d9c:	20001da0 	.word	0x20001da0

08001da0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <xTaskGetSchedulerState+0x34>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001dae:	2301      	movs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	e008      	b.n	8001dc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <xTaskGetSchedulerState+0x38>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001dc6:	687b      	ldr	r3, [r7, #4]
	}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20001d8c 	.word	0x20001d8c
 8001dd8:	20001da8 	.word	0x20001da8

08001ddc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d062      	beq.n	8001eb4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <vTaskPriorityInherit+0xe0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d25b      	bcs.n	8001eb4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db06      	blt.n	8001e12 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <vTaskPriorityInherit+0xe0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f1c3 0205 	rsb	r2, r3, #5
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6959      	ldr	r1, [r3, #20]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <vTaskPriorityInherit+0xe4>)
 8001e24:	4413      	add	r3, r2
 8001e26:	4299      	cmp	r1, r3
 8001e28:	d101      	bne.n	8001e2e <vTaskPriorityInherit+0x52>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <vTaskPriorityInherit+0x54>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03a      	beq.n	8001eaa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fa53 	bl	80002e4 <uxListRemove>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d115      	bne.n	8001e70 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	491d      	ldr	r1, [pc, #116]	; (8001ec0 <vTaskPriorityInherit+0xe4>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <vTaskPriorityInherit+0x94>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2201      	movs	r2, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43da      	mvns	r2, r3
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <vTaskPriorityInherit+0xe8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <vTaskPriorityInherit+0xe8>)
 8001e6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <vTaskPriorityInherit+0xe0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	2201      	movs	r2, #1
 8001e80:	409a      	lsls	r2, r3
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <vTaskPriorityInherit+0xe8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <vTaskPriorityInherit+0xe8>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <vTaskPriorityInherit+0xe4>)
 8001e9a:	441a      	add	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7fe f9c1 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ea8:	e004      	b.n	8001eb4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <vTaskPriorityInherit+0xe0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20001ca8 	.word	0x20001ca8
 8001ec0:	20001cac 	.word	0x20001cac
 8001ec4:	20001d88 	.word	0x20001d88

08001ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06c      	beq.n	8001fb8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <xTaskPriorityDisinherit+0xfc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d009      	beq.n	8001efc <xTaskPriorityDisinherit+0x34>
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e7fe      	b.n	8001efa <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <xTaskPriorityDisinherit+0x50>
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	e7fe      	b.n	8001f16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d044      	beq.n	8001fb8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d140      	bne.n	8001fb8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe f9d2 	bl	80002e4 <uxListRemove>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d115      	bne.n	8001f72 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <xTaskPriorityDisinherit+0x100>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xTaskPriorityDisinherit+0xaa>
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2201      	movs	r2, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <xTaskPriorityDisinherit+0x104>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <xTaskPriorityDisinherit+0x104>)
 8001f70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	f1c3 0205 	rsb	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <xTaskPriorityDisinherit+0x104>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <xTaskPriorityDisinherit+0x104>)
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <xTaskPriorityDisinherit+0x100>)
 8001fa6:	441a      	add	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7fe f93b 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001fb8:	697b      	ldr	r3, [r7, #20]
	}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001ca8 	.word	0x20001ca8
 8001fc8:	20001cac 	.word	0x20001cac
 8001fcc:	20001d88 	.word	0x20001d88

08001fd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe2:	3201      	adds	r2, #1
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8001fe6:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
	}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20001ca8 	.word	0x20001ca8

08001ff8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3304      	adds	r3, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f968 	bl	80002e4 <uxListRemove>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	2201      	movs	r2, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4013      	ands	r3, r2
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002030:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d10a      	bne.n	8002050 <prvAddCurrentTaskToDelayedList+0x58>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	4619      	mov	r1, r3
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800204a:	f7fe f8ee 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800204e:	e026      	b.n	800209e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d209      	bcs.n	800207c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3304      	adds	r3, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7fe f8fc 	bl	8000272 <vListInsert>
}
 800207a:	e010      	b.n	800209e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3304      	adds	r3, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f7fe f8f2 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	429a      	cmp	r2, r3
 8002096:	d202      	bcs.n	800209e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20001d84 	.word	0x20001d84
 80020ac:	20001ca8 	.word	0x20001ca8
 80020b0:	20001d88 	.word	0x20001d88
 80020b4:	20001d6c 	.word	0x20001d6c
 80020b8:	20001d3c 	.word	0x20001d3c
 80020bc:	20001d38 	.word	0x20001d38
 80020c0:	20001da0 	.word	0x20001da0

080020c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80020ce:	f000 fadd 	bl	800268c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <xTimerCreateTimerTask+0x54>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <xTimerCreateTimerTask+0x58>)
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2303      	movs	r3, #3
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e8:	490d      	ldr	r1, [pc, #52]	; (8002120 <xTimerCreateTimerTask+0x5c>)
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <xTimerCreateTimerTask+0x60>)
 80020ec:	f7ff f8a6 	bl	800123c <xTaskCreate>
 80020f0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <xTimerCreateTimerTask+0x48>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	e7fe      	b.n	800210a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20001ddc 	.word	0x20001ddc
 800211c:	20001de0 	.word	0x20001de0
 8002120:	08004df8 	.word	0x08004df8
 8002124:	080022dd 	.word	0x080022dd

08002128 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002136:	2028      	movs	r0, #40	; 0x28
 8002138:	f7fe fb12 	bl	8000760 <pvPortMalloc>
 800213c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f805 	bl	8002162 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002158:	697b      	ldr	r3, [r7, #20]
	}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <prvInitialiseNewTimer+0x28>
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e7fe      	b.n	8002188 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002190:	f000 fa7c 	bl	800268c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	6a3a      	ldr	r2, [r7, #32]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	3304      	adds	r3, #4
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f82a 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <xTimerGenericCommand+0x2c>
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	e7fe      	b.n	80021ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <xTimerGenericCommand+0x94>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02a      	beq.n	800224e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	dc18      	bgt.n	800223c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800220a:	f7ff fdc9 	bl	8001da0 <xTaskGetSchedulerState>
 800220e:	4603      	mov	r3, r0
 8002210:	2b02      	cmp	r3, #2
 8002212:	d109      	bne.n	8002228 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <xTimerGenericCommand+0x94>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	f107 0114 	add.w	r1, r7, #20
 800221c:	2300      	movs	r3, #0
 800221e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002220:	f7fe fc00 	bl	8000a24 <xQueueGenericSend>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24
 8002226:	e012      	b.n	800224e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <xTimerGenericCommand+0x94>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f107 0114 	add.w	r1, r7, #20
 8002230:	2300      	movs	r3, #0
 8002232:	2200      	movs	r2, #0
 8002234:	f7fe fbf6 	bl	8000a24 <xQueueGenericSend>
 8002238:	6278      	str	r0, [r7, #36]	; 0x24
 800223a:	e008      	b.n	800224e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <xTimerGenericCommand+0x94>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	f107 0114 	add.w	r1, r7, #20
 8002244:	2300      	movs	r3, #0
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	f7fe fce6 	bl	8000c18 <xQueueGenericSendFromISR>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20001ddc 	.word	0x20001ddc

0800225c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <prvProcessExpiredTimer+0x7c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3304      	adds	r3, #4
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f835 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d121      	bne.n	80022c6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	18d1      	adds	r1, r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f000 f8c8 	bl	8002424 <prvInsertTimerInActiveList>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800229a:	2300      	movs	r3, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	2100      	movs	r1, #0
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7ff ff8d 	bl	80021c4 <xTimerGenericCommand>
 80022aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <prvProcessExpiredTimer+0x6a>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e7fe      	b.n	80022c4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	4798      	blx	r3
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20001dd4 	.word	0x20001dd4

080022dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f857 	bl	800239c <prvGetNextExpireTime>
 80022ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f803 	bl	8002300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80022fa:	f000 f8d5 	bl	80024a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022fe:	e7f1      	b.n	80022e4 <prvTimerTask+0x8>

08002300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800230a:	f7ff f949 	bl	80015a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f866 	bl	80023e4 <prvSampleTimeNow>
 8002318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d130      	bne.n	8002382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <prvProcessTimerOrBlockTask+0x3c>
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	429a      	cmp	r2, r3
 800232c:	d806      	bhi.n	800233c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800232e:	f7ff f945 	bl	80015bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff91 	bl	800225c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800233a:	e024      	b.n	8002386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <prvProcessTimerOrBlockTask+0x90>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <prvProcessTimerOrBlockTask+0x94>)
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe ff37 	bl	80011d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002366:	f7ff f929 	bl	80015bc <xTaskResumeAll>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <prvProcessTimerOrBlockTask+0x98>)
 8002372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
}
 8002380:	e001      	b.n	8002386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002382:	f7ff f91b 	bl	80015bc <xTaskResumeAll>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20001dd8 	.word	0x20001dd8
 8002394:	20001ddc 	.word	0x20001ddc
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <prvGetNextExpireTime+0x44>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <prvGetNextExpireTime+0x44>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e001      	b.n	80023d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	20001dd4 	.word	0x20001dd4

080023e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80023ec:	f7ff f982 	bl	80016f4 <xTaskGetTickCount>
 80023f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <prvSampleTimeNow+0x3c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d205      	bcs.n	8002408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80023fc:	f000 f8e6 	bl	80025cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e002      	b.n	800240e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800240e:	4a04      	ldr	r2, [pc, #16]	; (8002420 <prvSampleTimeNow+0x3c>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20001de4 	.word	0x20001de4

08002424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	d812      	bhi.n	8002470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	1ad2      	subs	r2, r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e01b      	b.n	8002496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <prvInsertTimerInActiveList+0x7c>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7fd ff02 	bl	8000272 <vListInsert>
 800246e:	e012      	b.n	8002496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d206      	bcs.n	8002486 <prvInsertTimerInActiveList+0x62>
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d302      	bcc.n	8002486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002480:	2301      	movs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e007      	b.n	8002496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <prvInsertTimerInActiveList+0x80>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f7fd feee 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002496:	697b      	ldr	r3, [r7, #20]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20001dd8 	.word	0x20001dd8
 80024a4:	20001dd4 	.word	0x20001dd4

080024a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024ae:	e07a      	b.n	80025a6 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db77      	blt.n	80025a6 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	3304      	adds	r3, #4
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ff0c 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff88 	bl	80023e4 <prvSampleTimeNow>
 80024d4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d863      	bhi.n	80025a4 <prvProcessReceivedCommands+0xfc>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <prvProcessReceivedCommands+0x3c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	0800250d 	.word	0x0800250d
 80024e8:	0800250d 	.word	0x0800250d
 80024ec:	0800250d 	.word	0x0800250d
 80024f0:	080025a7 	.word	0x080025a7
 80024f4:	08002567 	.word	0x08002567
 80024f8:	0800259d 	.word	0x0800259d
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	0800250d 	.word	0x0800250d
 8002504:	080025a7 	.word	0x080025a7
 8002508:	08002567 	.word	0x08002567
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	18d1      	adds	r1, r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800251a:	f7ff ff83 	bl	8002424 <prvInsertTimerInActiveList>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d040      	beq.n	80025a6 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800252a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d138      	bne.n	80025a6 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	441a      	add	r2, r3
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	2100      	movs	r1, #0
 8002544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002546:	f7ff fe3d 	bl	80021c4 <xTimerGenericCommand>
 800254a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d129      	bne.n	80025a6 <prvProcessReceivedCommands+0xfe>
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e7fe      	b.n	8002564 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <prvProcessReceivedCommands+0xe0>
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e7fe      	b.n	8002586 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	18d1      	adds	r1, r2, r3
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002596:	f7ff ff45 	bl	8002424 <prvInsertTimerInActiveList>
					break;
 800259a:	e004      	b.n	80025a6 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259e:	f7fe f929 	bl	80007f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80025a2:	e000      	b.n	80025a6 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80025a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <prvProcessReceivedCommands+0x120>)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f107 0108 	add.w	r1, r7, #8
 80025ae:	2300      	movs	r3, #0
 80025b0:	2200      	movs	r2, #0
 80025b2:	f7fe fbc5 	bl	8000d40 <xQueueGenericReceive>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f af79 	bne.w	80024b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20001ddc 	.word	0x20001ddc

080025cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80025d2:	e044      	b.n	800265e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <prvSwitchTimerLists+0xb8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <prvSwitchTimerLists+0xb8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	3304      	adds	r3, #4
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fe79 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	6938      	ldr	r0, [r7, #16]
 80025f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d12d      	bne.n	800265e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d90e      	bls.n	8002632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <prvSwitchTimerLists+0xb8>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	3304      	adds	r3, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fd fe21 	bl	8000272 <vListInsert>
 8002630:	e015      	b.n	800265e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002632:	2300      	movs	r3, #0
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	2100      	movs	r1, #0
 800263c:	6938      	ldr	r0, [r7, #16]
 800263e:	f7ff fdc1 	bl	80021c4 <xTimerGenericCommand>
 8002642:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <prvSwitchTimerLists+0x92>
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	e7fe      	b.n	800265c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <prvSwitchTimerLists+0xb8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1b5      	bne.n	80025d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <prvSwitchTimerLists+0xb8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <prvSwitchTimerLists+0xbc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <prvSwitchTimerLists+0xb8>)
 8002674:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <prvSwitchTimerLists+0xbc>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001dd4 	.word	0x20001dd4
 8002688:	20001dd8 	.word	0x20001dd8

0800268c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002690:	f7fd ff56 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <prvCheckForValidListAndQueue+0x54>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11d      	bne.n	80026d8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <prvCheckForValidListAndQueue+0x58>)
 800269e:	f7fd fd97 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <prvCheckForValidListAndQueue+0x5c>)
 80026a4:	f7fd fd94 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <prvCheckForValidListAndQueue+0x60>)
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <prvCheckForValidListAndQueue+0x58>)
 80026ac:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <prvCheckForValidListAndQueue+0x64>)
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <prvCheckForValidListAndQueue+0x5c>)
 80026b2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80026b4:	2200      	movs	r2, #0
 80026b6:	210c      	movs	r1, #12
 80026b8:	2005      	movs	r0, #5
 80026ba:	f7fe f929 	bl	8000910 <xQueueGenericCreate>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <prvCheckForValidListAndQueue+0x54>)
 80026c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <prvCheckForValidListAndQueue+0x54>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <prvCheckForValidListAndQueue+0x54>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4908      	ldr	r1, [pc, #32]	; (80026f4 <prvCheckForValidListAndQueue+0x68>)
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fd56 	bl	8001184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026d8:	f7fd ff60 	bl	800059c <vPortExitCritical>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20001ddc 	.word	0x20001ddc
 80026e4:	20001dac 	.word	0x20001dac
 80026e8:	20001dc0 	.word	0x20001dc0
 80026ec:	20001dd4 	.word	0x20001dd4
 80026f0:	20001dd8 	.word	0x20001dd8
 80026f4:	08004e00 	.word	0x08004e00

080026f8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <xTimerIsTimerActive+0x26>
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e7fe      	b.n	800271c <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800271e:	f7fd ff0f 	bl	8000540 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002732:	f7fd ff33 	bl	800059c <vPortExitCritical>

	return xTimerIsInActiveList;
 8002736:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800275e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800276e:	4313      	orrs	r3, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <ADC_Init+0xa8>)
 8002786:	4013      	ands	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002792:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002798:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	795b      	ldrb	r3, [r3, #5]
 800279e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80027a0:	4313      	orrs	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	7d1b      	ldrb	r3, [r3, #20]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	c0fff7fd 	.word	0xc0fff7fd

080027ec <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800280a:	e005      	b.n	8002818 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 0201 	bic.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	70fb      	strb	r3, [r7, #3]
 8002836:	460b      	mov	r3, r1
 8002838:	70bb      	strb	r3, [r7, #2]
 800283a:	4613      	mov	r3, r2
 800283c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	2b09      	cmp	r3, #9
 800284a:	d923      	bls.n	8002894 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f1a3 020a 	sub.w	r2, r3, #10
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	2207      	movs	r2, #7
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	43db      	mvns	r3, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002870:	7879      	ldrb	r1, [r7, #1]
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f1a3 020a 	sub.w	r2, r3, #10
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	e01e      	b.n	80028d2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	2207      	movs	r2, #7
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80028b4:	7879      	ldrb	r1, [r7, #1]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80028d2:	78bb      	ldrb	r3, [r7, #2]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d821      	bhi.n	800291c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80028fa:	78f9      	ldrb	r1, [r7, #3]
 80028fc:	78bb      	ldrb	r3, [r7, #2]
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800291a:	e047      	b.n	80029ac <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800291c:	78bb      	ldrb	r3, [r7, #2]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d821      	bhi.n	8002966 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002928:	78bb      	ldrb	r3, [r7, #2]
 800292a:	1fda      	subs	r2, r3, #7
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	43db      	mvns	r3, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002944:	78f9      	ldrb	r1, [r7, #3]
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	1fda      	subs	r2, r3, #7
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002964:	e022      	b.n	80029ac <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800296c:	78bb      	ldrb	r3, [r7, #2]
 800296e:	f1a3 020d 	sub.w	r2, r3, #13
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	43db      	mvns	r3, r3
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800298a:	78f9      	ldrb	r1, [r7, #3]
 800298c:	78bb      	ldrb	r3, [r7, #2]
 800298e:	f1a3 020d 	sub.w	r2, r3, #13
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	b29b      	uxth	r3, r3
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e001      	b.n	8002a18 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <DAC_SetChannel1Data+0x34>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3308      	adds	r3, #8
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007400 	.word	0x40007400

08002a60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <DMA_Init+0xac>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002aa2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002aae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0307 	bic.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60da      	str	r2, [r3, #12]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	f01c803f 	.word	0xf01c803f

08002b10 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002b2e:	e005      	b.n	8002b3c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 0201 	bic.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <DMA_GetFlagStatus+0x6c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d802      	bhi.n	8002b98 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <DMA_GetFlagStatus+0x70>)
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	e001      	b.n	8002b9c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <DMA_GetFlagStatus+0x74>)
 8002b9a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e002      	b.n	8002bb4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002bba:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
 8002bce:	e001      	b.n	8002bd4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	4002640f 	.word	0x4002640f
 8002be8:	40026000 	.word	0x40026000
 8002bec:	40026400 	.word	0x40026400

08002bf0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <DMA_ClearFlag+0x50>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d802      	bhi.n	8002c08 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <DMA_ClearFlag+0x54>)
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e001      	b.n	8002c0c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <DMA_ClearFlag+0x58>)
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c1c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002c24:	e006      	b.n	8002c34 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c2c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6093      	str	r3, [r2, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	4002640f 	.word	0x4002640f
 8002c44:	40026000 	.word	0x40026000
 8002c48:	40026400 	.word	0x40026400

08002c4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e076      	b.n	8002d56 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d165      	bne.n	8002d50 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2103      	movs	r1, #3
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	791b      	ldrb	r3, [r3, #4]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	791b      	ldrb	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <GPIO_Init+0x76>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	791b      	ldrb	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d12e      	bne.n	8002d20 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2103      	movs	r1, #3
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	408b      	lsls	r3, r1
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	7992      	ldrb	r2, [r2, #6]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	b292      	uxth	r2, r2
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	79db      	ldrb	r3, [r3, #7]
 8002d40:	4619      	mov	r1, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d985      	bls.n	8002c68 <GPIO_Init+0x1c>
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	831a      	strh	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	887a      	ldrh	r2, [r7, #2]
 8002d96:	835a      	strh	r2, [r3, #26]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002db6:	490a      	ldr	r1, [pc, #40]	; (8002de0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002dc2:	e006      	b.n	8002dd2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	4013      	ands	r3, r2
 8002dd0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002df6:	490a      	ldr	r1, [pc, #40]	; (8002e20 <RCC_APB2PeriphClockCmd+0x3c>)
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <RCC_APB2PeriphClockCmd+0x3c>)
 8002dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002e02:	e006      	b.n	8002e12 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002e04:	4906      	ldr	r1, [pc, #24]	; (8002e20 <RCC_APB2PeriphClockCmd+0x3c>)
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <RCC_APB2PeriphClockCmd+0x3c>)
 8002e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	819a      	strh	r2, [r3, #12]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	891b      	ldrh	r3, [r3, #8]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e001      	b.n	8002e6c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <Audio_MAL_IRQHandler+0xec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7ff fe74 	bl	8002b78 <DMA_GetFlagStatus>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d064      	beq.n	8002f60 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002e96:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04c      	beq.n	8002f38 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002e9e:	bf00      	nop
 8002ea0:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe4f 	bl	8002b48 <DMA_GetCmdStatus>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f7      	bne.n	8002ea0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <Audio_MAL_IRQHandler+0xec>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7ff fe98 	bl	8002bf0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <Audio_MAL_IRQHandler+0xf4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <Audio_MAL_IRQHandler+0xf8>)
 8002ec8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	bf28      	it	cs
 8002ed6:	4613      	movcs	r3, r2
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <Audio_MAL_IRQHandler+0xf8>)
 8002eda:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4924      	ldr	r1, [pc, #144]	; (8002f74 <Audio_MAL_IRQHandler+0xf8>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fdbc 	bl	8002a60 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fe0e 	bl	8002b10 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <Audio_MAL_IRQHandler+0xf4>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d203      	bcs.n	8002f0a <Audio_MAL_IRQHandler+0x8e>
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	e000      	b.n	8002f0c <Audio_MAL_IRQHandler+0x90>
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <Audio_MAL_IRQHandler+0xfc>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <Audio_MAL_IRQHandler+0xf4>)
 8002f10:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	bf28      	it	cs
 8002f22:	460b      	movcs	r3, r1
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <Audio_MAL_IRQHandler+0xf0>)
 8002f28:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fded 	bl	8002b10 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002f36:	e013      	b.n	8002f60 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fde6 	bl	8002b10 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <Audio_MAL_IRQHandler+0xe8>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <Audio_MAL_IRQHandler+0xec>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7ff fe4e 	bl	8002bf0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <Audio_MAL_IRQHandler+0xf4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f83c 	bl	8002fd8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	20001e4c 	.word	0x20001e4c
 8002f74:	20001e8c 	.word	0x20001e8c
 8002f78:	0001fffe 	.word	0x0001fffe

08002f7c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f80:	f7ff ff7c 	bl	8002e7c <Audio_MAL_IRQHandler>
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f8c:	f7ff ff76 	bl	8002e7c <Audio_MAL_IRQHandler>
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002f98:	2102      	movs	r1, #2
 8002f9a:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <SPI3_IRQHandler+0x3c>)
 8002f9c:	f7ff ff51 	bl	8002e42 <SPI_I2S_GetFlagStatus>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <SPI3_IRQHandler+0x40>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d106      	bne.n	8002fbc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002fae:	f000 f81e 	bl	8002fee <EVAL_AUDIO_GetSampleCallBack>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	2004      	movs	r0, #4
 8002fb8:	f7ff fd36 	bl	8002a28 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002fbc:	f000 f817 	bl	8002fee <EVAL_AUDIO_GetSampleCallBack>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <SPI3_IRQHandler+0x3c>)
 8002fc6:	f7ff ff2d 	bl	8002e24 <SPI_I2S_SendData>
  }
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40003c00 	.word	0x40003c00
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002fe2:	bf00      	nop
}
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <NVIC_SetPriorityGrouping+0x44>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <NVIC_SetPriorityGrouping+0x44>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <main>:
GPIO_InitTypeDef GPIO_InitStruct;

/*-----------------------------------------------------------*/

int main(void)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b083      	sub	sp, #12
 800304c:	af02      	add	r7, sp, #8

	// setup GPIO
	// initialize traffic light GPIOs
	/* Configure the system ready to run the demo.  The clock configuration
		can be done here if it was not done before main() was called. */
	prvSetupHardware();
 800304e:	f000 fe5c 	bl	8003d0a <prvSetupHardware>
	//STM_EVAL_LEDInit(green_led);
	//STM_EVAL_LEDInit(red_led);
	//STM_EVAL_LEDInit(blue_led);

	// clear lane (reset all shift registers)
	GPIO_SetBits(GPIOC, REG_RESET);
 8003052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003056:	4853      	ldr	r0, [pc, #332]	; (80031a4 <main+0x15c>)
 8003058:	f7ff fe86 	bl	8002d68 <GPIO_SetBits>

	//testTrafficLight();

	// Initialize light to start as green
	//GPIO_ResetBits(GPIOC, GREEN_LIGHT);
	GPIO_SetBits(GPIOC, GREEN_LIGHT);
 800305c:	2104      	movs	r1, #4
 800305e:	4851      	ldr	r0, [pc, #324]	; (80031a4 <main+0x15c>)
 8003060:	f7ff fe82 	bl	8002d68 <GPIO_SetBits>

	// create queue to send and receive potentiometer value
	xQueue_pot_car_handle = xQueueCreate( POT_QUEUE_LENGTH, sizeof( uint16_t ));
 8003064:	2200      	movs	r2, #0
 8003066:	2102      	movs	r1, #2
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	f7fd fc51 	bl	8000910 <xQueueGenericCreate>
 800306e:	4602      	mov	r2, r0
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <main+0x160>)
 8003072:	601a      	str	r2, [r3, #0]
	xQueue_pot_lights_handle = xQueueCreate( POT_QUEUE_LENGTH, sizeof( uint16_t ));
 8003074:	2200      	movs	r2, #0
 8003076:	2102      	movs	r1, #2
 8003078:	2064      	movs	r0, #100	; 0x64
 800307a:	f7fd fc49 	bl	8000910 <xQueueGenericCreate>
 800307e:	4602      	mov	r2, r0
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <main+0x164>)
 8003082:	601a      	str	r2, [r3, #0]
	xQueue_cars_handle = xQueueCreate( CAR_QUEUE_LENGTH, sizeof( uint16_t ));
 8003084:	2200      	movs	r2, #0
 8003086:	2102      	movs	r1, #2
 8003088:	2064      	movs	r0, #100	; 0x64
 800308a:	f7fd fc41 	bl	8000910 <xQueueGenericCreate>
 800308e:	4602      	mov	r2, r0
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <main+0x168>)
 8003092:	601a      	str	r2, [r3, #0]
	xQueue_lights_handle = xQueueCreate( LIGHTS_QUEUE_LENGTH, sizeof( uint16_t ));
 8003094:	2200      	movs	r2, #0
 8003096:	2102      	movs	r1, #2
 8003098:	2064      	movs	r0, #100	; 0x64
 800309a:	f7fd fc39 	bl	8000910 <xQueueGenericCreate>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <main+0x16c>)
 80030a2:	601a      	str	r2, [r3, #0]
	xSemaphore_lights = xSemaphoreCreateMutex();
 80030a4:	2001      	movs	r0, #1
 80030a6:	f7fd fca5 	bl	80009f4 <xQueueCreateMutex>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <main+0x170>)
 80030ae:	601a      	str	r2, [r3, #0]

	// add potentiometer queue to registry for debugging
	vQueueAddToRegistry( xQueue_pot_car_handle, "PotentiometerCarQueue" );
 80030b0:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <main+0x160>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4941      	ldr	r1, [pc, #260]	; (80031bc <main+0x174>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f864 	bl	8001184 <vQueueAddToRegistry>
	vQueueAddToRegistry( xQueue_pot_lights_handle, "PotentiometerLightQueue" );
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <main+0x164>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	493f      	ldr	r1, [pc, #252]	; (80031c0 <main+0x178>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f85e 	bl	8001184 <vQueueAddToRegistry>
	vQueueAddToRegistry( xQueue_cars_handle, "CarsQueue" );
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <main+0x168>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <main+0x17c>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f858 	bl	8001184 <vQueueAddToRegistry>
	vQueueAddToRegistry( xQueue_lights_handle, "LightsQueue" );
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <main+0x16c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	493b      	ldr	r1, [pc, #236]	; (80031c8 <main+0x180>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f852 	bl	8001184 <vQueueAddToRegistry>
	//xTaskCreate( Red_LED_Controller_Task, "Red_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
	//xTaskCreate( Green_LED_Controller_Task, "Green_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
	//xTaskCreate( Amber_LED_Controller_Task, "Amber_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);

	// need to decide priority and stack size
	xTaskCreate(Traffic_Flow_Adjustment_Task, "Traffic Flow Adjustment", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2302      	movs	r3, #2
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2300      	movs	r3, #0
 80030ea:	2282      	movs	r2, #130	; 0x82
 80030ec:	4937      	ldr	r1, [pc, #220]	; (80031cc <main+0x184>)
 80030ee:	4838      	ldr	r0, [pc, #224]	; (80031d0 <main+0x188>)
 80030f0:	f7fe f8a4 	bl	800123c <xTaskCreate>
	xTaskCreate(Traffic_Generator_Task, "Traffic Generator", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80030f4:	2300      	movs	r3, #0
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	2301      	movs	r3, #1
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2300      	movs	r3, #0
 80030fe:	2282      	movs	r2, #130	; 0x82
 8003100:	4934      	ldr	r1, [pc, #208]	; (80031d4 <main+0x18c>)
 8003102:	4835      	ldr	r0, [pc, #212]	; (80031d8 <main+0x190>)
 8003104:	f7fe f89a 	bl	800123c <xTaskCreate>
	xTaskCreate(Traffic_Light_State_Task, "Traffic Light State", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	2301      	movs	r3, #1
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2300      	movs	r3, #0
 8003112:	2282      	movs	r2, #130	; 0x82
 8003114:	4931      	ldr	r1, [pc, #196]	; (80031dc <main+0x194>)
 8003116:	4832      	ldr	r0, [pc, #200]	; (80031e0 <main+0x198>)
 8003118:	f7fe f890 	bl	800123c <xTaskCreate>
	xTaskCreate(System_Display_Task, "System Display", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800311c:	2300      	movs	r3, #0
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2301      	movs	r3, #1
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	2282      	movs	r2, #130	; 0x82
 8003128:	492e      	ldr	r1, [pc, #184]	; (80031e4 <main+0x19c>)
 800312a:	482f      	ldr	r0, [pc, #188]	; (80031e8 <main+0x1a0>)
 800312c:	f7fe f886 	bl	800123c <xTaskCreate>

	// create software timers for controlling traffic lights (need to fix settings)
	xRedLightTimer = xTimerCreate("Red Traffic Light", 4000 / portTICK_PERIOD_MS, pdFALSE, (void *) 0, vRedLightCallbackFunction);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <main+0x1a4>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800313c:	482c      	ldr	r0, [pc, #176]	; (80031f0 <main+0x1a8>)
 800313e:	f7fe fff3 	bl	8002128 <xTimerCreate>
 8003142:	4602      	mov	r2, r0
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <main+0x1ac>)
 8003146:	601a      	str	r2, [r3, #0]
	xYellowLightTimer = xTimerCreate("Yellow Traffic Light", 3000  / portTICK_PERIOD_MS, pdFALSE, (void *) 0, vYellowLightCallbackFunction);
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <main+0x1b0>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	2200      	movs	r2, #0
 8003150:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003154:	4829      	ldr	r0, [pc, #164]	; (80031fc <main+0x1b4>)
 8003156:	f7fe ffe7 	bl	8002128 <xTimerCreate>
 800315a:	4602      	mov	r2, r0
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <main+0x1b8>)
 800315e:	601a      	str	r2, [r3, #0]
	xGreenLightTimer = xTimerCreate("Green Traffic Light", 8000 / portTICK_PERIOD_MS, pdFALSE, (void *) 0, vGreenLightCallbackFunction);
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <main+0x1bc>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2300      	movs	r3, #0
 8003166:	2200      	movs	r2, #0
 8003168:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800316c:	4826      	ldr	r0, [pc, #152]	; (8003208 <main+0x1c0>)
 800316e:	f7fe ffdb 	bl	8002128 <xTimerCreate>
 8003172:	4602      	mov	r2, r0
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <main+0x1c4>)
 8003176:	601a      	str	r2, [r3, #0]

	// Start green light timer
	xTimerStart(xGreenLightTimer, 0);
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <main+0x1c4>)
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	f7fe faba 	bl	80016f4 <xTaskGetTickCount>
 8003180:	4602      	mov	r2, r0
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	2101      	movs	r1, #1
 800318a:	4620      	mov	r0, r4
 800318c:	f7ff f81a 	bl	80021c4 <xTimerGenericCommand>
	light_status = green;
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <main+0x1c8>)
 8003192:	2203      	movs	r2, #3
 8003194:	801a      	strh	r2, [r3, #0]

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8003196:	f7fe f9b7 	bl	8001508 <vTaskStartScheduler>

	return 0;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3704      	adds	r7, #4
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	40020800 	.word	0x40020800
 80031a8:	20001de8 	.word	0x20001de8
 80031ac:	20001dec 	.word	0x20001dec
 80031b0:	20001df0 	.word	0x20001df0
 80031b4:	20001df4 	.word	0x20001df4
 80031b8:	20001df8 	.word	0x20001df8
 80031bc:	08004e08 	.word	0x08004e08
 80031c0:	08004e20 	.word	0x08004e20
 80031c4:	08004e38 	.word	0x08004e38
 80031c8:	08004e44 	.word	0x08004e44
 80031cc:	08004e50 	.word	0x08004e50
 80031d0:	080032f1 	.word	0x080032f1
 80031d4:	08004e68 	.word	0x08004e68
 80031d8:	080033d5 	.word	0x080033d5
 80031dc:	08004e7c 	.word	0x08004e7c
 80031e0:	08003485 	.word	0x08003485
 80031e4:	08004e90 	.word	0x08004e90
 80031e8:	080036e5 	.word	0x080036e5
 80031ec:	08003b1d 	.word	0x08003b1d
 80031f0:	08004ea0 	.word	0x08004ea0
 80031f4:	20001ec8 	.word	0x20001ec8
 80031f8:	08003bb1 	.word	0x08003bb1
 80031fc:	08004eb4 	.word	0x08004eb4
 8003200:	20001ecc 	.word	0x20001ecc
 8003204:	08003c45 	.word	0x08003c45
 8003208:	08004ecc 	.word	0x08004ecc
 800320c:	20001ed0 	.word	0x20001ed0
 8003210:	20001dfc 	.word	0x20001dfc

08003214 <GPIO_REG_Init>:

/*-----------------------------------------------------------*/

static void GPIO_REG_Init( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	// Set InitTypeDef properties
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <GPIO_REG_Init+0x30>)
 800321a:	2201      	movs	r2, #1
 800321c:	711a      	strb	r2, [r3, #4]

	// set clock, data, and reset for shift register
	GPIO_InitStruct.GPIO_Pin = REG_DATA | REG_CLOCK | REG_RESET;
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <GPIO_REG_Init+0x30>)
 8003220:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003224:	601a      	str	r2, [r3, #0]

	// pull up / pull down
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <GPIO_REG_Init+0x30>)
 8003228:	2200      	movs	r2, #0
 800322a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <GPIO_REG_Init+0x30>)
 800322e:	2201      	movs	r2, #1
 8003230:	71da      	strb	r2, [r3, #7]

	// speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <GPIO_REG_Init+0x30>)
 8003234:	2200      	movs	r2, #0
 8003236:	715a      	strb	r2, [r3, #5]

	// Init
	GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003238:	4902      	ldr	r1, [pc, #8]	; (8003244 <GPIO_REG_Init+0x30>)
 800323a:	4803      	ldr	r0, [pc, #12]	; (8003248 <GPIO_REG_Init+0x34>)
 800323c:	f7ff fd06 	bl	8002c4c <GPIO_Init>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20001ed4 	.word	0x20001ed4
 8003248:	40020800 	.word	0x40020800

0800324c <GPIO_Pot_ADC_Init>:

static void GPIO_Pot_ADC_Init( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
	// use ADC1 with APB2 to enable clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003252:	2101      	movs	r1, #1
 8003254:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003258:	f7ff fdc4 	bl	8002de4 <RCC_APB2PeriphClockCmd>

	// initialize GPIO of ADC
	GPIO_InitTypeDef GPIO_InitStruct_ADC;
	GPIO_InitStruct_ADC.GPIO_Mode = GPIO_Mode_AN;
 800325c:	2303      	movs	r3, #3
 800325e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct_ADC.GPIO_Speed = GPIO_Speed_100MHz;
 8003260:	2303      	movs	r3, #3
 8003262:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct_ADC.GPIO_Pin = POT_INPUT; // PC3
 8003264:	2308      	movs	r3, #8
 8003266:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_ADC.GPIO_OType = GPIO_OType_PP;
 8003268:	2300      	movs	r3, #0
 800326a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct_ADC.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC, &GPIO_InitStruct_ADC);
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	4619      	mov	r1, r3
 8003276:	480e      	ldr	r0, [pc, #56]	; (80032b0 <GPIO_Pot_ADC_Init+0x64>)
 8003278:	f7ff fce8 	bl	8002c4c <GPIO_Init>

	// sed ADC properties
	ADC_InitTypeDef ADC_InitStruct;

	ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;
 800327c:	2301      	movs	r3, #1
 800327e:	717b      	strb	r3, [r7, #5]
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_Resolution = ADC_Resolution_10b;
 8003284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003288:	603b      	str	r3, [r7, #0]
	//ADC_InitStruct.ADC_ScanConvMode = DISABLE;
	// might need to change external pin
	//ADC_InitStruct.ADC_ExternalTrigConv = DISABLE;
	//ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	//ADC_InitStruct.ADC_NbrOfConversion = 1;
	ADC_Init(ADC1, &ADC_InitStruct);
 800328a:	463b      	mov	r3, r7
 800328c:	4619      	mov	r1, r3
 800328e:	4809      	ldr	r0, [pc, #36]	; (80032b4 <GPIO_Pot_ADC_Init+0x68>)
 8003290:	f7ff fa56 	bl	8002740 <ADC_Init>

	// enable ADC
	ADC_Cmd (ADC1, ENABLE);
 8003294:	2101      	movs	r1, #1
 8003296:	4807      	ldr	r0, [pc, #28]	; (80032b4 <GPIO_Pot_ADC_Init+0x68>)
 8003298:	f7ff faa8 	bl	80027ec <ADC_Cmd>

	// channel config (need to test with different values of sample time)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 0x01, ADC_SampleTime_15Cycles);
 800329c:	2301      	movs	r3, #1
 800329e:	2201      	movs	r2, #1
 80032a0:	210d      	movs	r1, #13
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <GPIO_Pot_ADC_Init+0x68>)
 80032a4:	f7ff fabe 	bl	8002824 <ADC_RegularChannelConfig>
}
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40012000 	.word	0x40012000

080032b8 <GPIO_Traffic_Lights_Init>:

static void GPIO_Traffic_Lights_Init( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	//PC0 --> red light
	//PC1 --> amber light
	//PC2 --> green light
	// Set InitTypeDef properties
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032be:	2201      	movs	r2, #1
 80032c0:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = RED_LIGHT | YELLOW_LIGHT | GREEN_LIGHT;
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
	// pull up / pull down
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	71da      	strb	r2, [r3, #7]
	// speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	715a      	strb	r2, [r3, #5]
	// Init
	GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032da:	4903      	ldr	r1, [pc, #12]	; (80032e8 <GPIO_Traffic_Lights_Init+0x30>)
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <GPIO_Traffic_Lights_Init+0x34>)
 80032de:	f7ff fcb5 	bl	8002c4c <GPIO_Init>
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20001ed4 	.word	0x20001ed4
 80032ec:	40020800 	.word	0x40020800

080032f0 <Traffic_Flow_Adjustment_Task>:



/*------------Tasks-----------------------------------------------*/
static void Traffic_Flow_Adjustment_Task( void *pvParameters )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	uint16_t potentiometer_value = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	81bb      	strh	r3, [r7, #12]
	uint16_t actual_pot_value = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		// read value of potentiometer at an interval
		ADC_SoftwareStartConv(ADC1);
 8003300:	482d      	ldr	r0, [pc, #180]	; (80033b8 <Traffic_Flow_Adjustment_Task+0xc8>)
 8003302:	f7ff fb59 	bl	80029b8 <ADC_SoftwareStartConv>
		while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 8003306:	e002      	b.n	800330e <Traffic_Flow_Adjustment_Task+0x1e>
		{
			vTaskDelay(100);
 8003308:	2064      	movs	r0, #100	; 0x64
 800330a:	f7fe f8c9 	bl	80014a0 <vTaskDelay>
		while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 800330e:	2102      	movs	r1, #2
 8003310:	4829      	ldr	r0, [pc, #164]	; (80033b8 <Traffic_Flow_Adjustment_Task+0xc8>)
 8003312:	f7ff fb6e 	bl	80029f2 <ADC_GetFlagStatus>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f5      	beq.n	8003308 <Traffic_Flow_Adjustment_Task+0x18>
		}
		actual_pot_value = ADC_GetConversionValue(ADC1);
 800331c:	4826      	ldr	r0, [pc, #152]	; (80033b8 <Traffic_Flow_Adjustment_Task+0xc8>)
 800331e:	f7ff fb5b 	bl	80029d8 <ADC_GetConversionValue>
 8003322:	4603      	mov	r3, r0
 8003324:	81fb      	strh	r3, [r7, #14]
		printf("Actual potentiometer value: %d\n", actual_pot_value);
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	4619      	mov	r1, r3
 800332a:	4824      	ldr	r0, [pc, #144]	; (80033bc <Traffic_Flow_Adjustment_Task+0xcc>)
 800332c:	f001 f82e 	bl	800438c <printf>

		// normalize potentiometer value to be in range 1-6 (need to find actual range of potentiometer to do this)
		// range is 1-6 because at slowest LEDs should come ~ every 6 cars
		// (potVAL - potMIN) / (potMAX - potMIN) x (6 - 1) + 1
		// potMAX = 1023, potMIN = 5
		potentiometer_value = (int)((((float)actual_pot_value - (float)5) / ((float)1023 - (float)5) * (6 - 1)) + 1); // error here (doesn't go past)
 8003330:	89fb      	ldrh	r3, [r7, #14]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800333e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003342:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80033c0 <Traffic_Flow_Adjustment_Task+0xd0>
 8003346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800334a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800334e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800335a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800335e:	edc7 7a00 	vstr	s15, [r7]
 8003362:	883b      	ldrh	r3, [r7, #0]
 8003364:	81bb      	strh	r3, [r7, #12]
		//printf("Potentiometer value after normalizing: %d", potentiometer_value);

		// send potentiometer value to other tasks (add to queue) (how to make sure both tasks receive it?)
		if( xQueueSend(xQueue_pot_car_handle, &potentiometer_value, 1000) && xQueueSend(xQueue_pot_lights_handle, &potentiometer_value, 1000))
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <Traffic_Flow_Adjustment_Task+0xd4>)
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	f107 010c 	add.w	r1, r7, #12
 800336e:	2300      	movs	r3, #0
 8003370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003374:	f7fd fb56 	bl	8000a24 <xQueueGenericSend>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <Traffic_Flow_Adjustment_Task+0xba>
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <Traffic_Flow_Adjustment_Task+0xd8>)
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	f107 010c 	add.w	r1, r7, #12
 8003386:	2300      	movs	r3, #0
 8003388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800338c:	f7fd fb4a 	bl	8000a24 <xQueueGenericSend>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <Traffic_Flow_Adjustment_Task+0xba>
		{
			printf("Successfully added potentiometer value: %d to the queue and mutex \n", potentiometer_value);
 8003396:	89bb      	ldrh	r3, [r7, #12]
 8003398:	4619      	mov	r1, r3
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <Traffic_Flow_Adjustment_Task+0xdc>)
 800339c:	f000 fff6 	bl	800438c <printf>
			vTaskDelay(500);
 80033a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033a4:	f7fe f87c 	bl	80014a0 <vTaskDelay>
 80033a8:	e002      	b.n	80033b0 <Traffic_Flow_Adjustment_Task+0xc0>
		}
		else
		{
			printf("Traffic flow adjustment failed!\n");
 80033aa:	4809      	ldr	r0, [pc, #36]	; (80033d0 <Traffic_Flow_Adjustment_Task+0xe0>)
 80033ac:	f001 f8cc 	bl	8004548 <puts>
		}

		vTaskDelay(200);
 80033b0:	20c8      	movs	r0, #200	; 0xc8
 80033b2:	f7fe f875 	bl	80014a0 <vTaskDelay>
		ADC_SoftwareStartConv(ADC1);
 80033b6:	e7a3      	b.n	8003300 <Traffic_Flow_Adjustment_Task+0x10>
 80033b8:	40012000 	.word	0x40012000
 80033bc:	08004ee0 	.word	0x08004ee0
 80033c0:	447e8000 	.word	0x447e8000
 80033c4:	20001de8 	.word	0x20001de8
 80033c8:	20001dec 	.word	0x20001dec
 80033cc:	08004f00 	.word	0x08004f00
 80033d0:	08004f44 	.word	0x08004f44

080033d4 <Traffic_Generator_Task>:
	}
}

static void Traffic_Generator_Task( void *pvParameters )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	uint16_t potentiometer_value;
	uint16_t car_exists = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	817b      	strh	r3, [r7, #10]

	while(1)
	{
		// receive traffic rate from flow adjustment task

		if(xQueueReceive(xQueue_pot_car_handle, &potentiometer_value, 500))
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <Traffic_Generator_Task+0x98>)
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	f107 010c 	add.w	r1, r7, #12
 80033e8:	2300      	movs	r3, #0
 80033ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033ee:	f7fd fca7 	bl	8000d40 <xQueueGenericReceive>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d035      	beq.n	8003464 <Traffic_Generator_Task+0x90>
		{
			//vTaskDelay(250);

			printf("Received potentiometer value in generator task: %d\n", potentiometer_value);
 80033f8:	89bb      	ldrh	r3, [r7, #12]
 80033fa:	4619      	mov	r1, r3
 80033fc:	481c      	ldr	r0, [pc, #112]	; (8003470 <Traffic_Generator_Task+0x9c>)
 80033fe:	f000 ffc5 	bl	800438c <printf>

			// Logic: generate random number from 0-60
			// Potentiometer value will be in range from 1-6 (@6: cars always generated, @1 cars 1/6)
			// if random_number < 60 / (7-pot) then a car should be generated
			// with higher potentiometer value, the more likely that the random number would be less than -> more cars generated
			uint16_t random_number = rand() % 59;
 8003402:	f001 f8a9 	bl	8004558 <rand>
 8003406:	4601      	mov	r1, r0
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <Traffic_Generator_Task+0xa0>)
 800340a:	fb83 2301 	smull	r2, r3, r3, r1
 800340e:	10da      	asrs	r2, r3, #3
 8003410:	17cb      	asrs	r3, r1, #31
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	1aca      	subs	r2, r1, r3
 8003420:	4613      	mov	r3, r2
 8003422:	81fb      	strh	r3, [r7, #14]
			car_exists = (random_number < (60 / (7 - potentiometer_value)));
 8003424:	89fa      	ldrh	r2, [r7, #14]
 8003426:	89bb      	ldrh	r3, [r7, #12]
 8003428:	f1c3 0307 	rsb	r3, r3, #7
 800342c:	213c      	movs	r1, #60	; 0x3c
 800342e:	fb91 f3f3 	sdiv	r3, r1, r3
 8003432:	429a      	cmp	r2, r3
 8003434:	bfb4      	ite	lt
 8003436:	2301      	movlt	r3, #1
 8003438:	2300      	movge	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	817b      	strh	r3, [r7, #10]
			// if pot = 1 (slowest cars) => random number < (60/6) = 10 (cars would come approx 1/6 of the time)

			// send int bit to system display task that represents each car (if there or not) to appear on lights
			if (xQueueSend(xQueue_cars_handle, &car_exists, 1000))
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <Traffic_Generator_Task+0xa4>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	f107 010a 	add.w	r1, r7, #10
 8003448:	2300      	movs	r3, #0
 800344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344e:	f7fd fae9 	bl	8000a24 <xQueueGenericSend>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0c3      	beq.n	80033e0 <Traffic_Generator_Task+0xc>
			{
				//vTaskDelay(250);

				printf("Successfully sent next car value to cars queue. Value = %d\n", car_exists);
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	4619      	mov	r1, r3
 800345c:	4807      	ldr	r0, [pc, #28]	; (800347c <Traffic_Generator_Task+0xa8>)
 800345e:	f000 ff95 	bl	800438c <printf>
 8003462:	e7bd      	b.n	80033e0 <Traffic_Generator_Task+0xc>
			}
		}
		else
		{
			printf("Unsuccessful receive of pot value");
 8003464:	4806      	ldr	r0, [pc, #24]	; (8003480 <Traffic_Generator_Task+0xac>)
 8003466:	f000 ff91 	bl	800438c <printf>
		if(xQueueReceive(xQueue_pot_car_handle, &potentiometer_value, 500))
 800346a:	e7b9      	b.n	80033e0 <Traffic_Generator_Task+0xc>
 800346c:	20001de8 	.word	0x20001de8
 8003470:	08004f64 	.word	0x08004f64
 8003474:	22b63cbf 	.word	0x22b63cbf
 8003478:	20001df0 	.word	0x20001df0
 800347c:	08004f98 	.word	0x08004f98
 8003480:	08004fd4 	.word	0x08004fd4

08003484 <Traffic_Light_State_Task>:
		}
	}
}

static void Traffic_Light_State_Task( void *pvParameters )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
	uint16_t potentiometer_value;
	uint16_t old_potentiometer_value = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	82fb      	strh	r3, [r7, #22]

	while(1)
	{

		// receive traffic rate from flow adjustment task
		if(xQueueReceive(xQueue_pot_lights_handle, &potentiometer_value, 500))
 8003490:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <Traffic_Light_State_Task+0x230>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f107 010a 	add.w	r1, r7, #10
 8003498:	2300      	movs	r3, #0
 800349a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800349e:	f7fd fc4f 	bl	8000d40 <xQueueGenericReceive>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8100 	beq.w	80036aa <Traffic_Light_State_Task+0x226>
		{
			vTaskDelay(250);
 80034aa:	20fa      	movs	r0, #250	; 0xfa
 80034ac:	f7fd fff8 	bl	80014a0 <vTaskDelay>

			printf("Received potentiometer value in light state: %d\n", potentiometer_value);
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4880      	ldr	r0, [pc, #512]	; (80036b8 <Traffic_Light_State_Task+0x234>)
 80034b6:	f000 ff69 	bl	800438c <printf>
			printf("The old potentiometer value is: %d", old_potentiometer_value);
 80034ba:	8afb      	ldrh	r3, [r7, #22]
 80034bc:	4619      	mov	r1, r3
 80034be:	487f      	ldr	r0, [pc, #508]	; (80036bc <Traffic_Light_State_Task+0x238>)
 80034c0:	f000 ff64 	bl	800438c <printf>

			if (potentiometer_value != old_potentiometer_value)
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	8afa      	ldrh	r2, [r7, #22]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d0e1      	beq.n	8003490 <Traffic_Light_State_Task+0xc>
			{
				// calculate new period for red and green light timer
				// potentiometer value is normalized from 1-6
				// need the max adjustment (pot ~ 6) to mean green period is 2x red period (green: 10000, red: 5000)
				// need the min adjustment (pot ~ 1) to mean red period is 2x green period (green: 5000, red: 10000)
				TickType_t new_green_period = 5000 + 1000 * (6 - potentiometer_value); // 1 -> +5000, 6 -> + 0
 80034cc:	897b      	ldrh	r3, [r7, #10]
 80034ce:	f1c3 0306 	rsb	r3, r3, #6
 80034d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80034de:	3308      	adds	r3, #8
 80034e0:	613b      	str	r3, [r7, #16]
				TickType_t new_red_period = 5000 + 1000 * (potentiometer_value - 1); // 1 -> +0, 6 -> +5000
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80034f2:	3308      	adds	r3, #8
 80034f4:	60fb      	str	r3, [r7, #12]

				// based on potentiometer_value, xTimerChangePeriod() to change speed of light changes
				// check what light is on now (if on stop before changing period, then continue)
				// yellow light time never changes no matter the potentiometer value
				if (xTimerIsTimerActive(xRedLightTimer) != pdFALSE) // check if red light is on
 80034f6:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff f8fc 	bl	80026f8 <xTimerIsTimerActive>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d043      	beq.n	800358e <Traffic_Light_State_Task+0x10a>
				{
					xTimerStop( xRedLightTimer, 0);
 8003506:	4b6e      	ldr	r3, [pc, #440]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	2200      	movs	r2, #0
 8003512:	2103      	movs	r1, #3
 8003514:	f7fe fe56 	bl	80021c4 <xTimerGenericCommand>
					xTimerChangePeriod( xRedLightTimer, new_red_period, 0 );
 8003518:	4b69      	ldr	r3, [pc, #420]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	2104      	movs	r1, #4
 8003526:	f7fe fe4d 	bl	80021c4 <xTimerGenericCommand>
					xTimerChangePeriod( xGreenLightTimer, new_green_period, 0 );
 800352a:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	2104      	movs	r1, #4
 8003538:	f7fe fe44 	bl	80021c4 <xTimerGenericCommand>
					xTimerStop( xGreenLightTimer, 0 ); // need to stop it (changing period triggers starting timer, only red light timer should run)
 800353c:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	2200      	movs	r2, #0
 8003548:	2103      	movs	r1, #3
 800354a:	f7fe fe3b 	bl	80021c4 <xTimerGenericCommand>
					printf("Light task: light is red, periods changed\n");
 800354e:	485e      	ldr	r0, [pc, #376]	; (80036c8 <Traffic_Light_State_Task+0x244>)
 8003550:	f000 fffa 	bl	8004548 <puts>
					if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003554:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <Traffic_Light_State_Task+0x248>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	f7fd fbef 	bl	8000d40 <xQueueGenericReceive>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 809d 	beq.w	80036a4 <Traffic_Light_State_Task+0x220>
					{
						light_status = red;
 800356a:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <Traffic_Light_State_Task+0x24c>)
 800356c:	2201      	movs	r2, #1
 800356e:	801a      	strh	r2, [r3, #0]
						if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003570:	4b56      	ldr	r3, [pc, #344]	; (80036cc <Traffic_Light_State_Task+0x248>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	f7fd fa53 	bl	8000a24 <xQueueGenericSend>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	f000 808f 	beq.w	80036a4 <Traffic_Light_State_Task+0x220>
						{
							printf("Giving semaphore failed in light state task");
 8003586:	4853      	ldr	r0, [pc, #332]	; (80036d4 <Traffic_Light_State_Task+0x250>)
 8003588:	f000 ff00 	bl	800438c <printf>
 800358c:	e08a      	b.n	80036a4 <Traffic_Light_State_Task+0x220>
						}
					}
				}
				else if (xTimerIsTimerActive(xGreenLightTimer) != pdFALSE)
 800358e:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f8b0 	bl	80026f8 <xTimerIsTimerActive>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d041      	beq.n	8003622 <Traffic_Light_State_Task+0x19e>
				{
					xTimerStop( xGreenLightTimer, 0);
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	2200      	movs	r2, #0
 80035aa:	2103      	movs	r1, #3
 80035ac:	f7fe fe0a 	bl	80021c4 <xTimerGenericCommand>
					xTimerChangePeriod( xRedLightTimer, new_red_period, 0 );
 80035b0:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	2104      	movs	r1, #4
 80035be:	f7fe fe01 	bl	80021c4 <xTimerGenericCommand>
					xTimerChangePeriod( xGreenLightTimer, new_green_period, 0 );
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	2104      	movs	r1, #4
 80035d0:	f7fe fdf8 	bl	80021c4 <xTimerGenericCommand>
					xTimerStop( xRedLightTimer, 0 ); // need to stop it (changing period triggers starting timer, only green light timer should run)
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2300      	movs	r3, #0
 80035de:	2200      	movs	r2, #0
 80035e0:	2103      	movs	r1, #3
 80035e2:	f7fe fdef 	bl	80021c4 <xTimerGenericCommand>
					printf("Light task: light is green, periods changed\n");
 80035e6:	483c      	ldr	r0, [pc, #240]	; (80036d8 <Traffic_Light_State_Task+0x254>)
 80035e8:	f000 ffae 	bl	8004548 <puts>
					if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <Traffic_Light_State_Task+0x248>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	f7fd fba3 	bl	8000d40 <xQueueGenericReceive>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d051      	beq.n	80036a4 <Traffic_Light_State_Task+0x220>
					{
						light_status = green;
 8003600:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <Traffic_Light_State_Task+0x24c>)
 8003602:	2203      	movs	r2, #3
 8003604:	801a      	strh	r2, [r3, #0]
						if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <Traffic_Light_State_Task+0x248>)
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	f7fd fa08 	bl	8000a24 <xQueueGenericSend>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d044      	beq.n	80036a4 <Traffic_Light_State_Task+0x220>
						{
							printf("Giving semaphore failed in light state task");
 800361a:	482e      	ldr	r0, [pc, #184]	; (80036d4 <Traffic_Light_State_Task+0x250>)
 800361c:	f000 feb6 	bl	800438c <printf>
 8003620:	e040      	b.n	80036a4 <Traffic_Light_State_Task+0x220>
						}
					}
				}
				else
				{
					xTimerChangePeriod( xRedLightTimer, new_red_period, 0 );
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2300      	movs	r3, #0
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	2104      	movs	r1, #4
 8003630:	f7fe fdc8 	bl	80021c4 <xTimerGenericCommand>
					xTimerChangePeriod( xGreenLightTimer, new_green_period, 0 );
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	2104      	movs	r1, #4
 8003642:	f7fe fdbf 	bl	80021c4 <xTimerGenericCommand>
					xTimerStop( xRedLightTimer, 0 );
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <Traffic_Light_State_Task+0x23c>)
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	2200      	movs	r2, #0
 8003652:	2103      	movs	r1, #3
 8003654:	f7fe fdb6 	bl	80021c4 <xTimerGenericCommand>
					xTimerStop( xGreenLightTimer, 0 );
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <Traffic_Light_State_Task+0x240>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	2200      	movs	r2, #0
 8003664:	2103      	movs	r1, #3
 8003666:	f7fe fdad 	bl	80021c4 <xTimerGenericCommand>
					printf("Light task: light is yellow, periods changed\n");
 800366a:	481c      	ldr	r0, [pc, #112]	; (80036dc <Traffic_Light_State_Task+0x258>)
 800366c:	f000 ff6c 	bl	8004548 <puts>
					if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <Traffic_Light_State_Task+0x248>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	f7fd fb61 	bl	8000d40 <xQueueGenericReceive>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00f      	beq.n	80036a4 <Traffic_Light_State_Task+0x220>
					{
						light_status = yellow;
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <Traffic_Light_State_Task+0x24c>)
 8003686:	2202      	movs	r2, #2
 8003688:	801a      	strh	r2, [r3, #0]
						if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <Traffic_Light_State_Task+0x248>)
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	f7fd f9c6 	bl	8000a24 <xQueueGenericSend>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d002      	beq.n	80036a4 <Traffic_Light_State_Task+0x220>
						{
							printf("Giving semaphore failed in light state task");
 800369e:	480d      	ldr	r0, [pc, #52]	; (80036d4 <Traffic_Light_State_Task+0x250>)
 80036a0:	f000 fe74 	bl	800438c <printf>
						}
					}
				}
				old_potentiometer_value = potentiometer_value;
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	82fb      	strh	r3, [r7, #22]
 80036a8:	e6f2      	b.n	8003490 <Traffic_Light_State_Task+0xc>
				printf("Unsuccessful send of light status to system display");
			}*/
		}
		else
		{
			printf("Unsuccessful receive of pot value");
 80036aa:	480d      	ldr	r0, [pc, #52]	; (80036e0 <Traffic_Light_State_Task+0x25c>)
 80036ac:	f000 fe6e 	bl	800438c <printf>
		if(xQueueReceive(xQueue_pot_lights_handle, &potentiometer_value, 500))
 80036b0:	e6ee      	b.n	8003490 <Traffic_Light_State_Task+0xc>
 80036b2:	bf00      	nop
 80036b4:	20001dec 	.word	0x20001dec
 80036b8:	08004ff8 	.word	0x08004ff8
 80036bc:	0800502c 	.word	0x0800502c
 80036c0:	20001ec8 	.word	0x20001ec8
 80036c4:	20001ed0 	.word	0x20001ed0
 80036c8:	08005050 	.word	0x08005050
 80036cc:	20001df8 	.word	0x20001df8
 80036d0:	20001dfc 	.word	0x20001dfc
 80036d4:	0800507c 	.word	0x0800507c
 80036d8:	080050a8 	.word	0x080050a8
 80036dc:	080050d4 	.word	0x080050d4
 80036e0:	08004fd4 	.word	0x08004fd4

080036e4 <System_Display_Task>:
		}
	}
}

static void System_Display_Task( void *pvParameters )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b09a      	sub	sp, #104	; 0x68
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	// if light_status = 1 = RED, LED's don't move past light (can still keep filling up)
	// if light_status = 2 = YELLOW, LED's don't move past light (cars in intersection get out of intersection)
	// if light_status = 3 = GREEN, LED's continue as normal
	uint16_t car_exists;
	uint16_t cars[24]; // represents all leds
	for(int i = 0; i < 24; i++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	667b      	str	r3, [r7, #100]	; 0x64
 80036f0:	e00a      	b.n	8003708 <System_Display_Task+0x24>
		cars[i] = 0;
 80036f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80036fa:	4413      	add	r3, r2
 80036fc:	2200      	movs	r2, #0
 80036fe:	f823 2c5c 	strh.w	r2, [r3, #-92]
	for(int i = 0; i < 24; i++) {
 8003702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003704:	3301      	adds	r3, #1
 8003706:	667b      	str	r3, [r7, #100]	; 0x64
 8003708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370a:	2b17      	cmp	r3, #23
 800370c:	ddf1      	ble.n	80036f2 <System_Display_Task+0xe>
	}

	while(1)
	{
		if(xQueueReceive(xQueue_cars_handle, &car_exists, 500))
 800370e:	4bbf      	ldr	r3, [pc, #764]	; (8003a0c <System_Display_Task+0x328>)
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8003716:	2300      	movs	r3, #0
 8003718:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800371c:	f7fd fb10 	bl	8000d40 <xQueueGenericReceive>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <System_Display_Task+0x4c>
		{
			printf("Received car exists value in system display: %d\n", car_exists);
 8003726:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003728:	4619      	mov	r1, r3
 800372a:	48b9      	ldr	r0, [pc, #740]	; (8003a10 <System_Display_Task+0x32c>)
 800372c:	f000 fe2e 	bl	800438c <printf>
		{
			printf("Received light status value in system display: %d\n", light_status);
		}*/

		// take semaphore to use light_status
		if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003730:	4bb8      	ldr	r3, [pc, #736]	; (8003a14 <System_Display_Task+0x330>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	f7fd fb01 	bl	8000d40 <xQueueGenericReceive>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0e4      	beq.n	800370e <System_Display_Task+0x2a>
		{
			printf("In display: semaphore taken successfully\n");
 8003744:	48b4      	ldr	r0, [pc, #720]	; (8003a18 <System_Display_Task+0x334>)
 8003746:	f000 feff 	bl	8004548 <puts>

			// if red light
			if (light_status == red)
 800374a:	4bb4      	ldr	r3, [pc, #720]	; (8003a1c <System_Display_Task+0x338>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	f040 8083 	bne.w	800385a <System_Display_Task+0x176>
			{
				printf("In display: light is red, cars stop shifting at light\n");
 8003754:	48b2      	ldr	r0, [pc, #712]	; (8003a20 <System_Display_Task+0x33c>)
 8003756:	f000 fef7 	bl	8004548 <puts>

				// cars after intersection
				for (int i = 23; i > 16; i--)
 800375a:	2317      	movs	r3, #23
 800375c:	663b      	str	r3, [r7, #96]	; 0x60
 800375e:	e01a      	b.n	8003796 <System_Display_Task+0xb2>
				{
					cars[i] = cars[i-1];
 8003760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003762:	3b01      	subs	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800376a:	4413      	add	r3, r2
 800376c:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8003770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003778:	440b      	add	r3, r1
 800377a:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 800377e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003780:	3b01      	subs	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003788:	4413      	add	r3, r2
 800378a:	2200      	movs	r2, #0
 800378c:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for (int i = 23; i > 16; i--)
 8003790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003792:	3b01      	subs	r3, #1
 8003794:	663b      	str	r3, [r7, #96]	; 0x60
 8003796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003798:	2b10      	cmp	r3, #16
 800379a:	dce1      	bgt.n	8003760 <System_Display_Task+0x7c>
				}
				cars[16] = cars[12];
 800379c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800379e:	85bb      	strh	r3, [r7, #44]	; 0x2c

				// cars in intersection
				for(int i = 13; i >= 9; i--)
 80037a0:	230d      	movs	r3, #13
 80037a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037a4:	e01a      	b.n	80037dc <System_Display_Task+0xf8>
				{
					cars[i] = cars[i-1];
 80037a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a8:	3b01      	subs	r3, #1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80037b0:	4413      	add	r3, r2
 80037b2:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 80037b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037be:	440b      	add	r3, r1
 80037c0:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 80037c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c6:	3b01      	subs	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80037ce:	4413      	add	r3, r2
 80037d0:	2200      	movs	r2, #0
 80037d2:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 13; i >= 9; i--)
 80037d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d8:	3b01      	subs	r3, #1
 80037da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037de:	2b08      	cmp	r3, #8
 80037e0:	dce1      	bgt.n	80037a6 <System_Display_Task+0xc2>
				}

				//  cars before the intersection can move along, but not cross the intersection itself
				if (cars[8] == 0)
 80037e2:	8bbb      	ldrh	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <System_Display_Task+0x10c>
				{
					cars[8] = cars[6];
 80037e8:	8b3b      	ldrh	r3, [r7, #24]
 80037ea:	83bb      	strh	r3, [r7, #28]
					cars[6] = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	833b      	strh	r3, [r7, #24]
				}
				for(int i = 6; i > 0; i--)
 80037f0:	2306      	movs	r3, #6
 80037f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80037f4:	e023      	b.n	800383e <System_Display_Task+0x15a>
				{
					if(cars[i] == 0){
 80037f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80037fe:	4413      	add	r3, r2
 8003800:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d117      	bne.n	8003838 <System_Display_Task+0x154>
						cars[i] = cars[i - 1];
 8003808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380a:	3b01      	subs	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003812:	4413      	add	r3, r2
 8003814:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8003818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003820:	440b      	add	r3, r1
 8003822:	f823 2c5c 	strh.w	r2, [r3, #-92]
						cars[i-1] = 0;
 8003826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003828:	3b01      	subs	r3, #1
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003830:	4413      	add	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 6; i > 0; i--)
 8003838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383a:	3b01      	subs	r3, #1
 800383c:	65bb      	str	r3, [r7, #88]	; 0x58
 800383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003840:	2b00      	cmp	r3, #0
 8003842:	dcd8      	bgt.n	80037f6 <System_Display_Task+0x112>
					}
				}

				// add new car (if there's room)
				if (cars[0] == 0)
 8003844:	89bb      	ldrh	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <System_Display_Task+0x16a>
				{
					cars[0] = car_exists;
 800384a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800384c:	81bb      	strh	r3, [r7, #12]
				}

				setRoadDisplay(cars);
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f91c 	bl	8003a90 <setRoadDisplay>
 8003858:	e104      	b.n	8003a64 <System_Display_Task+0x380>

				// move traffic along beyond the red light
			}
			else if (light_status == yellow)
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <System_Display_Task+0x338>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	f040 8083 	bne.w	800396a <System_Display_Task+0x286>
			{
				printf("In display: light is yellow, cars stop shifting before light (ones in light continue)\n");
 8003864:	486f      	ldr	r0, [pc, #444]	; (8003a24 <System_Display_Task+0x340>)
 8003866:	f000 fe6f 	bl	8004548 <puts>

				// cars after intersection
				for (int i = 23; i > 16; i--)
 800386a:	2317      	movs	r3, #23
 800386c:	657b      	str	r3, [r7, #84]	; 0x54
 800386e:	e01a      	b.n	80038a6 <System_Display_Task+0x1c2>
				{
					cars[i] = cars[i-1];
 8003870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003872:	3b01      	subs	r3, #1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800387a:	4413      	add	r3, r2
 800387c:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003888:	440b      	add	r3, r1
 800388a:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	3b01      	subs	r3, #1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003898:	4413      	add	r3, r2
 800389a:	2200      	movs	r2, #0
 800389c:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for (int i = 23; i > 16; i--)
 80038a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a2:	3b01      	subs	r3, #1
 80038a4:	657b      	str	r3, [r7, #84]	; 0x54
 80038a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	dce1      	bgt.n	8003870 <System_Display_Task+0x18c>
				}
				cars[16] = cars[12];
 80038ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ae:	85bb      	strh	r3, [r7, #44]	; 0x2c

				// cars in intersection
				for(int i = 13; i >= 10; i--)
 80038b0:	230d      	movs	r3, #13
 80038b2:	653b      	str	r3, [r7, #80]	; 0x50
 80038b4:	e01a      	b.n	80038ec <System_Display_Task+0x208>
				{
					cars[i] = cars[i-1];
 80038b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b8:	3b01      	subs	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038c0:	4413      	add	r3, r2
 80038c2:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80038ce:	440b      	add	r3, r1
 80038d0:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 80038d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d6:	3b01      	subs	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038de:	4413      	add	r3, r2
 80038e0:	2200      	movs	r2, #0
 80038e2:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 13; i >= 10; i--)
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	3b01      	subs	r3, #1
 80038ea:	653b      	str	r3, [r7, #80]	; 0x50
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	dce1      	bgt.n	80038b6 <System_Display_Task+0x1d2>
				}

				//  cars before the intersection can move along, but not cross the intersection itself
				if (cars[8] == 0)
 80038f2:	8bbb      	ldrh	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <System_Display_Task+0x21c>
				{
					cars[8] = cars[6];
 80038f8:	8b3b      	ldrh	r3, [r7, #24]
 80038fa:	83bb      	strh	r3, [r7, #28]
					cars[6] = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	833b      	strh	r3, [r7, #24]
				}
				for(int i = 6; i > 0; i--)
 8003900:	2306      	movs	r3, #6
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	e023      	b.n	800394e <System_Display_Task+0x26a>
				{
					if(cars[i] == 0){
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800390e:	4413      	add	r3, r2
 8003910:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d117      	bne.n	8003948 <System_Display_Task+0x264>
						cars[i] = cars[i - 1];
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	3b01      	subs	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003922:	4413      	add	r3, r2
 8003924:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8003928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003930:	440b      	add	r3, r1
 8003932:	f823 2c5c 	strh.w	r2, [r3, #-92]
						cars[i-1] = 0;
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	3b01      	subs	r3, #1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003940:	4413      	add	r3, r2
 8003942:	2200      	movs	r2, #0
 8003944:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 6; i > 0; i--)
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	3b01      	subs	r3, #1
 800394c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	2b00      	cmp	r3, #0
 8003952:	dcd8      	bgt.n	8003906 <System_Display_Task+0x222>
					}
				}

				// add new car (if there's room)
				if (cars[0] == 0)
 8003954:	89bb      	ldrh	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <System_Display_Task+0x27a>
				{
					cars[0] = car_exists;
 800395a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800395c:	81bb      	strh	r3, [r7, #12]
				}

				setRoadDisplay(cars);
 800395e:	f107 030c 	add.w	r3, r7, #12
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f894 	bl	8003a90 <setRoadDisplay>
 8003968:	e07c      	b.n	8003a64 <System_Display_Task+0x380>
			}
			else if (light_status == green)
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <System_Display_Task+0x338>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d178      	bne.n	8003a64 <System_Display_Task+0x380>
			{
				printf("In display: light is green, cars shifting\n");
 8003972:	482d      	ldr	r0, [pc, #180]	; (8003a28 <System_Display_Task+0x344>)
 8003974:	f000 fde8 	bl	8004548 <puts>

				//updateShiftRegister(car_exists);
				//int d = 1;
				// traffic moves throughout the road constantly

				for (int i = 23; i > 16; i--)
 8003978:	2317      	movs	r3, #23
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
 800397c:	e01a      	b.n	80039b4 <System_Display_Task+0x2d0>
				{
					cars[i] = cars[i-1];
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003980:	3b01      	subs	r3, #1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003988:	4413      	add	r3, r2
 800398a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 800398e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003996:	440b      	add	r3, r1
 8003998:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 800399c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399e:	3b01      	subs	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039a6:	4413      	add	r3, r2
 80039a8:	2200      	movs	r2, #0
 80039aa:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for (int i = 23; i > 16; i--)
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b0:	3b01      	subs	r3, #1
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	dce1      	bgt.n	800397e <System_Display_Task+0x29a>
				}
				cars[16] = cars[11];
 80039ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039bc:	85bb      	strh	r3, [r7, #44]	; 0x2c

				// cars in intersection
				for(int i = 13; i >= 9; i--)
 80039be:	230d      	movs	r3, #13
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
 80039c2:	e01a      	b.n	80039fa <System_Display_Task+0x316>
				{
					cars[i] = cars[i-1];
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	3b01      	subs	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039ce:	4413      	add	r3, r2
 80039d0:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80039dc:	440b      	add	r3, r1
 80039de:	f823 2c5c 	strh.w	r2, [r3, #-92]
					cars[i-1] = 0;
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	3b01      	subs	r3, #1
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039ec:	4413      	add	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 13; i >= 9; i--)
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	3b01      	subs	r3, #1
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
 80039fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	dce1      	bgt.n	80039c4 <System_Display_Task+0x2e0>
				}

				cars[8] = cars[6];
 8003a00:	8b3b      	ldrh	r3, [r7, #24]
 8003a02:	83bb      	strh	r3, [r7, #28]
				for(int i = 6; i > 0; i--)
 8003a04:	2306      	movs	r3, #6
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
 8003a08:	e022      	b.n	8003a50 <System_Display_Task+0x36c>
 8003a0a:	bf00      	nop
 8003a0c:	20001df0 	.word	0x20001df0
 8003a10:	08005104 	.word	0x08005104
 8003a14:	20001df8 	.word	0x20001df8
 8003a18:	08005138 	.word	0x08005138
 8003a1c:	20001dfc 	.word	0x20001dfc
 8003a20:	08005164 	.word	0x08005164
 8003a24:	0800519c 	.word	0x0800519c
 8003a28:	080051f4 	.word	0x080051f4
				{
					cars[i] = cars[i-1];
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a36:	4413      	add	r3, r2
 8003a38:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a44:	440b      	add	r3, r1
 8003a46:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for(int i = 6; i > 0; i--)
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	dcea      	bgt.n	8003a2c <System_Display_Task+0x348>
				}

				cars[0] = car_exists;
 8003a56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a58:	81bb      	strh	r3, [r7, #12]

				// check if it keeps same light locations
				setRoadDisplay(cars);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f816 	bl	8003a90 <setRoadDisplay>
			}

			if(xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <System_Display_Task+0x3a4>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	f7fc ffd9 	bl	8000a24 <xQueueGenericSend>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <System_Display_Task+0x39a>
			{
				printf("System display: giving semaphore failed");
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <System_Display_Task+0x3a8>)
 8003a7a:	f000 fc87 	bl	800438c <printf>
			}

			vTaskDelay(800);
 8003a7e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003a82:	f7fd fd0d 	bl	80014a0 <vTaskDelay>
		if(xQueueReceive(xQueue_cars_handle, &car_exists, 500))
 8003a86:	e642      	b.n	800370e <System_Display_Task+0x2a>
 8003a88:	20001df8 	.word	0x20001df8
 8003a8c:	08005220 	.word	0x08005220

08003a90 <setRoadDisplay>:
	}
	clock();
}

void setRoadDisplay(uint16_t cars[24])
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	printf("In set road display: the value of cars[0] is %d", cars[0]);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	481c      	ldr	r0, [pc, #112]	; (8003b10 <setRoadDisplay+0x80>)
 8003aa0:	f000 fc74 	bl	800438c <printf>
	printf("In set road display: the value of cars[1] is %d", cars[1]);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4819      	ldr	r0, [pc, #100]	; (8003b14 <setRoadDisplay+0x84>)
 8003aae:	f000 fc6d 	bl	800438c <printf>
	for(int i = 23; i >= 0; i--) {
 8003ab2:	2317      	movs	r3, #23
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e024      	b.n	8003b02 <setRoadDisplay+0x72>
		if (cars[i] == 0)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <setRoadDisplay+0x3e>
		{
			GPIO_ResetBits(GPIOC, REG_DATA);
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	4813      	ldr	r0, [pc, #76]	; (8003b18 <setRoadDisplay+0x88>)
 8003aca:	f7ff f95c 	bl	8002d86 <GPIO_ResetBits>
		}
		if (cars[i] == 1)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d103      	bne.n	8003ae4 <setRoadDisplay+0x54>
		{
			GPIO_SetBits(GPIOC, REG_DATA);
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	480e      	ldr	r0, [pc, #56]	; (8003b18 <setRoadDisplay+0x88>)
 8003ae0:	f7ff f942 	bl	8002d68 <GPIO_SetBits>
		}

		GPIO_ResetBits(GPIOC, REG_CLOCK);
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	480c      	ldr	r0, [pc, #48]	; (8003b18 <setRoadDisplay+0x88>)
 8003ae8:	f7ff f94d 	bl	8002d86 <GPIO_ResetBits>
		GPIO_SetBits(GPIOC, REG_CLOCK);
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	480a      	ldr	r0, [pc, #40]	; (8003b18 <setRoadDisplay+0x88>)
 8003af0:	f7ff f93a 	bl	8002d68 <GPIO_SetBits>
		GPIO_ResetBits(GPIOC, REG_CLOCK);
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <setRoadDisplay+0x88>)
 8003af8:	f7ff f945 	bl	8002d86 <GPIO_ResetBits>
	for(int i = 23; i >= 0; i--) {
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	dad7      	bge.n	8003ab8 <setRoadDisplay+0x28>
	}
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08005248 	.word	0x08005248
 8003b14:	08005278 	.word	0x08005278
 8003b18:	40020800 	.word	0x40020800

08003b1c <vRedLightCallbackFunction>:
//	//GPIO_SetBits(GPIOC, YELLOW_LIGHT);
//}

/*------------------ software timer callbacks -----------------------------------------*/
void vRedLightCallbackFunction( TimerHandle_t xTimer )
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
	// this function gets called when red light timer done --> switch to green light
	printf("RedLightCallback: Red light timer done");
 8003b24:	481b      	ldr	r0, [pc, #108]	; (8003b94 <vRedLightCallbackFunction+0x78>)
 8003b26:	f000 fc31 	bl	800438c <printf>
	GPIO_ResetBits(GPIOC, RED_LIGHT);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	481a      	ldr	r0, [pc, #104]	; (8003b98 <vRedLightCallbackFunction+0x7c>)
 8003b2e:	f7ff f92a 	bl	8002d86 <GPIO_ResetBits>

	// need to update value in lights mutex
	if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <vRedLightCallbackFunction+0x80>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f7fd f900 	bl	8000d40 <xQueueGenericReceive>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <vRedLightCallbackFunction+0x58>
	{
		GPIO_SetBits(GPIOC, GREEN_LIGHT);
 8003b46:	2104      	movs	r1, #4
 8003b48:	4813      	ldr	r0, [pc, #76]	; (8003b98 <vRedLightCallbackFunction+0x7c>)
 8003b4a:	f7ff f90d 	bl	8002d68 <GPIO_SetBits>
		light_status = green;
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <vRedLightCallbackFunction+0x84>)
 8003b50:	2203      	movs	r2, #3
 8003b52:	801a      	strh	r2, [r3, #0]
		printf("RedLightCallback: Light status updated to green");
 8003b54:	4813      	ldr	r0, [pc, #76]	; (8003ba4 <vRedLightCallbackFunction+0x88>)
 8003b56:	f000 fc19 	bl	800438c <printf>

		if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <vRedLightCallbackFunction+0x80>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2200      	movs	r2, #0
 8003b62:	2100      	movs	r1, #0
 8003b64:	f7fc ff5e 	bl	8000a24 <xQueueGenericSend>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d002      	beq.n	8003b74 <vRedLightCallbackFunction+0x58>
		{
			printf("RedLightCallback: Giving semaphore failed");
 8003b6e:	480e      	ldr	r0, [pc, #56]	; (8003ba8 <vRedLightCallbackFunction+0x8c>)
 8003b70:	f000 fc0c 	bl	800438c <printf>
		}
	}

	xTimerStart(xGreenLightTimer, 0);
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <vRedLightCallbackFunction+0x90>)
 8003b76:	681c      	ldr	r4, [r3, #0]
 8003b78:	f7fd fdbc 	bl	80016f4 <xTaskGetTickCount>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	2101      	movs	r1, #1
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7fe fb1c 	bl	80021c4 <xTimerGenericCommand>
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	080052a8 	.word	0x080052a8
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	20001df8 	.word	0x20001df8
 8003ba0:	20001dfc 	.word	0x20001dfc
 8003ba4:	080052d0 	.word	0x080052d0
 8003ba8:	08005300 	.word	0x08005300
 8003bac:	20001ed0 	.word	0x20001ed0

08003bb0 <vYellowLightCallbackFunction>:

void vYellowLightCallbackFunction( TimerHandle_t xTimer )
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
	// this function gets called when yellow light timer done --> switch to red light
	printf("Yellow light timer done");
 8003bb8:	481b      	ldr	r0, [pc, #108]	; (8003c28 <vYellowLightCallbackFunction+0x78>)
 8003bba:	f000 fbe7 	bl	800438c <printf>
	GPIO_ResetBits(GPIOC, YELLOW_LIGHT);
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	481a      	ldr	r0, [pc, #104]	; (8003c2c <vYellowLightCallbackFunction+0x7c>)
 8003bc2:	f7ff f8e0 	bl	8002d86 <GPIO_ResetBits>

	// need to update value in lights mutex
	if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <vYellowLightCallbackFunction+0x80>)
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f7fd f8b6 	bl	8000d40 <xQueueGenericReceive>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <vYellowLightCallbackFunction+0x58>
	{
		GPIO_SetBits(GPIOC, RED_LIGHT);
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4813      	ldr	r0, [pc, #76]	; (8003c2c <vYellowLightCallbackFunction+0x7c>)
 8003bde:	f7ff f8c3 	bl	8002d68 <GPIO_SetBits>
		light_status = red;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <vYellowLightCallbackFunction+0x84>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	801a      	strh	r2, [r3, #0]
		printf("Light status updated to red in yellow callback function");
 8003be8:	4813      	ldr	r0, [pc, #76]	; (8003c38 <vYellowLightCallbackFunction+0x88>)
 8003bea:	f000 fbcf 	bl	800438c <printf>

		if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <vYellowLightCallbackFunction+0x80>)
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	f7fc ff14 	bl	8000a24 <xQueueGenericSend>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d002      	beq.n	8003c08 <vYellowLightCallbackFunction+0x58>
		{
			printf("Giving semaphore failed in yellow callback task");
 8003c02:	480e      	ldr	r0, [pc, #56]	; (8003c3c <vYellowLightCallbackFunction+0x8c>)
 8003c04:	f000 fbc2 	bl	800438c <printf>
		}
	}

	xTimerStart(xRedLightTimer, 0);
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <vYellowLightCallbackFunction+0x90>)
 8003c0a:	681c      	ldr	r4, [r3, #0]
 8003c0c:	f7fd fd72 	bl	80016f4 <xTaskGetTickCount>
 8003c10:	4602      	mov	r2, r0
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7fe fad2 	bl	80021c4 <xTimerGenericCommand>
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}
 8003c28:	0800532c 	.word	0x0800532c
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	20001df8 	.word	0x20001df8
 8003c34:	20001dfc 	.word	0x20001dfc
 8003c38:	08005344 	.word	0x08005344
 8003c3c:	0800537c 	.word	0x0800537c
 8003c40:	20001ec8 	.word	0x20001ec8

08003c44 <vGreenLightCallbackFunction>:

void vGreenLightCallbackFunction( TimerHandle_t xTimer )
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
	// this function gets called when green light timer done --> switch to yellow light
	printf("Green light timer done");
 8003c4c:	481d      	ldr	r0, [pc, #116]	; (8003cc4 <vGreenLightCallbackFunction+0x80>)
 8003c4e:	f000 fb9d 	bl	800438c <printf>
	GPIO_ResetBits(GPIOC, GREEN_LIGHT);
 8003c52:	2104      	movs	r1, #4
 8003c54:	481c      	ldr	r0, [pc, #112]	; (8003cc8 <vGreenLightCallbackFunction+0x84>)
 8003c56:	f7ff f896 	bl	8002d86 <GPIO_ResetBits>
	GPIO_SetBits(GPIOC, YELLOW_LIGHT);
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	481a      	ldr	r0, [pc, #104]	; (8003cc8 <vGreenLightCallbackFunction+0x84>)
 8003c5e:	f7ff f883 	bl	8002d68 <GPIO_SetBits>

	// need to update value in lights mutex
	if (xSemaphoreTake( xSemaphore_lights, (TickType_t) 0))
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <vGreenLightCallbackFunction+0x88>)
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f7fd f868 	bl	8000d40 <xQueueGenericReceive>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <vGreenLightCallbackFunction+0x60>
	{
		GPIO_SetBits(GPIOC, YELLOW_LIGHT);
 8003c76:	2102      	movs	r1, #2
 8003c78:	4813      	ldr	r0, [pc, #76]	; (8003cc8 <vGreenLightCallbackFunction+0x84>)
 8003c7a:	f7ff f875 	bl	8002d68 <GPIO_SetBits>
		light_status = yellow;
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <vGreenLightCallbackFunction+0x8c>)
 8003c80:	2202      	movs	r2, #2
 8003c82:	801a      	strh	r2, [r3, #0]
		printf("Light status updated to yellow in green callback function");
 8003c84:	4813      	ldr	r0, [pc, #76]	; (8003cd4 <vGreenLightCallbackFunction+0x90>)
 8003c86:	f000 fb81 	bl	800438c <printf>

		if (xSemaphoreGive(xSemaphore_lights) != pdTRUE)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <vGreenLightCallbackFunction+0x88>)
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	f7fc fec6 	bl	8000a24 <xQueueGenericSend>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d002      	beq.n	8003ca4 <vGreenLightCallbackFunction+0x60>
		{
			printf("Giving semaphore failed in green callback task");
 8003c9e:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <vGreenLightCallbackFunction+0x94>)
 8003ca0:	f000 fb74 	bl	800438c <printf>
		}
	}

	xTimerStart(xYellowLightTimer, 0);
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <vGreenLightCallbackFunction+0x98>)
 8003ca6:	681c      	ldr	r4, [r3, #0]
 8003ca8:	f7fd fd24 	bl	80016f4 <xTaskGetTickCount>
 8003cac:	4602      	mov	r2, r0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7fe fa84 	bl	80021c4 <xTimerGenericCommand>
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}
 8003cc4:	080053ac 	.word	0x080053ac
 8003cc8:	40020800 	.word	0x40020800
 8003ccc:	20001df8 	.word	0x20001df8
 8003cd0:	20001dfc 	.word	0x20001dfc
 8003cd4:	080053c4 	.word	0x080053c4
 8003cd8:	08005400 	.word	0x08005400
 8003cdc:	20001ecc 	.word	0x20001ecc

08003ce0 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003ce4:	e7fe      	b.n	8003ce4 <vApplicationMallocFailedHook+0x4>

08003ce6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003cf0:	e7fe      	b.n	8003cf0 <vApplicationStackOverflowHook+0xa>

08003cf2 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003cf8:	f7fc fd94 	bl	8000824 <xPortGetFreeHeapSize>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003d00:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f7ff f976 	bl	8003000 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
	// Enable clock for GPIOC
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003d14:	2101      	movs	r1, #1
 8003d16:	2004      	movs	r0, #4
 8003d18:	f7ff f844 	bl	8002da4 <RCC_AHB1PeriphClockCmd>

	GPIO_REG_Init();
 8003d1c:	f7ff fa7a 	bl	8003214 <GPIO_REG_Init>
	GPIO_Pot_ADC_Init();
 8003d20:	f7ff fa94 	bl	800324c <GPIO_Pot_ADC_Init>
	GPIO_Traffic_Lights_Init();
 8003d24:	f7ff fac8 	bl	80032b8 <GPIO_Traffic_Lights_Init>
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d2e:	e003      	b.n	8003d38 <LoopCopyDataInit>

08003d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d36:	3104      	adds	r1, #4

08003d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d38:	480a      	ldr	r0, [pc, #40]	; (8003d64 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d40:	d3f6      	bcc.n	8003d30 <CopyDataInit>
  ldr  r2, =_sbss
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003d44:	e002      	b.n	8003d4c <LoopFillZerobss>

08003d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d48:	f842 3b04 	str.w	r3, [r2], #4

08003d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d50:	d3f9      	bcc.n	8003d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d52:	f000 f8f3 	bl	8003f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d56:	f000 fb63 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d5a:	f7ff f975 	bl	8003048 <main>
  bx  lr    
 8003d5e:	4770      	bx	lr
  ldr  r3, =_sidata
 8003d60:	080054b4 	.word	0x080054b4
  ldr  r0, =_sdata
 8003d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d68:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003d6c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003d70:	20001ee0 	.word	0x20001ee0

08003d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d74:	e7fe      	b.n	8003d74 <ADC_IRQHandler>

08003d76 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003d88:	e7fe      	b.n	8003d88 <HardFault_Handler+0x4>

08003d8a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <MemManage_Handler+0x4>

08003d90 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <BusFault_Handler+0x4>

08003d96 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <UsageFault_Handler+0x4>

08003d9c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <ITM_SendChar+0x58>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003dc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003dc8:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003dd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dd4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003dd8:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003de0:	bf00      	nop
 8003de2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0fa      	beq.n	8003de2 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003df6:	687b      	ldr	r3, [r7, #4]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000edf0 	.word	0xe000edf0

08003e08 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e009      	b.n	8003e32 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	60ba      	str	r2, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffc0 	bl	8003dac <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dbf1      	blt.n	8003e1e <_write+0x16>
 return len;
 8003e3a:	687b      	ldr	r3, [r7, #4]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <_sbrk+0x38>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <_sbrk+0x16>
		heap_end = & end;
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <_sbrk+0x38>)
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <_sbrk+0x3c>)
 8003e58:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <_sbrk+0x38>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <_sbrk+0x38>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <_sbrk+0x38>)
 8003e6a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20001e00 	.word	0x20001e00
 8003e80:	20001ee0 	.word	0x20001ee0

08003e84 <_close>:

int _close(int32_t file)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <_close+0x20>)
 8003e8e:	2258      	movs	r2, #88	; 0x58
 8003e90:	601a      	str	r2, [r3, #0]
	return -1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20001edc 	.word	0x20001edc

08003ea8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <_fstat+0x20>)
 8003eb4:	2258      	movs	r2, #88	; 0x58
 8003eb6:	601a      	str	r2, [r3, #0]
	return -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20001edc 	.word	0x20001edc

08003ecc <_isatty>:

int _isatty(int32_t file)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <_isatty+0x1c>)
 8003ed6:	2258      	movs	r2, #88	; 0x58
 8003ed8:	601a      	str	r2, [r3, #0]
	return 0;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20001edc 	.word	0x20001edc

08003eec <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <_lseek+0x24>)
 8003efa:	2258      	movs	r2, #88	; 0x58
 8003efc:	601a      	str	r2, [r3, #0]
	return -1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20001edc 	.word	0x20001edc

08003f14 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_read+0x24>)
 8003f22:	2258      	movs	r2, #88	; 0x58
 8003f24:	601a      	str	r2, [r3, #0]
	return -1;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20001edc 	.word	0x20001edc

08003f3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f40:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <SystemInit+0x60>)
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <SystemInit+0x60>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <SystemInit+0x64>)
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <SystemInit+0x64>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <SystemInit+0x64>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <SystemInit+0x64>)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <SystemInit+0x64>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <SystemInit+0x64>)
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <SystemInit+0x68>)
 8003f76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <SystemInit+0x64>)
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <SystemInit+0x64>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <SystemInit+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003f8a:	f000 f80d 	bl	8003fa8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <SystemInit+0x60>)
 8003f90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f94:	609a      	str	r2, [r3, #8]
#endif
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed00 	.word	0xe000ed00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	24003010 	.word	0x24003010

08003fa8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003fb6:	4a36      	ldr	r2, [pc, #216]	; (8004090 <SetSysClock+0xe8>)
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <SetSysClock+0xe8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003fc2:	4b33      	ldr	r3, [pc, #204]	; (8004090 <SetSysClock+0xe8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <SetSysClock+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fde:	d1f0      	bne.n	8003fc2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <SetSysClock+0xe8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003fec:	2301      	movs	r3, #1
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	e001      	b.n	8003ff6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d142      	bne.n	8004082 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003ffc:	4a24      	ldr	r2, [pc, #144]	; (8004090 <SetSysClock+0xe8>)
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <SetSysClock+0xe8>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <SetSysClock+0xec>)
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <SetSysClock+0xec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004012:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <SetSysClock+0xe8>)
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <SetSysClock+0xe8>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <SetSysClock+0xe8>)
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <SetSysClock+0xe8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <SetSysClock+0xe8>)
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <SetSysClock+0xe8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004032:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <SetSysClock+0xe8>)
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <SetSysClock+0xf0>)
 8004038:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <SetSysClock+0xe8>)
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <SetSysClock+0xe8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004046:	bf00      	nop
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <SetSysClock+0xe8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f9      	beq.n	8004048 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <SetSysClock+0xf4>)
 8004056:	f240 6205 	movw	r2, #1541	; 0x605
 800405a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <SetSysClock+0xe8>)
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <SetSysClock+0xe8>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004068:	4a09      	ldr	r2, [pc, #36]	; (8004090 <SetSysClock+0xe8>)
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <SetSysClock+0xe8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004074:	bf00      	nop
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <SetSysClock+0xe8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b08      	cmp	r3, #8
 8004080:	d1f9      	bne.n	8004076 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
 8004098:	07405408 	.word	0x07405408
 800409c:	40023c00 	.word	0x40023c00

080040a0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	int div = 1;
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80040b0:	e004      	b.n	80040bc <ts_itoa+0x1c>
		div *= base;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d2f3      	bcs.n	80040b2 <ts_itoa+0x12>

	while (div != 0)
 80040ca:	e029      	b.n	8004120 <ts_itoa+0x80>
	{
		int num = d/div;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	fbb3 f1f2 	udiv	r1, r3, r2
 80040de:	fb02 f201 	mul.w	r2, r2, r1
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b09      	cmp	r3, #9
 80040f4:	dd0a      	ble.n	800410c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6011      	str	r1, [r2, #0]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	3237      	adds	r2, #55	; 0x37
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e009      	b.n	8004120 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	3230      	adds	r2, #48	; 0x30
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d2      	bne.n	80040cc <ts_itoa+0x2c>
	}
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004142:	e07d      	b.n	8004240 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b25      	cmp	r3, #37	; 0x25
 800414a:	d171      	bne.n	8004230 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3301      	adds	r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d01e      	beq.n	8004198 <ts_formatstring+0x66>
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	dc06      	bgt.n	800416c <ts_formatstring+0x3a>
 800415e:	2b58      	cmp	r3, #88	; 0x58
 8004160:	d050      	beq.n	8004204 <ts_formatstring+0xd2>
 8004162:	2b63      	cmp	r3, #99	; 0x63
 8004164:	d00e      	beq.n	8004184 <ts_formatstring+0x52>
 8004166:	2b25      	cmp	r3, #37	; 0x25
 8004168:	d058      	beq.n	800421c <ts_formatstring+0xea>
 800416a:	e05d      	b.n	8004228 <ts_formatstring+0xf6>
 800416c:	2b73      	cmp	r3, #115	; 0x73
 800416e:	d02b      	beq.n	80041c8 <ts_formatstring+0x96>
 8004170:	2b73      	cmp	r3, #115	; 0x73
 8004172:	dc02      	bgt.n	800417a <ts_formatstring+0x48>
 8004174:	2b69      	cmp	r3, #105	; 0x69
 8004176:	d00f      	beq.n	8004198 <ts_formatstring+0x66>
 8004178:	e056      	b.n	8004228 <ts_formatstring+0xf6>
 800417a:	2b75      	cmp	r3, #117	; 0x75
 800417c:	d037      	beq.n	80041ee <ts_formatstring+0xbc>
 800417e:	2b78      	cmp	r3, #120	; 0x78
 8004180:	d040      	beq.n	8004204 <ts_formatstring+0xd2>
 8004182:	e051      	b.n	8004228 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	60fa      	str	r2, [r7, #12]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	1d11      	adds	r1, r2, #4
 800418e:	6079      	str	r1, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
				break;
 8004196:	e047      	b.n	8004228 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da07      	bge.n	80041b8 <ts_formatstring+0x86>
					{
						val *= -1;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	425b      	negs	r3, r3
 80041ac:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	222d      	movs	r2, #45	; 0x2d
 80041b6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	220a      	movs	r2, #10
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff6d 	bl	80040a0 <ts_itoa>
				}
				break;
 80041c6:	e02f      	b.n	8004228 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1d1a      	adds	r2, r3, #4
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80041d2:	e007      	b.n	80041e4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	60fa      	str	r2, [r7, #12]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	1c51      	adds	r1, r2, #1
 80041de:	61b9      	str	r1, [r7, #24]
 80041e0:	7812      	ldrb	r2, [r2, #0]
 80041e2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f3      	bne.n	80041d4 <ts_formatstring+0xa2>
					}
				}
				break;
 80041ec:	e01c      	b.n	8004228 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1d1a      	adds	r2, r3, #4
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	220a      	movs	r2, #10
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff4f 	bl	80040a0 <ts_itoa>
				break;
 8004202:	e011      	b.n	8004228 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f107 030c 	add.w	r3, r7, #12
 8004212:	2210      	movs	r2, #16
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff43 	bl	80040a0 <ts_itoa>
				break;
 800421a:	e005      	b.n	8004228 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	60fa      	str	r2, [r7, #12]
 8004222:	2225      	movs	r2, #37	; 0x25
 8004224:	701a      	strb	r2, [r3, #0]
				  break;
 8004226:	bf00      	nop
			}
			fmt++;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3301      	adds	r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	e007      	b.n	8004240 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60fa      	str	r2, [r7, #12]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	1c51      	adds	r1, r2, #1
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f af7d 	bne.w	8004144 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	int length = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800426e:	e081      	b.n	8004374 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b25      	cmp	r3, #37	; 0x25
 8004276:	d177      	bne.n	8004368 <ts_formatlength+0x108>
		{
			++fmt;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3301      	adds	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	3b58      	subs	r3, #88	; 0x58
 8004284:	2b20      	cmp	r3, #32
 8004286:	d86a      	bhi.n	800435e <ts_formatlength+0xfe>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <ts_formatlength+0x30>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	08004351 	.word	0x08004351
 8004294:	0800435f 	.word	0x0800435f
 8004298:	0800435f 	.word	0x0800435f
 800429c:	0800435f 	.word	0x0800435f
 80042a0:	0800435f 	.word	0x0800435f
 80042a4:	0800435f 	.word	0x0800435f
 80042a8:	0800435f 	.word	0x0800435f
 80042ac:	0800435f 	.word	0x0800435f
 80042b0:	0800435f 	.word	0x0800435f
 80042b4:	0800435f 	.word	0x0800435f
 80042b8:	0800435f 	.word	0x0800435f
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004323 	.word	0x08004323
 80042c4:	0800435f 	.word	0x0800435f
 80042c8:	0800435f 	.word	0x0800435f
 80042cc:	0800435f 	.word	0x0800435f
 80042d0:	0800435f 	.word	0x0800435f
 80042d4:	08004323 	.word	0x08004323
 80042d8:	0800435f 	.word	0x0800435f
 80042dc:	0800435f 	.word	0x0800435f
 80042e0:	0800435f 	.word	0x0800435f
 80042e4:	0800435f 	.word	0x0800435f
 80042e8:	0800435f 	.word	0x0800435f
 80042ec:	0800435f 	.word	0x0800435f
 80042f0:	0800435f 	.word	0x0800435f
 80042f4:	0800435f 	.word	0x0800435f
 80042f8:	0800435f 	.word	0x0800435f
 80042fc:	08004331 	.word	0x08004331
 8004300:	0800435f 	.word	0x0800435f
 8004304:	08004323 	.word	0x08004323
 8004308:	0800435f 	.word	0x0800435f
 800430c:	0800435f 	.word	0x0800435f
 8004310:	08004351 	.word	0x08004351
			{
			  case 'c':
		  		  va_arg(va, int);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3304      	adds	r3, #4
 8004318:	603b      	str	r3, [r7, #0]
				  ++length;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
				  break;
 8004320:	e025      	b.n	800436e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	330b      	adds	r3, #11
 8004326:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3304      	adds	r3, #4
 800432c:	603b      	str	r3, [r7, #0]
				  break;
 800432e:	e01e      	b.n	800436e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	603a      	str	r2, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800433a:	e002      	b.n	8004342 <ts_formatlength+0xe2>
			  			  ++length;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	60ba      	str	r2, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f6      	bne.n	800433c <ts_formatlength+0xdc>
			  	  }
				  break;
 800434e:	e00e      	b.n	800436e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3308      	adds	r3, #8
 8004354:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	603b      	str	r3, [r7, #0]
				  break;
 800435c:	e007      	b.n	800436e <ts_formatlength+0x10e>
			  default:
				  ++length;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
				  break;
 8004364:	bf00      	nop
 8004366:	e002      	b.n	800436e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3301      	adds	r3, #1
 8004372:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af79 	bne.w	8004270 <ts_formatlength+0x10>
	}
	return length;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 800438c:	b40f      	push	{r0, r1, r2, r3}
 800438e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
	int length = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800439a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800439e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a4:	f7ff ff5c 	bl	8004260 <ts_formatlength>
 80043a8:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80043aa:	466b      	mov	r3, sp
 80043ac:	461e      	mov	r6, r3
		char buf[length];
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	1e4b      	subs	r3, r1, #1
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	460b      	mov	r3, r1
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80043c0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80043c4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80043c8:	460b      	mov	r3, r1
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	00dd      	lsls	r5, r3, #3
 80043d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043d6:	00d4      	lsls	r4, r2, #3
 80043d8:	460b      	mov	r3, r1
 80043da:	3307      	adds	r3, #7
 80043dc:	08db      	lsrs	r3, r3, #3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	ebad 0d03 	sub.w	sp, sp, r3
 80043e4:	466b      	mov	r3, sp
 80043e6:	3300      	adds	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80043ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ee:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fe9b 	bl	8004132 <ts_formatstring>
 80043fc:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4619      	mov	r1, r3
 8004404:	2001      	movs	r0, #1
 8004406:	f7ff fcff 	bl	8003e08 <_write>
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800441a:	b004      	add	sp, #16
 800441c:	4770      	bx	lr
	...

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4e0d      	ldr	r6, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1ba4      	subs	r4, r4, r6
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2500      	movs	r5, #0
 800442c:	42a5      	cmp	r5, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4e0b      	ldr	r6, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f001 f82e 	bl	8005494 <_init>
 8004438:	1ba4      	subs	r4, r4, r6
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2500      	movs	r5, #0
 800443e:	42a5      	cmp	r5, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004448:	4798      	blx	r3
 800444a:	3501      	adds	r5, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004452:	4798      	blx	r3
 8004454:	3501      	adds	r5, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	080054ac 	.word	0x080054ac
 800445c:	080054ac 	.word	0x080054ac
 8004460:	080054ac 	.word	0x080054ac
 8004464:	080054b0 	.word	0x080054b0

08004468 <memcpy>:
 8004468:	b510      	push	{r4, lr}
 800446a:	1e43      	subs	r3, r0, #1
 800446c:	440a      	add	r2, r1
 800446e:	4291      	cmp	r1, r2
 8004470:	d100      	bne.n	8004474 <memcpy+0xc>
 8004472:	bd10      	pop	{r4, pc}
 8004474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447c:	e7f7      	b.n	800446e <memcpy+0x6>

0800447e <memset>:
 800447e:	4402      	add	r2, r0
 8004480:	4603      	mov	r3, r0
 8004482:	4293      	cmp	r3, r2
 8004484:	d100      	bne.n	8004488 <memset+0xa>
 8004486:	4770      	bx	lr
 8004488:	f803 1b01 	strb.w	r1, [r3], #1
 800448c:	e7f9      	b.n	8004482 <memset+0x4>
	...

08004490 <_puts_r>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	460e      	mov	r6, r1
 8004494:	4605      	mov	r5, r0
 8004496:	b118      	cbz	r0, 80044a0 <_puts_r+0x10>
 8004498:	6983      	ldr	r3, [r0, #24]
 800449a:	b90b      	cbnz	r3, 80044a0 <_puts_r+0x10>
 800449c:	f000 fa48 	bl	8004930 <__sinit>
 80044a0:	69ab      	ldr	r3, [r5, #24]
 80044a2:	68ac      	ldr	r4, [r5, #8]
 80044a4:	b913      	cbnz	r3, 80044ac <_puts_r+0x1c>
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 fa42 	bl	8004930 <__sinit>
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <_puts_r+0xac>)
 80044ae:	429c      	cmp	r4, r3
 80044b0:	d117      	bne.n	80044e2 <_puts_r+0x52>
 80044b2:	686c      	ldr	r4, [r5, #4]
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	071b      	lsls	r3, r3, #28
 80044b8:	d51d      	bpl.n	80044f6 <_puts_r+0x66>
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	b1db      	cbz	r3, 80044f6 <_puts_r+0x66>
 80044be:	3e01      	subs	r6, #1
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044c6:	3b01      	subs	r3, #1
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	b9e9      	cbnz	r1, 8004508 <_puts_r+0x78>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da2e      	bge.n	800452e <_puts_r+0x9e>
 80044d0:	4622      	mov	r2, r4
 80044d2:	210a      	movs	r1, #10
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f879 	bl	80045cc <__swbuf_r>
 80044da:	3001      	adds	r0, #1
 80044dc:	d011      	beq.n	8004502 <_puts_r+0x72>
 80044de:	200a      	movs	r0, #10
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <_puts_r+0xb0>)
 80044e4:	429c      	cmp	r4, r3
 80044e6:	d101      	bne.n	80044ec <_puts_r+0x5c>
 80044e8:	68ac      	ldr	r4, [r5, #8]
 80044ea:	e7e3      	b.n	80044b4 <_puts_r+0x24>
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <_puts_r+0xb4>)
 80044ee:	429c      	cmp	r4, r3
 80044f0:	bf08      	it	eq
 80044f2:	68ec      	ldreq	r4, [r5, #12]
 80044f4:	e7de      	b.n	80044b4 <_puts_r+0x24>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 f8b9 	bl	8004670 <__swsetup_r>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d0dd      	beq.n	80044be <_puts_r+0x2e>
 8004502:	f04f 30ff 	mov.w	r0, #4294967295
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	2b00      	cmp	r3, #0
 800450a:	da04      	bge.n	8004516 <_puts_r+0x86>
 800450c:	69a2      	ldr	r2, [r4, #24]
 800450e:	4293      	cmp	r3, r2
 8004510:	db06      	blt.n	8004520 <_puts_r+0x90>
 8004512:	290a      	cmp	r1, #10
 8004514:	d004      	beq.n	8004520 <_puts_r+0x90>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	6022      	str	r2, [r4, #0]
 800451c:	7019      	strb	r1, [r3, #0]
 800451e:	e7cf      	b.n	80044c0 <_puts_r+0x30>
 8004520:	4622      	mov	r2, r4
 8004522:	4628      	mov	r0, r5
 8004524:	f000 f852 	bl	80045cc <__swbuf_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d1c9      	bne.n	80044c0 <_puts_r+0x30>
 800452c:	e7e9      	b.n	8004502 <_puts_r+0x72>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	200a      	movs	r0, #10
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	7018      	strb	r0, [r3, #0]
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	bf00      	nop
 800453c:	08005450 	.word	0x08005450
 8004540:	08005470 	.word	0x08005470
 8004544:	08005430 	.word	0x08005430

08004548 <puts>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <puts+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7ff bf9f 	b.w	8004490 <_puts_r>
 8004552:	bf00      	nop
 8004554:	20000018 	.word	0x20000018

08004558 <rand>:
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <rand+0x68>)
 800455a:	b510      	push	{r4, lr}
 800455c:	681c      	ldr	r4, [r3, #0]
 800455e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004560:	b9d3      	cbnz	r3, 8004598 <rand+0x40>
 8004562:	2018      	movs	r0, #24
 8004564:	f000 fad2 	bl	8004b0c <malloc>
 8004568:	f243 330e 	movw	r3, #13070	; 0x330e
 800456c:	63a0      	str	r0, [r4, #56]	; 0x38
 800456e:	8003      	strh	r3, [r0, #0]
 8004570:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004574:	8043      	strh	r3, [r0, #2]
 8004576:	f241 2334 	movw	r3, #4660	; 0x1234
 800457a:	8083      	strh	r3, [r0, #4]
 800457c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004580:	80c3      	strh	r3, [r0, #6]
 8004582:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004586:	8103      	strh	r3, [r0, #8]
 8004588:	2305      	movs	r3, #5
 800458a:	8143      	strh	r3, [r0, #10]
 800458c:	230b      	movs	r3, #11
 800458e:	8183      	strh	r3, [r0, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	2300      	movs	r3, #0
 8004594:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004598:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800459a:	480a      	ldr	r0, [pc, #40]	; (80045c4 <rand+0x6c>)
 800459c:	690a      	ldr	r2, [r1, #16]
 800459e:	694b      	ldr	r3, [r1, #20]
 80045a0:	4c09      	ldr	r4, [pc, #36]	; (80045c8 <rand+0x70>)
 80045a2:	4350      	muls	r0, r2
 80045a4:	fb04 0003 	mla	r0, r4, r3, r0
 80045a8:	fba2 2304 	umull	r2, r3, r2, r4
 80045ac:	3201      	adds	r2, #1
 80045ae:	4403      	add	r3, r0
 80045b0:	f143 0300 	adc.w	r3, r3, #0
 80045b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80045b8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	20000018 	.word	0x20000018
 80045c4:	5851f42d 	.word	0x5851f42d
 80045c8:	4c957f2d 	.word	0x4c957f2d

080045cc <__swbuf_r>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	460e      	mov	r6, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	4605      	mov	r5, r0
 80045d4:	b118      	cbz	r0, 80045de <__swbuf_r+0x12>
 80045d6:	6983      	ldr	r3, [r0, #24]
 80045d8:	b90b      	cbnz	r3, 80045de <__swbuf_r+0x12>
 80045da:	f000 f9a9 	bl	8004930 <__sinit>
 80045de:	4b21      	ldr	r3, [pc, #132]	; (8004664 <__swbuf_r+0x98>)
 80045e0:	429c      	cmp	r4, r3
 80045e2:	d12a      	bne.n	800463a <__swbuf_r+0x6e>
 80045e4:	686c      	ldr	r4, [r5, #4]
 80045e6:	69a3      	ldr	r3, [r4, #24]
 80045e8:	60a3      	str	r3, [r4, #8]
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	071a      	lsls	r2, r3, #28
 80045ee:	d52e      	bpl.n	800464e <__swbuf_r+0x82>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	b363      	cbz	r3, 800464e <__swbuf_r+0x82>
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	1ac0      	subs	r0, r0, r3
 80045fa:	6963      	ldr	r3, [r4, #20]
 80045fc:	b2f6      	uxtb	r6, r6
 80045fe:	4298      	cmp	r0, r3
 8004600:	4637      	mov	r7, r6
 8004602:	db04      	blt.n	800460e <__swbuf_r+0x42>
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f928 	bl	800485c <_fflush_r>
 800460c:	bb28      	cbnz	r0, 800465a <__swbuf_r+0x8e>
 800460e:	68a3      	ldr	r3, [r4, #8]
 8004610:	3b01      	subs	r3, #1
 8004612:	60a3      	str	r3, [r4, #8]
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	6022      	str	r2, [r4, #0]
 800461a:	701e      	strb	r6, [r3, #0]
 800461c:	6963      	ldr	r3, [r4, #20]
 800461e:	3001      	adds	r0, #1
 8004620:	4298      	cmp	r0, r3
 8004622:	d004      	beq.n	800462e <__swbuf_r+0x62>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	07db      	lsls	r3, r3, #31
 8004628:	d519      	bpl.n	800465e <__swbuf_r+0x92>
 800462a:	2e0a      	cmp	r6, #10
 800462c:	d117      	bne.n	800465e <__swbuf_r+0x92>
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 f913 	bl	800485c <_fflush_r>
 8004636:	b190      	cbz	r0, 800465e <__swbuf_r+0x92>
 8004638:	e00f      	b.n	800465a <__swbuf_r+0x8e>
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <__swbuf_r+0x9c>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d101      	bne.n	8004644 <__swbuf_r+0x78>
 8004640:	68ac      	ldr	r4, [r5, #8]
 8004642:	e7d0      	b.n	80045e6 <__swbuf_r+0x1a>
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <__swbuf_r+0xa0>)
 8004646:	429c      	cmp	r4, r3
 8004648:	bf08      	it	eq
 800464a:	68ec      	ldreq	r4, [r5, #12]
 800464c:	e7cb      	b.n	80045e6 <__swbuf_r+0x1a>
 800464e:	4621      	mov	r1, r4
 8004650:	4628      	mov	r0, r5
 8004652:	f000 f80d 	bl	8004670 <__swsetup_r>
 8004656:	2800      	cmp	r0, #0
 8004658:	d0cc      	beq.n	80045f4 <__swbuf_r+0x28>
 800465a:	f04f 37ff 	mov.w	r7, #4294967295
 800465e:	4638      	mov	r0, r7
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004662:	bf00      	nop
 8004664:	08005450 	.word	0x08005450
 8004668:	08005470 	.word	0x08005470
 800466c:	08005430 	.word	0x08005430

08004670 <__swsetup_r>:
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <__swsetup_r+0xcc>)
 8004672:	b570      	push	{r4, r5, r6, lr}
 8004674:	681d      	ldr	r5, [r3, #0]
 8004676:	4606      	mov	r6, r0
 8004678:	460c      	mov	r4, r1
 800467a:	b125      	cbz	r5, 8004686 <__swsetup_r+0x16>
 800467c:	69ab      	ldr	r3, [r5, #24]
 800467e:	b913      	cbnz	r3, 8004686 <__swsetup_r+0x16>
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f955 	bl	8004930 <__sinit>
 8004686:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <__swsetup_r+0xd0>)
 8004688:	429c      	cmp	r4, r3
 800468a:	d10f      	bne.n	80046ac <__swsetup_r+0x3c>
 800468c:	686c      	ldr	r4, [r5, #4]
 800468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004692:	b29a      	uxth	r2, r3
 8004694:	0715      	lsls	r5, r2, #28
 8004696:	d42c      	bmi.n	80046f2 <__swsetup_r+0x82>
 8004698:	06d0      	lsls	r0, r2, #27
 800469a:	d411      	bmi.n	80046c0 <__swsetup_r+0x50>
 800469c:	2209      	movs	r2, #9
 800469e:	6032      	str	r2, [r6, #0]
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <__swsetup_r+0xd4>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d101      	bne.n	80046b6 <__swsetup_r+0x46>
 80046b2:	68ac      	ldr	r4, [r5, #8]
 80046b4:	e7eb      	b.n	800468e <__swsetup_r+0x1e>
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <__swsetup_r+0xd8>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	bf08      	it	eq
 80046bc:	68ec      	ldreq	r4, [r5, #12]
 80046be:	e7e6      	b.n	800468e <__swsetup_r+0x1e>
 80046c0:	0751      	lsls	r1, r2, #29
 80046c2:	d512      	bpl.n	80046ea <__swsetup_r+0x7a>
 80046c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046c6:	b141      	cbz	r1, 80046da <__swsetup_r+0x6a>
 80046c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046cc:	4299      	cmp	r1, r3
 80046ce:	d002      	beq.n	80046d6 <__swsetup_r+0x66>
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 fa23 	bl	8004b1c <_free_r>
 80046d6:	2300      	movs	r3, #0
 80046d8:	6363      	str	r3, [r4, #52]	; 0x34
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	2300      	movs	r3, #0
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f043 0308 	orr.w	r3, r3, #8
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	b94b      	cbnz	r3, 800470a <__swsetup_r+0x9a>
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004700:	d003      	beq.n	800470a <__swsetup_r+0x9a>
 8004702:	4621      	mov	r1, r4
 8004704:	4630      	mov	r0, r6
 8004706:	f000 f9c1 	bl	8004a8c <__smakebuf_r>
 800470a:	89a2      	ldrh	r2, [r4, #12]
 800470c:	f012 0301 	ands.w	r3, r2, #1
 8004710:	d00c      	beq.n	800472c <__swsetup_r+0xbc>
 8004712:	2300      	movs	r3, #0
 8004714:	60a3      	str	r3, [r4, #8]
 8004716:	6963      	ldr	r3, [r4, #20]
 8004718:	425b      	negs	r3, r3
 800471a:	61a3      	str	r3, [r4, #24]
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b953      	cbnz	r3, 8004736 <__swsetup_r+0xc6>
 8004720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004724:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004728:	d1ba      	bne.n	80046a0 <__swsetup_r+0x30>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	0792      	lsls	r2, r2, #30
 800472e:	bf58      	it	pl
 8004730:	6963      	ldrpl	r3, [r4, #20]
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	e7f2      	b.n	800471c <__swsetup_r+0xac>
 8004736:	2000      	movs	r0, #0
 8004738:	e7f7      	b.n	800472a <__swsetup_r+0xba>
 800473a:	bf00      	nop
 800473c:	20000018 	.word	0x20000018
 8004740:	08005450 	.word	0x08005450
 8004744:	08005470 	.word	0x08005470
 8004748:	08005430 	.word	0x08005430

0800474c <__sflush_r>:
 800474c:	898a      	ldrh	r2, [r1, #12]
 800474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	0710      	lsls	r0, r2, #28
 8004756:	460c      	mov	r4, r1
 8004758:	d45a      	bmi.n	8004810 <__sflush_r+0xc4>
 800475a:	684b      	ldr	r3, [r1, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc05      	bgt.n	800476c <__sflush_r+0x20>
 8004760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	dc02      	bgt.n	800476c <__sflush_r+0x20>
 8004766:	2000      	movs	r0, #0
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476e:	2e00      	cmp	r6, #0
 8004770:	d0f9      	beq.n	8004766 <__sflush_r+0x1a>
 8004772:	2300      	movs	r3, #0
 8004774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004778:	682f      	ldr	r7, [r5, #0]
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	d033      	beq.n	80047e6 <__sflush_r+0x9a>
 800477e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	075a      	lsls	r2, r3, #29
 8004784:	d505      	bpl.n	8004792 <__sflush_r+0x46>
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	1ac0      	subs	r0, r0, r3
 800478a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800478c:	b10b      	cbz	r3, 8004792 <__sflush_r+0x46>
 800478e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004790:	1ac0      	subs	r0, r0, r3
 8004792:	2300      	movs	r3, #0
 8004794:	4602      	mov	r2, r0
 8004796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004798:	6a21      	ldr	r1, [r4, #32]
 800479a:	4628      	mov	r0, r5
 800479c:	47b0      	blx	r6
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	d106      	bne.n	80047b2 <__sflush_r+0x66>
 80047a4:	6829      	ldr	r1, [r5, #0]
 80047a6:	291d      	cmp	r1, #29
 80047a8:	d84b      	bhi.n	8004842 <__sflush_r+0xf6>
 80047aa:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <__sflush_r+0x10c>)
 80047ac:	40ca      	lsrs	r2, r1
 80047ae:	07d6      	lsls	r6, r2, #31
 80047b0:	d547      	bpl.n	8004842 <__sflush_r+0xf6>
 80047b2:	2200      	movs	r2, #0
 80047b4:	6062      	str	r2, [r4, #4]
 80047b6:	04d9      	lsls	r1, r3, #19
 80047b8:	6922      	ldr	r2, [r4, #16]
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	d504      	bpl.n	80047c8 <__sflush_r+0x7c>
 80047be:	1c42      	adds	r2, r0, #1
 80047c0:	d101      	bne.n	80047c6 <__sflush_r+0x7a>
 80047c2:	682b      	ldr	r3, [r5, #0]
 80047c4:	b903      	cbnz	r3, 80047c8 <__sflush_r+0x7c>
 80047c6:	6560      	str	r0, [r4, #84]	; 0x54
 80047c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ca:	602f      	str	r7, [r5, #0]
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d0ca      	beq.n	8004766 <__sflush_r+0x1a>
 80047d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <__sflush_r+0x92>
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f99f 	bl	8004b1c <_free_r>
 80047de:	2000      	movs	r0, #0
 80047e0:	6360      	str	r0, [r4, #52]	; 0x34
 80047e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e6:	6a21      	ldr	r1, [r4, #32]
 80047e8:	2301      	movs	r3, #1
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b0      	blx	r6
 80047ee:	1c41      	adds	r1, r0, #1
 80047f0:	d1c6      	bne.n	8004780 <__sflush_r+0x34>
 80047f2:	682b      	ldr	r3, [r5, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0c3      	beq.n	8004780 <__sflush_r+0x34>
 80047f8:	2b1d      	cmp	r3, #29
 80047fa:	d001      	beq.n	8004800 <__sflush_r+0xb4>
 80047fc:	2b16      	cmp	r3, #22
 80047fe:	d101      	bne.n	8004804 <__sflush_r+0xb8>
 8004800:	602f      	str	r7, [r5, #0]
 8004802:	e7b0      	b.n	8004766 <__sflush_r+0x1a>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004810:	690f      	ldr	r7, [r1, #16]
 8004812:	2f00      	cmp	r7, #0
 8004814:	d0a7      	beq.n	8004766 <__sflush_r+0x1a>
 8004816:	0793      	lsls	r3, r2, #30
 8004818:	680e      	ldr	r6, [r1, #0]
 800481a:	bf08      	it	eq
 800481c:	694b      	ldreq	r3, [r1, #20]
 800481e:	600f      	str	r7, [r1, #0]
 8004820:	bf18      	it	ne
 8004822:	2300      	movne	r3, #0
 8004824:	eba6 0807 	sub.w	r8, r6, r7
 8004828:	608b      	str	r3, [r1, #8]
 800482a:	f1b8 0f00 	cmp.w	r8, #0
 800482e:	dd9a      	ble.n	8004766 <__sflush_r+0x1a>
 8004830:	4643      	mov	r3, r8
 8004832:	463a      	mov	r2, r7
 8004834:	6a21      	ldr	r1, [r4, #32]
 8004836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004838:	4628      	mov	r0, r5
 800483a:	47b0      	blx	r6
 800483c:	2800      	cmp	r0, #0
 800483e:	dc07      	bgt.n	8004850 <__sflush_r+0x104>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	4407      	add	r7, r0
 8004852:	eba8 0800 	sub.w	r8, r8, r0
 8004856:	e7e8      	b.n	800482a <__sflush_r+0xde>
 8004858:	20400001 	.word	0x20400001

0800485c <_fflush_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	690b      	ldr	r3, [r1, #16]
 8004860:	4605      	mov	r5, r0
 8004862:	460c      	mov	r4, r1
 8004864:	b1db      	cbz	r3, 800489e <_fflush_r+0x42>
 8004866:	b118      	cbz	r0, 8004870 <_fflush_r+0x14>
 8004868:	6983      	ldr	r3, [r0, #24]
 800486a:	b90b      	cbnz	r3, 8004870 <_fflush_r+0x14>
 800486c:	f000 f860 	bl	8004930 <__sinit>
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <_fflush_r+0x48>)
 8004872:	429c      	cmp	r4, r3
 8004874:	d109      	bne.n	800488a <_fflush_r+0x2e>
 8004876:	686c      	ldr	r4, [r5, #4]
 8004878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487c:	b17b      	cbz	r3, 800489e <_fflush_r+0x42>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004886:	f7ff bf61 	b.w	800474c <__sflush_r>
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <_fflush_r+0x4c>)
 800488c:	429c      	cmp	r4, r3
 800488e:	d101      	bne.n	8004894 <_fflush_r+0x38>
 8004890:	68ac      	ldr	r4, [r5, #8]
 8004892:	e7f1      	b.n	8004878 <_fflush_r+0x1c>
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <_fflush_r+0x50>)
 8004896:	429c      	cmp	r4, r3
 8004898:	bf08      	it	eq
 800489a:	68ec      	ldreq	r4, [r5, #12]
 800489c:	e7ec      	b.n	8004878 <_fflush_r+0x1c>
 800489e:	2000      	movs	r0, #0
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
 80048a2:	bf00      	nop
 80048a4:	08005450 	.word	0x08005450
 80048a8:	08005470 	.word	0x08005470
 80048ac:	08005430 	.word	0x08005430

080048b0 <_cleanup_r>:
 80048b0:	4901      	ldr	r1, [pc, #4]	; (80048b8 <_cleanup_r+0x8>)
 80048b2:	f000 b8a9 	b.w	8004a08 <_fwalk_reent>
 80048b6:	bf00      	nop
 80048b8:	0800485d 	.word	0x0800485d

080048bc <std.isra.0>:
 80048bc:	2300      	movs	r3, #0
 80048be:	b510      	push	{r4, lr}
 80048c0:	4604      	mov	r4, r0
 80048c2:	6003      	str	r3, [r0, #0]
 80048c4:	6043      	str	r3, [r0, #4]
 80048c6:	6083      	str	r3, [r0, #8]
 80048c8:	8181      	strh	r1, [r0, #12]
 80048ca:	6643      	str	r3, [r0, #100]	; 0x64
 80048cc:	81c2      	strh	r2, [r0, #14]
 80048ce:	6103      	str	r3, [r0, #16]
 80048d0:	6143      	str	r3, [r0, #20]
 80048d2:	6183      	str	r3, [r0, #24]
 80048d4:	4619      	mov	r1, r3
 80048d6:	2208      	movs	r2, #8
 80048d8:	305c      	adds	r0, #92	; 0x5c
 80048da:	f7ff fdd0 	bl	800447e <memset>
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <std.isra.0+0x38>)
 80048e0:	6263      	str	r3, [r4, #36]	; 0x24
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <std.isra.0+0x3c>)
 80048e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <std.isra.0+0x40>)
 80048e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <std.isra.0+0x44>)
 80048ec:	6224      	str	r4, [r4, #32]
 80048ee:	6323      	str	r3, [r4, #48]	; 0x30
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop
 80048f4:	08004c95 	.word	0x08004c95
 80048f8:	08004cb7 	.word	0x08004cb7
 80048fc:	08004cef 	.word	0x08004cef
 8004900:	08004d13 	.word	0x08004d13

08004904 <__sfmoreglue>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	1e4a      	subs	r2, r1, #1
 8004908:	2568      	movs	r5, #104	; 0x68
 800490a:	4355      	muls	r5, r2
 800490c:	460e      	mov	r6, r1
 800490e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004912:	f000 f951 	bl	8004bb8 <_malloc_r>
 8004916:	4604      	mov	r4, r0
 8004918:	b140      	cbz	r0, 800492c <__sfmoreglue+0x28>
 800491a:	2100      	movs	r1, #0
 800491c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004920:	300c      	adds	r0, #12
 8004922:	60a0      	str	r0, [r4, #8]
 8004924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004928:	f7ff fda9 	bl	800447e <memset>
 800492c:	4620      	mov	r0, r4
 800492e:	bd70      	pop	{r4, r5, r6, pc}

08004930 <__sinit>:
 8004930:	6983      	ldr	r3, [r0, #24]
 8004932:	b510      	push	{r4, lr}
 8004934:	4604      	mov	r4, r0
 8004936:	bb33      	cbnz	r3, 8004986 <__sinit+0x56>
 8004938:	6483      	str	r3, [r0, #72]	; 0x48
 800493a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800493c:	6503      	str	r3, [r0, #80]	; 0x50
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <__sinit+0x58>)
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <__sinit+0x5c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6282      	str	r2, [r0, #40]	; 0x28
 8004946:	4298      	cmp	r0, r3
 8004948:	bf04      	itt	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	6183      	streq	r3, [r0, #24]
 800494e:	f000 f81f 	bl	8004990 <__sfp>
 8004952:	6060      	str	r0, [r4, #4]
 8004954:	4620      	mov	r0, r4
 8004956:	f000 f81b 	bl	8004990 <__sfp>
 800495a:	60a0      	str	r0, [r4, #8]
 800495c:	4620      	mov	r0, r4
 800495e:	f000 f817 	bl	8004990 <__sfp>
 8004962:	2200      	movs	r2, #0
 8004964:	60e0      	str	r0, [r4, #12]
 8004966:	2104      	movs	r1, #4
 8004968:	6860      	ldr	r0, [r4, #4]
 800496a:	f7ff ffa7 	bl	80048bc <std.isra.0>
 800496e:	2201      	movs	r2, #1
 8004970:	2109      	movs	r1, #9
 8004972:	68a0      	ldr	r0, [r4, #8]
 8004974:	f7ff ffa2 	bl	80048bc <std.isra.0>
 8004978:	2202      	movs	r2, #2
 800497a:	2112      	movs	r1, #18
 800497c:	68e0      	ldr	r0, [r4, #12]
 800497e:	f7ff ff9d 	bl	80048bc <std.isra.0>
 8004982:	2301      	movs	r3, #1
 8004984:	61a3      	str	r3, [r4, #24]
 8004986:	bd10      	pop	{r4, pc}
 8004988:	08005490 	.word	0x08005490
 800498c:	080048b1 	.word	0x080048b1

08004990 <__sfp>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <__sfp+0x74>)
 8004994:	681e      	ldr	r6, [r3, #0]
 8004996:	69b3      	ldr	r3, [r6, #24]
 8004998:	4607      	mov	r7, r0
 800499a:	b913      	cbnz	r3, 80049a2 <__sfp+0x12>
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff ffc7 	bl	8004930 <__sinit>
 80049a2:	3648      	adds	r6, #72	; 0x48
 80049a4:	68b4      	ldr	r4, [r6, #8]
 80049a6:	6873      	ldr	r3, [r6, #4]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	d503      	bpl.n	80049b4 <__sfp+0x24>
 80049ac:	6833      	ldr	r3, [r6, #0]
 80049ae:	b133      	cbz	r3, 80049be <__sfp+0x2e>
 80049b0:	6836      	ldr	r6, [r6, #0]
 80049b2:	e7f7      	b.n	80049a4 <__sfp+0x14>
 80049b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049b8:	b16d      	cbz	r5, 80049d6 <__sfp+0x46>
 80049ba:	3468      	adds	r4, #104	; 0x68
 80049bc:	e7f4      	b.n	80049a8 <__sfp+0x18>
 80049be:	2104      	movs	r1, #4
 80049c0:	4638      	mov	r0, r7
 80049c2:	f7ff ff9f 	bl	8004904 <__sfmoreglue>
 80049c6:	6030      	str	r0, [r6, #0]
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1f1      	bne.n	80049b0 <__sfp+0x20>
 80049cc:	230c      	movs	r3, #12
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4604      	mov	r4, r0
 80049d2:	4620      	mov	r0, r4
 80049d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049da:	81e3      	strh	r3, [r4, #14]
 80049dc:	2301      	movs	r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	6665      	str	r5, [r4, #100]	; 0x64
 80049e2:	6025      	str	r5, [r4, #0]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	6065      	str	r5, [r4, #4]
 80049e8:	6125      	str	r5, [r4, #16]
 80049ea:	6165      	str	r5, [r4, #20]
 80049ec:	61a5      	str	r5, [r4, #24]
 80049ee:	2208      	movs	r2, #8
 80049f0:	4629      	mov	r1, r5
 80049f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049f6:	f7ff fd42 	bl	800447e <memset>
 80049fa:	6365      	str	r5, [r4, #52]	; 0x34
 80049fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80049fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a02:	e7e6      	b.n	80049d2 <__sfp+0x42>
 8004a04:	08005490 	.word	0x08005490

08004a08 <_fwalk_reent>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	4689      	mov	r9, r1
 8004a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a14:	2600      	movs	r6, #0
 8004a16:	b914      	cbnz	r4, 8004a1e <_fwalk_reent+0x16>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	68a5      	ldr	r5, [r4, #8]
 8004a20:	6867      	ldr	r7, [r4, #4]
 8004a22:	3f01      	subs	r7, #1
 8004a24:	d501      	bpl.n	8004a2a <_fwalk_reent+0x22>
 8004a26:	6824      	ldr	r4, [r4, #0]
 8004a28:	e7f5      	b.n	8004a16 <_fwalk_reent+0xe>
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <_fwalk_reent+0x38>
 8004a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d003      	beq.n	8004a40 <_fwalk_reent+0x38>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	47c8      	blx	r9
 8004a3e:	4306      	orrs	r6, r0
 8004a40:	3568      	adds	r5, #104	; 0x68
 8004a42:	e7ee      	b.n	8004a22 <_fwalk_reent+0x1a>

08004a44 <__swhatbuf_r>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	460e      	mov	r6, r1
 8004a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	b090      	sub	sp, #64	; 0x40
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	da07      	bge.n	8004a66 <__swhatbuf_r+0x22>
 8004a56:	2300      	movs	r3, #0
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	89b3      	ldrh	r3, [r6, #12]
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	d410      	bmi.n	8004a82 <__swhatbuf_r+0x3e>
 8004a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a64:	e00e      	b.n	8004a84 <__swhatbuf_r+0x40>
 8004a66:	aa01      	add	r2, sp, #4
 8004a68:	f000 f97a 	bl	8004d60 <_fstat_r>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	dbf2      	blt.n	8004a56 <__swhatbuf_r+0x12>
 8004a70:	9a02      	ldr	r2, [sp, #8]
 8004a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a7a:	425a      	negs	r2, r3
 8004a7c:	415a      	adcs	r2, r3
 8004a7e:	602a      	str	r2, [r5, #0]
 8004a80:	e7ee      	b.n	8004a60 <__swhatbuf_r+0x1c>
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	2000      	movs	r0, #0
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	b010      	add	sp, #64	; 0x40
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}

08004a8c <__smakebuf_r>:
 8004a8c:	898b      	ldrh	r3, [r1, #12]
 8004a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a90:	079d      	lsls	r5, r3, #30
 8004a92:	4606      	mov	r6, r0
 8004a94:	460c      	mov	r4, r1
 8004a96:	d507      	bpl.n	8004aa8 <__smakebuf_r+0x1c>
 8004a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6163      	str	r3, [r4, #20]
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	ab01      	add	r3, sp, #4
 8004aaa:	466a      	mov	r2, sp
 8004aac:	f7ff ffca 	bl	8004a44 <__swhatbuf_r>
 8004ab0:	9900      	ldr	r1, [sp, #0]
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f87f 	bl	8004bb8 <_malloc_r>
 8004aba:	b948      	cbnz	r0, 8004ad0 <__smakebuf_r+0x44>
 8004abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac0:	059a      	lsls	r2, r3, #22
 8004ac2:	d4ef      	bmi.n	8004aa4 <__smakebuf_r+0x18>
 8004ac4:	f023 0303 	bic.w	r3, r3, #3
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e7e3      	b.n	8004a98 <__smakebuf_r+0xc>
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <__smakebuf_r+0x7c>)
 8004ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	6020      	str	r0, [r4, #0]
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	9b00      	ldr	r3, [sp, #0]
 8004ae0:	6163      	str	r3, [r4, #20]
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	6120      	str	r0, [r4, #16]
 8004ae6:	b15b      	cbz	r3, 8004b00 <__smakebuf_r+0x74>
 8004ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f949 	bl	8004d84 <_isatty_r>
 8004af2:	b128      	cbz	r0, 8004b00 <__smakebuf_r+0x74>
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	431d      	orrs	r5, r3
 8004b04:	81a5      	strh	r5, [r4, #12]
 8004b06:	e7cd      	b.n	8004aa4 <__smakebuf_r+0x18>
 8004b08:	080048b1 	.word	0x080048b1

08004b0c <malloc>:
 8004b0c:	4b02      	ldr	r3, [pc, #8]	; (8004b18 <malloc+0xc>)
 8004b0e:	4601      	mov	r1, r0
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	f000 b851 	b.w	8004bb8 <_malloc_r>
 8004b16:	bf00      	nop
 8004b18:	20000018 	.word	0x20000018

08004b1c <_free_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4605      	mov	r5, r0
 8004b20:	2900      	cmp	r1, #0
 8004b22:	d045      	beq.n	8004bb0 <_free_r+0x94>
 8004b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b28:	1f0c      	subs	r4, r1, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfb8      	it	lt
 8004b2e:	18e4      	addlt	r4, r4, r3
 8004b30:	f000 f94a 	bl	8004dc8 <__malloc_lock>
 8004b34:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <_free_r+0x98>)
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	4610      	mov	r0, r2
 8004b3a:	b933      	cbnz	r3, 8004b4a <_free_r+0x2e>
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	6014      	str	r4, [r2, #0]
 8004b40:	4628      	mov	r0, r5
 8004b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b46:	f000 b940 	b.w	8004dca <__malloc_unlock>
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	d90c      	bls.n	8004b68 <_free_r+0x4c>
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	1862      	adds	r2, r4, r1
 8004b52:	4293      	cmp	r3, r2
 8004b54:	bf04      	itt	eq
 8004b56:	681a      	ldreq	r2, [r3, #0]
 8004b58:	685b      	ldreq	r3, [r3, #4]
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	bf04      	itt	eq
 8004b5e:	1852      	addeq	r2, r2, r1
 8004b60:	6022      	streq	r2, [r4, #0]
 8004b62:	6004      	str	r4, [r0, #0]
 8004b64:	e7ec      	b.n	8004b40 <_free_r+0x24>
 8004b66:	4613      	mov	r3, r2
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	b10a      	cbz	r2, 8004b70 <_free_r+0x54>
 8004b6c:	42a2      	cmp	r2, r4
 8004b6e:	d9fa      	bls.n	8004b66 <_free_r+0x4a>
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	1858      	adds	r0, r3, r1
 8004b74:	42a0      	cmp	r0, r4
 8004b76:	d10b      	bne.n	8004b90 <_free_r+0x74>
 8004b78:	6820      	ldr	r0, [r4, #0]
 8004b7a:	4401      	add	r1, r0
 8004b7c:	1858      	adds	r0, r3, r1
 8004b7e:	4282      	cmp	r2, r0
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	d1dd      	bne.n	8004b40 <_free_r+0x24>
 8004b84:	6810      	ldr	r0, [r2, #0]
 8004b86:	6852      	ldr	r2, [r2, #4]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	4401      	add	r1, r0
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	e7d7      	b.n	8004b40 <_free_r+0x24>
 8004b90:	d902      	bls.n	8004b98 <_free_r+0x7c>
 8004b92:	230c      	movs	r3, #12
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	e7d3      	b.n	8004b40 <_free_r+0x24>
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	1821      	adds	r1, r4, r0
 8004b9c:	428a      	cmp	r2, r1
 8004b9e:	bf04      	itt	eq
 8004ba0:	6811      	ldreq	r1, [r2, #0]
 8004ba2:	6852      	ldreq	r2, [r2, #4]
 8004ba4:	6062      	str	r2, [r4, #4]
 8004ba6:	bf04      	itt	eq
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	605c      	str	r4, [r3, #4]
 8004bae:	e7c7      	b.n	8004b40 <_free_r+0x24>
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20001e04 	.word	0x20001e04

08004bb8 <_malloc_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	1ccd      	adds	r5, r1, #3
 8004bbc:	f025 0503 	bic.w	r5, r5, #3
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	2d0c      	cmp	r5, #12
 8004bc4:	bf38      	it	cc
 8004bc6:	250c      	movcc	r5, #12
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	4606      	mov	r6, r0
 8004bcc:	db01      	blt.n	8004bd2 <_malloc_r+0x1a>
 8004bce:	42a9      	cmp	r1, r5
 8004bd0:	d903      	bls.n	8004bda <_malloc_r+0x22>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	f000 f8f5 	bl	8004dc8 <__malloc_lock>
 8004bde:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <_malloc_r+0xb4>)
 8004be0:	6814      	ldr	r4, [r2, #0]
 8004be2:	4621      	mov	r1, r4
 8004be4:	b991      	cbnz	r1, 8004c0c <_malloc_r+0x54>
 8004be6:	4c22      	ldr	r4, [pc, #136]	; (8004c70 <_malloc_r+0xb8>)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b91b      	cbnz	r3, 8004bf4 <_malloc_r+0x3c>
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f841 	bl	8004c74 <_sbrk_r>
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f83c 	bl	8004c74 <_sbrk_r>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d126      	bne.n	8004c4e <_malloc_r+0x96>
 8004c00:	230c      	movs	r3, #12
 8004c02:	6033      	str	r3, [r6, #0]
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f8e0 	bl	8004dca <__malloc_unlock>
 8004c0a:	e7e4      	b.n	8004bd6 <_malloc_r+0x1e>
 8004c0c:	680b      	ldr	r3, [r1, #0]
 8004c0e:	1b5b      	subs	r3, r3, r5
 8004c10:	d41a      	bmi.n	8004c48 <_malloc_r+0x90>
 8004c12:	2b0b      	cmp	r3, #11
 8004c14:	d90f      	bls.n	8004c36 <_malloc_r+0x7e>
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	50cd      	str	r5, [r1, r3]
 8004c1a:	18cc      	adds	r4, r1, r3
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f8d4 	bl	8004dca <__malloc_unlock>
 8004c22:	f104 000b 	add.w	r0, r4, #11
 8004c26:	1d23      	adds	r3, r4, #4
 8004c28:	f020 0007 	bic.w	r0, r0, #7
 8004c2c:	1ac3      	subs	r3, r0, r3
 8004c2e:	d01b      	beq.n	8004c68 <_malloc_r+0xb0>
 8004c30:	425a      	negs	r2, r3
 8004c32:	50e2      	str	r2, [r4, r3]
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
 8004c36:	428c      	cmp	r4, r1
 8004c38:	bf0d      	iteet	eq
 8004c3a:	6863      	ldreq	r3, [r4, #4]
 8004c3c:	684b      	ldrne	r3, [r1, #4]
 8004c3e:	6063      	strne	r3, [r4, #4]
 8004c40:	6013      	streq	r3, [r2, #0]
 8004c42:	bf18      	it	ne
 8004c44:	460c      	movne	r4, r1
 8004c46:	e7e9      	b.n	8004c1c <_malloc_r+0x64>
 8004c48:	460c      	mov	r4, r1
 8004c4a:	6849      	ldr	r1, [r1, #4]
 8004c4c:	e7ca      	b.n	8004be4 <_malloc_r+0x2c>
 8004c4e:	1cc4      	adds	r4, r0, #3
 8004c50:	f024 0403 	bic.w	r4, r4, #3
 8004c54:	42a0      	cmp	r0, r4
 8004c56:	d005      	beq.n	8004c64 <_malloc_r+0xac>
 8004c58:	1a21      	subs	r1, r4, r0
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 f80a 	bl	8004c74 <_sbrk_r>
 8004c60:	3001      	adds	r0, #1
 8004c62:	d0cd      	beq.n	8004c00 <_malloc_r+0x48>
 8004c64:	6025      	str	r5, [r4, #0]
 8004c66:	e7d9      	b.n	8004c1c <_malloc_r+0x64>
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20001e04 	.word	0x20001e04
 8004c70:	20001e08 	.word	0x20001e08

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4c06      	ldr	r4, [pc, #24]	; (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	f7ff f8e0 	bl	8003e44 <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	602b      	str	r3, [r5, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20001edc 	.word	0x20001edc

08004c94 <__sread>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	460c      	mov	r4, r1
 8004c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9c:	f000 f896 	bl	8004dcc <_read_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	bfab      	itete	ge
 8004ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca8:	181b      	addge	r3, r3, r0
 8004caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cae:	bfac      	ite	ge
 8004cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cb2:	81a3      	strhlt	r3, [r4, #12]
 8004cb4:	bd10      	pop	{r4, pc}

08004cb6 <__swrite>:
 8004cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cba:	461f      	mov	r7, r3
 8004cbc:	898b      	ldrh	r3, [r1, #12]
 8004cbe:	05db      	lsls	r3, r3, #23
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	d505      	bpl.n	8004cd4 <__swrite+0x1e>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	f000 f868 	bl	8004da4 <_lseek_r>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cea:	f000 b817 	b.w	8004d1c <_write_r>

08004cee <__sseek>:
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf6:	f000 f855 	bl	8004da4 <_lseek_r>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	bf15      	itete	ne
 8004d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d0a:	81a3      	strheq	r3, [r4, #12]
 8004d0c:	bf18      	it	ne
 8004d0e:	81a3      	strhne	r3, [r4, #12]
 8004d10:	bd10      	pop	{r4, pc}

08004d12 <__sclose>:
 8004d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d16:	f000 b813 	b.w	8004d40 <_close_r>
	...

08004d1c <_write_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4c07      	ldr	r4, [pc, #28]	; (8004d3c <_write_r+0x20>)
 8004d20:	4605      	mov	r5, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7ff f86c 	bl	8003e08 <_write>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_write_r+0x1e>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_write_r+0x1e>
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20001edc 	.word	0x20001edc

08004d40 <_close_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4c06      	ldr	r4, [pc, #24]	; (8004d5c <_close_r+0x1c>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4605      	mov	r5, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	f7ff f89a 	bl	8003e84 <_close>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_close_r+0x1a>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_close_r+0x1a>
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	20001edc 	.word	0x20001edc

08004d60 <_fstat_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4c07      	ldr	r4, [pc, #28]	; (8004d80 <_fstat_r+0x20>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4605      	mov	r5, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	f7ff f89b 	bl	8003ea8 <_fstat>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	d102      	bne.n	8004d7c <_fstat_r+0x1c>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	b103      	cbz	r3, 8004d7c <_fstat_r+0x1c>
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}
 8004d7e:	bf00      	nop
 8004d80:	20001edc 	.word	0x20001edc

08004d84 <_isatty_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4c06      	ldr	r4, [pc, #24]	; (8004da0 <_isatty_r+0x1c>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	f7ff f89c 	bl	8003ecc <_isatty>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_isatty_r+0x1a>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_isatty_r+0x1a>
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20001edc 	.word	0x20001edc

08004da4 <_lseek_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4c07      	ldr	r4, [pc, #28]	; (8004dc4 <_lseek_r+0x20>)
 8004da8:	4605      	mov	r5, r0
 8004daa:	4608      	mov	r0, r1
 8004dac:	4611      	mov	r1, r2
 8004dae:	2200      	movs	r2, #0
 8004db0:	6022      	str	r2, [r4, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f7ff f89a 	bl	8003eec <_lseek>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_lseek_r+0x1e>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_lseek_r+0x1e>
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	20001edc 	.word	0x20001edc

08004dc8 <__malloc_lock>:
 8004dc8:	4770      	bx	lr

08004dca <__malloc_unlock>:
 8004dca:	4770      	bx	lr

08004dcc <_read_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4c07      	ldr	r4, [pc, #28]	; (8004dec <_read_r+0x20>)
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7ff f89a 	bl	8003f14 <_read>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_read_r+0x1e>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_read_r+0x1e>
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20001edc 	.word	0x20001edc
 8004df0:	454c4449 	.word	0x454c4449
 8004df4:	00000000 	.word	0x00000000
 8004df8:	20726d54 	.word	0x20726d54
 8004dfc:	00637653 	.word	0x00637653
 8004e00:	51726d54 	.word	0x51726d54
 8004e04:	00000000 	.word	0x00000000
 8004e08:	65746f50 	.word	0x65746f50
 8004e0c:	6f69746e 	.word	0x6f69746e
 8004e10:	6574656d 	.word	0x6574656d
 8004e14:	72614372 	.word	0x72614372
 8004e18:	75657551 	.word	0x75657551
 8004e1c:	00000065 	.word	0x00000065
 8004e20:	65746f50 	.word	0x65746f50
 8004e24:	6f69746e 	.word	0x6f69746e
 8004e28:	6574656d 	.word	0x6574656d
 8004e2c:	67694c72 	.word	0x67694c72
 8004e30:	75517468 	.word	0x75517468
 8004e34:	00657565 	.word	0x00657565
 8004e38:	73726143 	.word	0x73726143
 8004e3c:	75657551 	.word	0x75657551
 8004e40:	00000065 	.word	0x00000065
 8004e44:	6867694c 	.word	0x6867694c
 8004e48:	75517374 	.word	0x75517374
 8004e4c:	00657565 	.word	0x00657565
 8004e50:	66617254 	.word	0x66617254
 8004e54:	20636966 	.word	0x20636966
 8004e58:	776f6c46 	.word	0x776f6c46
 8004e5c:	6a644120 	.word	0x6a644120
 8004e60:	6d747375 	.word	0x6d747375
 8004e64:	00746e65 	.word	0x00746e65
 8004e68:	66617254 	.word	0x66617254
 8004e6c:	20636966 	.word	0x20636966
 8004e70:	656e6547 	.word	0x656e6547
 8004e74:	6f746172 	.word	0x6f746172
 8004e78:	00000072 	.word	0x00000072
 8004e7c:	66617254 	.word	0x66617254
 8004e80:	20636966 	.word	0x20636966
 8004e84:	6867694c 	.word	0x6867694c
 8004e88:	74532074 	.word	0x74532074
 8004e8c:	00657461 	.word	0x00657461
 8004e90:	74737953 	.word	0x74737953
 8004e94:	44206d65 	.word	0x44206d65
 8004e98:	6c707369 	.word	0x6c707369
 8004e9c:	00007961 	.word	0x00007961
 8004ea0:	20646552 	.word	0x20646552
 8004ea4:	66617254 	.word	0x66617254
 8004ea8:	20636966 	.word	0x20636966
 8004eac:	6867694c 	.word	0x6867694c
 8004eb0:	00000074 	.word	0x00000074
 8004eb4:	6c6c6559 	.word	0x6c6c6559
 8004eb8:	5420776f 	.word	0x5420776f
 8004ebc:	66666172 	.word	0x66666172
 8004ec0:	4c206369 	.word	0x4c206369
 8004ec4:	74686769 	.word	0x74686769
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	65657247 	.word	0x65657247
 8004ed0:	7254206e 	.word	0x7254206e
 8004ed4:	69666661 	.word	0x69666661
 8004ed8:	694c2063 	.word	0x694c2063
 8004edc:	00746867 	.word	0x00746867
 8004ee0:	75746341 	.word	0x75746341
 8004ee4:	70206c61 	.word	0x70206c61
 8004ee8:	6e65746f 	.word	0x6e65746f
 8004eec:	6d6f6974 	.word	0x6d6f6974
 8004ef0:	72657465 	.word	0x72657465
 8004ef4:	6c617620 	.word	0x6c617620
 8004ef8:	203a6575 	.word	0x203a6575
 8004efc:	000a6425 	.word	0x000a6425
 8004f00:	63637553 	.word	0x63637553
 8004f04:	66737365 	.word	0x66737365
 8004f08:	796c6c75 	.word	0x796c6c75
 8004f0c:	64646120 	.word	0x64646120
 8004f10:	70206465 	.word	0x70206465
 8004f14:	6e65746f 	.word	0x6e65746f
 8004f18:	6d6f6974 	.word	0x6d6f6974
 8004f1c:	72657465 	.word	0x72657465
 8004f20:	6c617620 	.word	0x6c617620
 8004f24:	203a6575 	.word	0x203a6575
 8004f28:	74206425 	.word	0x74206425
 8004f2c:	6874206f 	.word	0x6874206f
 8004f30:	75712065 	.word	0x75712065
 8004f34:	20657565 	.word	0x20657565
 8004f38:	20646e61 	.word	0x20646e61
 8004f3c:	6574756d 	.word	0x6574756d
 8004f40:	000a2078 	.word	0x000a2078
 8004f44:	66617254 	.word	0x66617254
 8004f48:	20636966 	.word	0x20636966
 8004f4c:	776f6c66 	.word	0x776f6c66
 8004f50:	6a646120 	.word	0x6a646120
 8004f54:	6d747375 	.word	0x6d747375
 8004f58:	20746e65 	.word	0x20746e65
 8004f5c:	6c696166 	.word	0x6c696166
 8004f60:	00216465 	.word	0x00216465
 8004f64:	65636552 	.word	0x65636552
 8004f68:	64657669 	.word	0x64657669
 8004f6c:	746f7020 	.word	0x746f7020
 8004f70:	69746e65 	.word	0x69746e65
 8004f74:	74656d6f 	.word	0x74656d6f
 8004f78:	76207265 	.word	0x76207265
 8004f7c:	65756c61 	.word	0x65756c61
 8004f80:	206e6920 	.word	0x206e6920
 8004f84:	656e6567 	.word	0x656e6567
 8004f88:	6f746172 	.word	0x6f746172
 8004f8c:	61742072 	.word	0x61742072
 8004f90:	203a6b73 	.word	0x203a6b73
 8004f94:	000a6425 	.word	0x000a6425
 8004f98:	63637553 	.word	0x63637553
 8004f9c:	66737365 	.word	0x66737365
 8004fa0:	796c6c75 	.word	0x796c6c75
 8004fa4:	6e657320 	.word	0x6e657320
 8004fa8:	656e2074 	.word	0x656e2074
 8004fac:	63207478 	.word	0x63207478
 8004fb0:	76207261 	.word	0x76207261
 8004fb4:	65756c61 	.word	0x65756c61
 8004fb8:	206f7420 	.word	0x206f7420
 8004fbc:	73726163 	.word	0x73726163
 8004fc0:	65757120 	.word	0x65757120
 8004fc4:	202e6575 	.word	0x202e6575
 8004fc8:	756c6156 	.word	0x756c6156
 8004fcc:	203d2065 	.word	0x203d2065
 8004fd0:	000a6425 	.word	0x000a6425
 8004fd4:	75736e55 	.word	0x75736e55
 8004fd8:	73656363 	.word	0x73656363
 8004fdc:	6c756673 	.word	0x6c756673
 8004fe0:	63657220 	.word	0x63657220
 8004fe4:	65766965 	.word	0x65766965
 8004fe8:	20666f20 	.word	0x20666f20
 8004fec:	20746f70 	.word	0x20746f70
 8004ff0:	756c6176 	.word	0x756c6176
 8004ff4:	00000065 	.word	0x00000065
 8004ff8:	65636552 	.word	0x65636552
 8004ffc:	64657669 	.word	0x64657669
 8005000:	746f7020 	.word	0x746f7020
 8005004:	69746e65 	.word	0x69746e65
 8005008:	74656d6f 	.word	0x74656d6f
 800500c:	76207265 	.word	0x76207265
 8005010:	65756c61 	.word	0x65756c61
 8005014:	206e6920 	.word	0x206e6920
 8005018:	6867696c 	.word	0x6867696c
 800501c:	74732074 	.word	0x74732074
 8005020:	3a657461 	.word	0x3a657461
 8005024:	0a642520 	.word	0x0a642520
 8005028:	00000000 	.word	0x00000000
 800502c:	20656854 	.word	0x20656854
 8005030:	20646c6f 	.word	0x20646c6f
 8005034:	65746f70 	.word	0x65746f70
 8005038:	6f69746e 	.word	0x6f69746e
 800503c:	6574656d 	.word	0x6574656d
 8005040:	61762072 	.word	0x61762072
 8005044:	2065756c 	.word	0x2065756c
 8005048:	203a7369 	.word	0x203a7369
 800504c:	00006425 	.word	0x00006425
 8005050:	6867694c 	.word	0x6867694c
 8005054:	61742074 	.word	0x61742074
 8005058:	203a6b73 	.word	0x203a6b73
 800505c:	6867696c 	.word	0x6867696c
 8005060:	73692074 	.word	0x73692074
 8005064:	64657220 	.word	0x64657220
 8005068:	6570202c 	.word	0x6570202c
 800506c:	646f6972 	.word	0x646f6972
 8005070:	68632073 	.word	0x68632073
 8005074:	65676e61 	.word	0x65676e61
 8005078:	00000064 	.word	0x00000064
 800507c:	69766947 	.word	0x69766947
 8005080:	7320676e 	.word	0x7320676e
 8005084:	70616d65 	.word	0x70616d65
 8005088:	65726f68 	.word	0x65726f68
 800508c:	69616620 	.word	0x69616620
 8005090:	2064656c 	.word	0x2064656c
 8005094:	6c206e69 	.word	0x6c206e69
 8005098:	74686769 	.word	0x74686769
 800509c:	61747320 	.word	0x61747320
 80050a0:	74206574 	.word	0x74206574
 80050a4:	006b7361 	.word	0x006b7361
 80050a8:	6867694c 	.word	0x6867694c
 80050ac:	61742074 	.word	0x61742074
 80050b0:	203a6b73 	.word	0x203a6b73
 80050b4:	6867696c 	.word	0x6867696c
 80050b8:	73692074 	.word	0x73692074
 80050bc:	65726720 	.word	0x65726720
 80050c0:	202c6e65 	.word	0x202c6e65
 80050c4:	69726570 	.word	0x69726570
 80050c8:	2073646f 	.word	0x2073646f
 80050cc:	6e616863 	.word	0x6e616863
 80050d0:	00646567 	.word	0x00646567
 80050d4:	6867694c 	.word	0x6867694c
 80050d8:	61742074 	.word	0x61742074
 80050dc:	203a6b73 	.word	0x203a6b73
 80050e0:	6867696c 	.word	0x6867696c
 80050e4:	73692074 	.word	0x73692074
 80050e8:	6c657920 	.word	0x6c657920
 80050ec:	2c776f6c 	.word	0x2c776f6c
 80050f0:	72657020 	.word	0x72657020
 80050f4:	73646f69 	.word	0x73646f69
 80050f8:	61686320 	.word	0x61686320
 80050fc:	6465676e 	.word	0x6465676e
 8005100:	00000000 	.word	0x00000000
 8005104:	65636552 	.word	0x65636552
 8005108:	64657669 	.word	0x64657669
 800510c:	72616320 	.word	0x72616320
 8005110:	69786520 	.word	0x69786520
 8005114:	20737473 	.word	0x20737473
 8005118:	756c6176 	.word	0x756c6176
 800511c:	6e692065 	.word	0x6e692065
 8005120:	73797320 	.word	0x73797320
 8005124:	206d6574 	.word	0x206d6574
 8005128:	70736964 	.word	0x70736964
 800512c:	3a79616c 	.word	0x3a79616c
 8005130:	0a642520 	.word	0x0a642520
 8005134:	00000000 	.word	0x00000000
 8005138:	64206e49 	.word	0x64206e49
 800513c:	6c707369 	.word	0x6c707369
 8005140:	203a7961 	.word	0x203a7961
 8005144:	616d6573 	.word	0x616d6573
 8005148:	726f6870 	.word	0x726f6870
 800514c:	61742065 	.word	0x61742065
 8005150:	206e656b 	.word	0x206e656b
 8005154:	63637573 	.word	0x63637573
 8005158:	66737365 	.word	0x66737365
 800515c:	796c6c75 	.word	0x796c6c75
 8005160:	00000000 	.word	0x00000000
 8005164:	64206e49 	.word	0x64206e49
 8005168:	6c707369 	.word	0x6c707369
 800516c:	203a7961 	.word	0x203a7961
 8005170:	6867696c 	.word	0x6867696c
 8005174:	73692074 	.word	0x73692074
 8005178:	64657220 	.word	0x64657220
 800517c:	6163202c 	.word	0x6163202c
 8005180:	73207372 	.word	0x73207372
 8005184:	20706f74 	.word	0x20706f74
 8005188:	66696873 	.word	0x66696873
 800518c:	676e6974 	.word	0x676e6974
 8005190:	20746120 	.word	0x20746120
 8005194:	6867696c 	.word	0x6867696c
 8005198:	00000074 	.word	0x00000074
 800519c:	64206e49 	.word	0x64206e49
 80051a0:	6c707369 	.word	0x6c707369
 80051a4:	203a7961 	.word	0x203a7961
 80051a8:	6867696c 	.word	0x6867696c
 80051ac:	73692074 	.word	0x73692074
 80051b0:	6c657920 	.word	0x6c657920
 80051b4:	2c776f6c 	.word	0x2c776f6c
 80051b8:	72616320 	.word	0x72616320
 80051bc:	74732073 	.word	0x74732073
 80051c0:	7320706f 	.word	0x7320706f
 80051c4:	74666968 	.word	0x74666968
 80051c8:	20676e69 	.word	0x20676e69
 80051cc:	6f666562 	.word	0x6f666562
 80051d0:	6c206572 	.word	0x6c206572
 80051d4:	74686769 	.word	0x74686769
 80051d8:	6e6f2820 	.word	0x6e6f2820
 80051dc:	69207365 	.word	0x69207365
 80051e0:	696c206e 	.word	0x696c206e
 80051e4:	20746867 	.word	0x20746867
 80051e8:	746e6f63 	.word	0x746e6f63
 80051ec:	65756e69 	.word	0x65756e69
 80051f0:	00000029 	.word	0x00000029
 80051f4:	64206e49 	.word	0x64206e49
 80051f8:	6c707369 	.word	0x6c707369
 80051fc:	203a7961 	.word	0x203a7961
 8005200:	6867696c 	.word	0x6867696c
 8005204:	73692074 	.word	0x73692074
 8005208:	65726720 	.word	0x65726720
 800520c:	202c6e65 	.word	0x202c6e65
 8005210:	73726163 	.word	0x73726163
 8005214:	69687320 	.word	0x69687320
 8005218:	6e697466 	.word	0x6e697466
 800521c:	00000067 	.word	0x00000067
 8005220:	74737953 	.word	0x74737953
 8005224:	64206d65 	.word	0x64206d65
 8005228:	6c707369 	.word	0x6c707369
 800522c:	203a7961 	.word	0x203a7961
 8005230:	69766967 	.word	0x69766967
 8005234:	7320676e 	.word	0x7320676e
 8005238:	70616d65 	.word	0x70616d65
 800523c:	65726f68 	.word	0x65726f68
 8005240:	69616620 	.word	0x69616620
 8005244:	0064656c 	.word	0x0064656c
 8005248:	73206e49 	.word	0x73206e49
 800524c:	72207465 	.word	0x72207465
 8005250:	2064616f 	.word	0x2064616f
 8005254:	70736964 	.word	0x70736964
 8005258:	3a79616c 	.word	0x3a79616c
 800525c:	65687420 	.word	0x65687420
 8005260:	6c617620 	.word	0x6c617620
 8005264:	6f206575 	.word	0x6f206575
 8005268:	61632066 	.word	0x61632066
 800526c:	305b7372 	.word	0x305b7372
 8005270:	7369205d 	.word	0x7369205d
 8005274:	00642520 	.word	0x00642520
 8005278:	73206e49 	.word	0x73206e49
 800527c:	72207465 	.word	0x72207465
 8005280:	2064616f 	.word	0x2064616f
 8005284:	70736964 	.word	0x70736964
 8005288:	3a79616c 	.word	0x3a79616c
 800528c:	65687420 	.word	0x65687420
 8005290:	6c617620 	.word	0x6c617620
 8005294:	6f206575 	.word	0x6f206575
 8005298:	61632066 	.word	0x61632066
 800529c:	315b7372 	.word	0x315b7372
 80052a0:	7369205d 	.word	0x7369205d
 80052a4:	00642520 	.word	0x00642520
 80052a8:	4c646552 	.word	0x4c646552
 80052ac:	74686769 	.word	0x74686769
 80052b0:	6c6c6143 	.word	0x6c6c6143
 80052b4:	6b636162 	.word	0x6b636162
 80052b8:	6552203a 	.word	0x6552203a
 80052bc:	696c2064 	.word	0x696c2064
 80052c0:	20746867 	.word	0x20746867
 80052c4:	656d6974 	.word	0x656d6974
 80052c8:	6f642072 	.word	0x6f642072
 80052cc:	0000656e 	.word	0x0000656e
 80052d0:	4c646552 	.word	0x4c646552
 80052d4:	74686769 	.word	0x74686769
 80052d8:	6c6c6143 	.word	0x6c6c6143
 80052dc:	6b636162 	.word	0x6b636162
 80052e0:	694c203a 	.word	0x694c203a
 80052e4:	20746867 	.word	0x20746867
 80052e8:	74617473 	.word	0x74617473
 80052ec:	75207375 	.word	0x75207375
 80052f0:	74616470 	.word	0x74616470
 80052f4:	74206465 	.word	0x74206465
 80052f8:	7267206f 	.word	0x7267206f
 80052fc:	006e6565 	.word	0x006e6565
 8005300:	4c646552 	.word	0x4c646552
 8005304:	74686769 	.word	0x74686769
 8005308:	6c6c6143 	.word	0x6c6c6143
 800530c:	6b636162 	.word	0x6b636162
 8005310:	6947203a 	.word	0x6947203a
 8005314:	676e6976 	.word	0x676e6976
 8005318:	6d657320 	.word	0x6d657320
 800531c:	6f687061 	.word	0x6f687061
 8005320:	66206572 	.word	0x66206572
 8005324:	656c6961 	.word	0x656c6961
 8005328:	00000064 	.word	0x00000064
 800532c:	6c6c6559 	.word	0x6c6c6559
 8005330:	6c20776f 	.word	0x6c20776f
 8005334:	74686769 	.word	0x74686769
 8005338:	6d697420 	.word	0x6d697420
 800533c:	64207265 	.word	0x64207265
 8005340:	00656e6f 	.word	0x00656e6f
 8005344:	6867694c 	.word	0x6867694c
 8005348:	74732074 	.word	0x74732074
 800534c:	73757461 	.word	0x73757461
 8005350:	64707520 	.word	0x64707520
 8005354:	64657461 	.word	0x64657461
 8005358:	206f7420 	.word	0x206f7420
 800535c:	20646572 	.word	0x20646572
 8005360:	79206e69 	.word	0x79206e69
 8005364:	6f6c6c65 	.word	0x6f6c6c65
 8005368:	61632077 	.word	0x61632077
 800536c:	61626c6c 	.word	0x61626c6c
 8005370:	66206b63 	.word	0x66206b63
 8005374:	74636e75 	.word	0x74636e75
 8005378:	006e6f69 	.word	0x006e6f69
 800537c:	69766947 	.word	0x69766947
 8005380:	7320676e 	.word	0x7320676e
 8005384:	70616d65 	.word	0x70616d65
 8005388:	65726f68 	.word	0x65726f68
 800538c:	69616620 	.word	0x69616620
 8005390:	2064656c 	.word	0x2064656c
 8005394:	79206e69 	.word	0x79206e69
 8005398:	6f6c6c65 	.word	0x6f6c6c65
 800539c:	61632077 	.word	0x61632077
 80053a0:	61626c6c 	.word	0x61626c6c
 80053a4:	74206b63 	.word	0x74206b63
 80053a8:	006b7361 	.word	0x006b7361
 80053ac:	65657247 	.word	0x65657247
 80053b0:	696c206e 	.word	0x696c206e
 80053b4:	20746867 	.word	0x20746867
 80053b8:	656d6974 	.word	0x656d6974
 80053bc:	6f642072 	.word	0x6f642072
 80053c0:	0000656e 	.word	0x0000656e
 80053c4:	6867694c 	.word	0x6867694c
 80053c8:	74732074 	.word	0x74732074
 80053cc:	73757461 	.word	0x73757461
 80053d0:	64707520 	.word	0x64707520
 80053d4:	64657461 	.word	0x64657461
 80053d8:	206f7420 	.word	0x206f7420
 80053dc:	6c6c6579 	.word	0x6c6c6579
 80053e0:	6920776f 	.word	0x6920776f
 80053e4:	7267206e 	.word	0x7267206e
 80053e8:	206e6565 	.word	0x206e6565
 80053ec:	6c6c6163 	.word	0x6c6c6163
 80053f0:	6b636162 	.word	0x6b636162
 80053f4:	6e756620 	.word	0x6e756620
 80053f8:	6f697463 	.word	0x6f697463
 80053fc:	0000006e 	.word	0x0000006e
 8005400:	69766947 	.word	0x69766947
 8005404:	7320676e 	.word	0x7320676e
 8005408:	70616d65 	.word	0x70616d65
 800540c:	65726f68 	.word	0x65726f68
 8005410:	69616620 	.word	0x69616620
 8005414:	2064656c 	.word	0x2064656c
 8005418:	67206e69 	.word	0x67206e69
 800541c:	6e656572 	.word	0x6e656572
 8005420:	6c616320 	.word	0x6c616320
 8005424:	6361626c 	.word	0x6361626c
 8005428:	6174206b 	.word	0x6174206b
 800542c:	00006b73 	.word	0x00006b73

08005430 <__sf_fake_stderr>:
	...

08005450 <__sf_fake_stdin>:
	...

08005470 <__sf_fake_stdout>:
	...

08005490 <_global_impure_ptr>:
 8005490:	2000001c                                ... 

08005494 <_init>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr

080054a0 <_fini>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr
