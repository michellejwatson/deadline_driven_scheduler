
deadline_driven_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000028  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  6 .bss          00019258  20000028  20000028  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20019280  20019280  00020028  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e298  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023d7  00000000  00000000  0002e2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cd8  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb0  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000059af  00000000  00000000  00031f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048bc  00000000  00000000  000378ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c1bb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000034ec  00000000  00000000  0003c238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004728 	.word	0x08004728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08004728 	.word	0x08004728

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	2000004c 	.word	0x2000004c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000044 	.word	0x20000044
 8000530:	20000048 	.word	0x20000048
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 faec 	bl	8001bfc <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	2000004c 	.word	0x2000004c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fa08 	bl	8001a84 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000024 	.word	0x20000024
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000044 	.word	0x20000044
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	20000048 	.word	0x20000048

08000760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <xQueueGenericReset+0x28>
 8000774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000778:	f383 8811 	msr	BASEPRI, r3
 800077c:	f3bf 8f6f 	isb	sy
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	e7fe      	b.n	8000786 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000788:	f7ff feda 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000794:	68f9      	ldr	r1, [r7, #12]
 8000796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000798:	fb01 f303 	mul.w	r3, r1, r3
 800079c:	441a      	add	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b8:	3b01      	subs	r3, #1
 80007ba:	68f9      	ldr	r1, [r7, #12]
 80007bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007be:	fb01 f303 	mul.w	r3, r1, r3
 80007c2:	441a      	add	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	22ff      	movs	r2, #255	; 0xff
 80007cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d114      	bne.n	8000808 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d01a      	beq.n	800081c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3310      	adds	r3, #16
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fad4 	bl	8001d98 <xTaskRemoveFromEventList>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d012      	beq.n	800081c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <xQueueGenericReset+0xcc>)
 80007f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	e009      	b.n	800081c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3310      	adds	r3, #16
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcdf 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3324      	adds	r3, #36	; 0x24
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcda 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800081c:	f7ff febe 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000ed04 	.word	0xe000ed04

08000830 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af02      	add	r7, sp, #8
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d109      	bne.n	8000858 <xQueueGenericCreate+0x28>
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	e7fe      	b.n	8000856 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	e004      	b.n	800086e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3348      	adds	r3, #72	; 0x48
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fc28 	bl	80030c8 <pvPortMalloc>
 8000878:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00b      	beq.n	8000898 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	3348      	adds	r3, #72	; 0x48
 8000884:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 f805 	bl	80008a2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000898:	69bb      	ldr	r3, [r7, #24]
	}
 800089a:	4618      	mov	r0, r3
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d103      	bne.n	80008be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	e002      	b.n	80008c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008d0:	2101      	movs	r1, #1
 80008d2:	69b8      	ldr	r0, [r7, #24]
 80008d4:	f7ff ff44 	bl	8000760 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <xQueueGenericSend+0x30>
 80008fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
 800090e:	e7fe      	b.n	800090e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <xQueueGenericSend+0x3e>
 8000916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <xQueueGenericSend+0x42>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <xQueueGenericSend+0x44>
 8000922:	2300      	movs	r3, #0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d109      	bne.n	800093c <xQueueGenericSend+0x5c>
 8000928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092c:	f383 8811 	msr	BASEPRI, r3
 8000930:	f3bf 8f6f 	isb	sy
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
 800093a:	e7fe      	b.n	800093a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d103      	bne.n	800094a <xQueueGenericSend+0x6a>
 8000942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <xQueueGenericSend+0x6e>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <xQueueGenericSend+0x70>
 800094e:	2300      	movs	r3, #0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d109      	bne.n	8000968 <xQueueGenericSend+0x88>
 8000954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000958:	f383 8811 	msr	BASEPRI, r3
 800095c:	f3bf 8f6f 	isb	sy
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	e7fe      	b.n	8000966 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000968:	f001 fbd2 	bl	8002110 <xTaskGetSchedulerState>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <xQueueGenericSend+0x98>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <xQueueGenericSend+0x9c>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <xQueueGenericSend+0x9e>
 800097c:	2300      	movs	r3, #0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d109      	bne.n	8000996 <xQueueGenericSend+0xb6>
 8000982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	e7fe      	b.n	8000994 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000996:	f7ff fdd3 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d302      	bcc.n	80009ac <xQueueGenericSend+0xcc>
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d129      	bne.n	8000a00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009b2:	f000 fa35 	bl	8000e20 <prvCopyDataToQueue>
 80009b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d010      	beq.n	80009e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c2:	3324      	adds	r3, #36	; 0x24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f9e7 	bl	8001d98 <xTaskRemoveFromEventList>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d013      	beq.n	80009f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80009d0:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <xQueueGenericSend+0x1f0>)
 80009d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	e00a      	b.n	80009f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80009e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <xQueueGenericSend+0x1f0>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80009f8:	f7ff fdd0 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e063      	b.n	8000ac8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a06:	f7ff fdc9 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e05c      	b.n	8000ac8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d106      	bne.n	8000a22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa1f 	bl	8001e5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a22:	f7ff fdbb 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a26:	f000 ff73 	bl	8001910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a2a:	f7ff fd89 	bl	8000540 <vPortEnterCritical>
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d103      	bne.n	8000a44 <xQueueGenericSend+0x164>
 8000a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d103      	bne.n	8000a5a <xQueueGenericSend+0x17a>
 8000a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a5a:	f7ff fd9f 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fa1c 	bl	8001ea4 <xTaskCheckForTimeOut>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d124      	bne.n	8000abc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a74:	f000 facc 	bl	8001010 <prvIsQueueFull>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d018      	beq.n	8000ab0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	3310      	adds	r3, #16
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f938 	bl	8001cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a8e:	f000 fa57 	bl	8000f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000a92:	f000 ff4b 	bl	800192c <xTaskResumeAll>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f af7c 	bne.w	8000996 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <xQueueGenericSend+0x1f0>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	e772      	b.n	8000996 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ab2:	f000 fa45 	bl	8000f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000ab6:	f000 ff39 	bl	800192c <xTaskResumeAll>
 8000aba:	e76c      	b.n	8000996 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000abe:	f000 fa3f 	bl	8000f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ac2:	f000 ff33 	bl	800192c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ac6:	2300      	movs	r3, #0
		}
	}
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d109      	bne.n	8000b00 <xQueueGenericSendFromISR+0x2c>
 8000aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af0:	f383 8811 	msr	BASEPRI, r3
 8000af4:	f3bf 8f6f 	isb	sy
 8000af8:	f3bf 8f4f 	dsb	sy
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
 8000afe:	e7fe      	b.n	8000afe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <xQueueGenericSendFromISR+0x3a>
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <xQueueGenericSendFromISR+0x3e>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <xQueueGenericSendFromISR+0x40>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <xQueueGenericSendFromISR+0x58>
 8000b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1c:	f383 8811 	msr	BASEPRI, r3
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	e7fe      	b.n	8000b2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSendFromISR+0x66>
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d101      	bne.n	8000b3e <xQueueGenericSendFromISR+0x6a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <xQueueGenericSendFromISR+0x6c>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <xQueueGenericSendFromISR+0x84>
 8000b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b48:	f383 8811 	msr	BASEPRI, r3
 8000b4c:	f3bf 8f6f 	isb	sy
 8000b50:	f3bf 8f4f 	dsb	sy
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	e7fe      	b.n	8000b56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b58:	f7ff fdc4 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8000b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b64:	f383 8811 	msr	BASEPRI, r3
 8000b68:	f3bf 8f6f 	isb	sy
 8000b6c:	f3bf 8f4f 	dsb	sy
 8000b70:	61ba      	str	r2, [r7, #24]
 8000b72:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d302      	bcc.n	8000b8a <xQueueGenericSendFromISR+0xb6>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d12c      	bne.n	8000be4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b9a:	f000 f941 	bl	8000e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d112      	bne.n	8000bce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d016      	beq.n	8000bde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	3324      	adds	r3, #36	; 0x24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 f8ef 	bl	8001d98 <xTaskRemoveFromEventList>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00e      	beq.n	8000bde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	e007      	b.n	8000bde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b25a      	sxtb	r2, r3
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000bde:	2301      	movs	r3, #1
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000be2:	e001      	b.n	8000be8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3738      	adds	r7, #56	; 0x38
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <xQueueGenericReceive+0x30>
	__asm volatile
 8000c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2a:	e7fe      	b.n	8000c2a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <xQueueGenericReceive+0x3e>
 8000c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <xQueueGenericReceive+0x42>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <xQueueGenericReceive+0x44>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <xQueueGenericReceive+0x5c>
 8000c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c48:	f383 8811 	msr	BASEPRI, r3
 8000c4c:	f3bf 8f6f 	isb	sy
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	e7fe      	b.n	8000c56 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c58:	f001 fa5a 	bl	8002110 <xTaskGetSchedulerState>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <xQueueGenericReceive+0x6c>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <xQueueGenericReceive+0x70>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <xQueueGenericReceive+0x72>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d109      	bne.n	8000c86 <xQueueGenericReceive+0x8a>
 8000c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c76:	f383 8811 	msr	BASEPRI, r3
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	f3bf 8f4f 	dsb	sy
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	e7fe      	b.n	8000c84 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000c86:	f7ff fc5b 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d046      	beq.n	8000d24 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ca0:	f000 f928 	bl	8000ef4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d121      	bne.n	8000cee <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d104      	bne.n	8000cc4 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000cba:	f001 fb41 	bl	8002340 <pvTaskIncrementMutexHeldCount>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d027      	beq.n	8000d1c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cce:	3310      	adds	r3, #16
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 f861 	bl	8001d98 <xTaskRemoveFromEventList>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01f      	beq.n	8000d1c <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000cdc:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <xQueueGenericReceive+0x220>)
 8000cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	f3bf 8f4f 	dsb	sy
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	e016      	b.n	8000d1c <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cf2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00f      	beq.n	8000d1c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfe:	3324      	adds	r3, #36	; 0x24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 f849 	bl	8001d98 <xTaskRemoveFromEventList>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <xQueueGenericReceive+0x220>)
 8000d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	f3bf 8f4f 	dsb	sy
 8000d18:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000d1c:	f7ff fc3e 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e077      	b.n	8000e14 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d2a:	f7ff fc37 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e070      	b.n	8000e14 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 f88d 	bl	8001e5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d46:	f7ff fc29 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d4a:	f000 fde1 	bl	8001910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d4e:	f7ff fbf7 	bl	8000540 <vPortEnterCritical>
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5e:	d103      	bne.n	8000d68 <xQueueGenericReceive+0x16c>
 8000d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d103      	bne.n	8000d7e <xQueueGenericReceive+0x182>
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d7e:	f7ff fc0d 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d82:	1d3a      	adds	r2, r7, #4
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 f88a 	bl	8001ea4 <xTaskCheckForTimeOut>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d131      	bne.n	8000dfa <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d98:	f000 f924 	bl	8000fe4 <prvIsQueueEmpty>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d025      	beq.n	8000dee <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d108      	bne.n	8000dbc <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000daa:	f7ff fbc9 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f9ca 	bl	800214c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000db8:	f7ff fbf0 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	3324      	adds	r3, #36	; 0x24
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 ff99 	bl	8001cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dcc:	f000 f8b8 	bl	8000f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000dd0:	f000 fdac 	bl	800192c <xTaskResumeAll>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f af55 	bne.w	8000c86 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <xQueueGenericReceive+0x220>)
 8000dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f3bf 8f4f 	dsb	sy
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	e74b      	b.n	8000c86 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000df0:	f000 f8a6 	bl	8000f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000df4:	f000 fd9a 	bl	800192c <xTaskResumeAll>
 8000df8:	e745      	b.n	8000c86 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dfc:	f000 f8a0 	bl	8000f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e00:	f000 fd94 	bl	800192c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e06:	f000 f8ed 	bl	8000fe4 <prvIsQueueEmpty>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f43f af3a 	beq.w	8000c86 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000e12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3738      	adds	r7, #56	; 0x38
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000ed04 	.word	0xe000ed04

08000e20 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10d      	bne.n	8000e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d14d      	bne.n	8000ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f9f4 	bl	8002238 <xTaskPriorityDisinherit>
 8000e50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	e043      	b.n	8000ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d119      	bne.n	8000e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	f003 fb90 	bl	8004590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d32b      	bcc.n	8000ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	e026      	b.n	8000ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	68d8      	ldr	r0, [r3, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	f003 fb76 	bl	8004590 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	425b      	negs	r3, r3
 8000eae:	441a      	add	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	425b      	negs	r3, r3
 8000eca:	441a      	add	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d105      	bne.n	8000ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000eea:	697b      	ldr	r3, [r7, #20]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d018      	beq.n	8000f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	441a      	add	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d303      	bcc.n	8000f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68d9      	ldr	r1, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	461a      	mov	r2, r3
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f003 fb2c 	bl	8004590 <memcpy>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000f48:	f7ff fafa 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f54:	e011      	b.n	8000f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3324      	adds	r3, #36	; 0x24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 ff18 	bl	8001d98 <xTaskRemoveFromEventList>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000f6e:	f000 fff7 	bl	8001f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dce9      	bgt.n	8000f56 <prvUnlockQueue+0x16>
 8000f82:	e000      	b.n	8000f86 <prvUnlockQueue+0x46>
					break;
 8000f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000f8e:	f7ff fb05 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000f92:	f7ff fad5 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f9e:	e011      	b.n	8000fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d012      	beq.n	8000fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3310      	adds	r3, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fef3 	bl	8001d98 <xTaskRemoveFromEventList>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000fb8:	f000 ffd2 	bl	8001f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dce9      	bgt.n	8000fa0 <prvUnlockQueue+0x60>
 8000fcc:	e000      	b.n	8000fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000fd8:	f7ff fae0 	bl	800059c <vPortExitCritical>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000fec:	f7ff faa8 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e001      	b.n	8001002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001002:	f7ff facb 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001018:	f7ff fa92 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001024:	429a      	cmp	r2, r3
 8001026:	d102      	bne.n	800102e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e001      	b.n	8001032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001032:	f7ff fab3 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e014      	b.n	800107a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <vQueueAddToRegistry+0x4c>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800105c:	490b      	ldr	r1, [pc, #44]	; (800108c <vQueueAddToRegistry+0x4c>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <vQueueAddToRegistry+0x4c>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001072:	e005      	b.n	8001080 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b07      	cmp	r3, #7
 800107e:	d9e7      	bls.n	8001050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200191b8 	.word	0x200191b8

08001090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80010a0:	f7ff fa4e 	bl	8000540 <vPortEnterCritical>
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d103      	bne.n	80010ba <vQueueWaitForMessageRestricted+0x2a>
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c6:	d103      	bne.n	80010d0 <vQueueWaitForMessageRestricted+0x40>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010d0:	f7ff fa64 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d106      	bne.n	80010ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3324      	adds	r3, #36	; 0x24
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fe2d 	bl	8001d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff28 	bl	8000f40 <prvUnlockQueue>
	}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ffdb 	bl	80030c8 <pvPortMalloc>
 8001112:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00e      	beq.n	8001138 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800111a:	2050      	movs	r0, #80	; 0x50
 800111c:	f001 ffd4 	bl	80030c8 <pvPortMalloc>
 8001120:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	e005      	b.n	800113c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f002 f88f 	bl	8003254 <vPortFree>
 8001136:	e001      	b.n	800113c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d013      	beq.n	800116a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	2300      	movs	r3, #0
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f80e 	bl	800117a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800115e:	69f8      	ldr	r0, [r7, #28]
 8001160:	f000 f892 	bl	8001288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	e002      	b.n	8001170 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001170:	69bb      	ldr	r3, [r7, #24]
	}
 8001172:	4618      	mov	r0, r3
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b088      	sub	sp, #32
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	21a5      	movs	r1, #165	; 0xa5
 8001194:	f003 fa07 	bl	80045a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011a2:	3b01      	subs	r3, #1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f023 0307 	bic.w	r3, r3, #7
 80011b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <prvInitialiseNewTask+0x56>
 80011bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c0:	f383 8811 	msr	BASEPRI, r3
 80011c4:	f3bf 8f6f 	isb	sy
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e7fe      	b.n	80011ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e012      	b.n	80011fc <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	4413      	add	r3, r2
 80011dc:	7819      	ldrb	r1, [r3, #0]
 80011de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4413      	add	r3, r2
 80011e4:	3334      	adds	r3, #52	; 0x34
 80011e6:	460a      	mov	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d9e9      	bls.n	80011d6 <prvInitialiseNewTask+0x5c>
 8001202:	e000      	b.n	8001206 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001204:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	2b04      	cmp	r3, #4
 8001212:	d901      	bls.n	8001218 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001214:	2304      	movs	r3, #4
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	3304      	adds	r3, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffee 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	3318      	adds	r3, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ffe9 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	f1c3 0205 	rsb	r2, r3, #5
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	2200      	movs	r2, #0
 8001258:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	2200      	movs	r2, #0
 800125e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	69b8      	ldr	r0, [r7, #24]
 8001268:	f7ff f866 	bl	8000338 <pxPortInitialiseStack>
 800126c:	4602      	mov	r2, r0
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800127c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001290:	f7ff f956 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <prvAddNewTaskToReadyList+0xb8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a29      	ldr	r2, [pc, #164]	; (8001340 <prvAddNewTaskToReadyList+0xb8>)
 800129c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <prvAddNewTaskToReadyList+0xbc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <prvAddNewTaskToReadyList+0xbc>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <prvAddNewTaskToReadyList+0xb8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d110      	bne.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80012b4:	f000 fe7a 	bl	8001fac <prvInitialiseTaskLists>
 80012b8:	e00d      	b.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <prvAddNewTaskToReadyList+0xc0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <prvAddNewTaskToReadyList+0xbc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d802      	bhi.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <prvAddNewTaskToReadyList+0xbc>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <prvAddNewTaskToReadyList+0xc4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <prvAddNewTaskToReadyList+0xc4>)
 80012de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	2201      	movs	r2, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <prvAddNewTaskToReadyList+0xc8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <prvAddNewTaskToReadyList+0xc8>)
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <prvAddNewTaskToReadyList+0xcc>)
 8001300:	441a      	add	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3304      	adds	r3, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4610      	mov	r0, r2
 800130a:	f7fe ff8e 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800130e:	f7ff f945 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <prvAddNewTaskToReadyList+0xc0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00e      	beq.n	8001338 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <prvAddNewTaskToReadyList+0xbc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <prvAddNewTaskToReadyList+0xd0>)
 800132a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000124 	.word	0x20000124
 8001344:	2000004c 	.word	0x2000004c
 8001348:	20000130 	.word	0x20000130
 800134c:	20000140 	.word	0x20000140
 8001350:	2000012c 	.word	0x2000012c
 8001354:	20000050 	.word	0x20000050
 8001358:	e000ed04 	.word	0xe000ed04

0800135c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001364:	f7ff f8ec 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <vTaskDelete+0x18>
 800136e:	4b38      	ldr	r3, [pc, #224]	; (8001450 <vTaskDelete+0xf4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e000      	b.n	8001376 <vTaskDelete+0x1a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3304      	adds	r3, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ffb1 	bl	80002e4 <uxListRemove>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d115      	bne.n	80013b4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	4931      	ldr	r1, [pc, #196]	; (8001454 <vTaskDelete+0xf8>)
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10a      	bne.n	80013b4 <vTaskDelete+0x58>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	2201      	movs	r2, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43da      	mvns	r2, r3
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <vTaskDelete+0xfc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4013      	ands	r3, r2
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <vTaskDelete+0xfc>)
 80013b2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3318      	adds	r3, #24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe ff8f 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <vTaskDelete+0x100>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <vTaskDelete+0x100>)
 80013ce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <vTaskDelete+0xf4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d10b      	bne.n	80013f2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3304      	adds	r3, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <vTaskDelete+0x104>)
 80013e2:	f7fe ff22 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <vTaskDelete+0x108>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <vTaskDelete+0x108>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e009      	b.n	8001406 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <vTaskDelete+0x10c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <vTaskDelete+0x10c>)
 80013fa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fe51 	bl	80020a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001402:	f000 fe5f 	bl	80020c4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001406:	f7ff f8c9 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <vTaskDelete+0x110>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01a      	beq.n	8001448 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <vTaskDelete+0xf4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d115      	bne.n	8001448 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <vTaskDelete+0x114>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <vTaskDelete+0xdc>
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e7fe      	b.n	8001436 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <vTaskDelete+0x118>)
 800143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000004c 	.word	0x2000004c
 8001454:	20000050 	.word	0x20000050
 8001458:	2000012c 	.word	0x2000012c
 800145c:	20000140 	.word	0x20000140
 8001460:	200000f8 	.word	0x200000f8
 8001464:	2000010c 	.word	0x2000010c
 8001468:	20000124 	.word	0x20000124
 800146c:	20000130 	.word	0x20000130
 8001470:	2000014c 	.word	0x2000014c
 8001474:	e000ed04 	.word	0xe000ed04

08001478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <vTaskDelay+0x60>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <vTaskDelay+0x2e>
 8001492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	e7fe      	b.n	80014a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80014a6:	f000 fa33 	bl	8001910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 ff5b 	bl	8002368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80014b2:	f000 fa3b 	bl	800192c <xTaskResumeAll>
 80014b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <vTaskDelay+0x64>)
 80014c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000014c 	.word	0x2000014c
 80014dc:	e000ed04 	.word	0xe000ed04

080014e0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d909      	bls.n	8001508 <vTaskPrioritySet+0x28>
 80014f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e7fe      	b.n	8001506 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d901      	bls.n	8001512 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800150e:	2304      	movs	r3, #4
 8001510:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001512:	f7ff f815 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <vTaskPrioritySet+0x42>
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <vTaskPrioritySet+0x14c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	e000      	b.n	8001524 <vTaskPrioritySet+0x44>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d074      	beq.n	800161e <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	d90d      	bls.n	8001558 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <vTaskPrioritySet+0x14c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	429a      	cmp	r2, r3
 8001544:	d00f      	beq.n	8001566 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <vTaskPrioritySet+0x14c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d809      	bhi.n	8001566 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e006      	b.n	8001566 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <vTaskPrioritySet+0x14c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	429a      	cmp	r2, r3
 8001560:	d101      	bne.n	8001566 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	429a      	cmp	r2, r3
 8001576:	d102      	bne.n	800157e <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db04      	blt.n	8001596 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1c3 0205 	rsb	r2, r3, #5
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6959      	ldr	r1, [r3, #20]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <vTaskPrioritySet+0x150>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4299      	cmp	r1, r3
 80015aa:	d101      	bne.n	80015b0 <vTaskPrioritySet+0xd0>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <vTaskPrioritySet+0xd2>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d028      	beq.n	8001608 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	3304      	adds	r3, #4
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe92 	bl	80002e4 <uxListRemove>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80015c6:	2201      	movs	r2, #1
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <vTaskPrioritySet+0x154>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4013      	ands	r3, r2
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <vTaskPrioritySet+0x154>)
 80015d8:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <vTaskPrioritySet+0x154>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <vTaskPrioritySet+0x154>)
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <vTaskPrioritySet+0x150>)
 80015fa:	441a      	add	r2, r3
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3304      	adds	r3, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7fe fe11 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <vTaskPrioritySet+0x158>)
 8001610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800161e:	f7fe ffbd 	bl	800059c <vPortExitCritical>
	}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000004c 	.word	0x2000004c
 8001630:	20000050 	.word	0x20000050
 8001634:	2000012c 	.word	0x2000012c
 8001638:	e000ed04 	.word	0xe000ed04

0800163c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001644:	f7fe ff7c 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <vTaskSuspend+0x18>
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <vTaskSuspend+0xf0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	e000      	b.n	8001656 <vTaskSuspend+0x1a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3304      	adds	r3, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fe41 	bl	80002e4 <uxListRemove>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d115      	bne.n	8001694 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	4930      	ldr	r1, [pc, #192]	; (8001730 <vTaskSuspend+0xf4>)
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10a      	bne.n	8001694 <vTaskSuspend+0x58>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	2201      	movs	r2, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <vTaskSuspend+0xf8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4013      	ands	r3, r2
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <vTaskSuspend+0xf8>)
 8001692:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3318      	adds	r3, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fe1f 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4822      	ldr	r0, [pc, #136]	; (8001738 <vTaskSuspend+0xfc>)
 80016ae:	f7fe fdbc 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80016b2:	f7fe ff73 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <vTaskSuspend+0x100>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80016be:	f7fe ff3f 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80016c2:	f000 fcff 	bl	80020c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80016c6:	f7fe ff69 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <vTaskSuspend+0xf0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d126      	bne.n	8001722 <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <vTaskSuspend+0x100>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d016      	beq.n	800170a <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <vTaskSuspend+0x104>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <vTaskSuspend+0xbc>
 80016e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e8:	f383 8811 	msr	BASEPRI, r3
 80016ec:	f3bf 8f6f 	isb	sy
 80016f0:	f3bf 8f4f 	dsb	sy
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	e7fe      	b.n	80016f6 <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <vTaskSuspend+0x108>)
 80016fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001708:	e00b      	b.n	8001722 <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <vTaskSuspend+0xfc>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <vTaskSuspend+0x10c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d103      	bne.n	800171e <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <vTaskSuspend+0xf0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
	}
 800171c:	e001      	b.n	8001722 <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 800171e:	f000 fa6d 	bl	8001bfc <vTaskSwitchContext>
	}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000004c 	.word	0x2000004c
 8001730:	20000050 	.word	0x20000050
 8001734:	2000012c 	.word	0x2000012c
 8001738:	20000110 	.word	0x20000110
 800173c:	20000130 	.word	0x20000130
 8001740:	2000014c 	.word	0x2000014c
 8001744:	e000ed04 	.word	0xe000ed04
 8001748:	20000124 	.word	0x20000124

0800174c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <prvTaskIsTaskSuspended+0x2a>
 8001762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001766:	f383 8811 	msr	BASEPRI, r3
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	f3bf 8f4f 	dsb	sy
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e7fe      	b.n	8001774 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <prvTaskIsTaskSuspended+0x6c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <prvTaskIsTaskSuspended+0x38>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <prvTaskIsTaskSuspended+0x3a>
 8001784:	2300      	movs	r3, #0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00f      	beq.n	80017aa <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <prvTaskIsTaskSuspended+0x70>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00a      	beq.n	80017aa <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <prvTaskIsTaskSuspended+0x54>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <prvTaskIsTaskSuspended+0x56>
 80017a0:	2300      	movs	r3, #0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80017aa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80017ac:	4618      	mov	r0, r3
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000110 	.word	0x20000110
 80017bc:	200000e4 	.word	0x200000e4

080017c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <vTaskResume+0x26>
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	e7fe      	b.n	80017e4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d039      	beq.n	8001860 <vTaskResume+0xa0>
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <vTaskResume+0xa8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d034      	beq.n	8001860 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80017f6:	f7fe fea3 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff ffa6 	bl	800174c <prvTaskIsTaskSuspended>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d02a      	beq.n	800185c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd6a 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2201      	movs	r2, #1
 8001816:	409a      	lsls	r2, r3
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <vTaskResume+0xac>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4313      	orrs	r3, r2
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <vTaskResume+0xac>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <vTaskResume+0xb0>)
 8001830:	441a      	add	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7fe fcf6 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <vTaskResume+0xa8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	429a      	cmp	r2, r3
 800184a:	d307      	bcc.n	800185c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <vTaskResume+0xb4>)
 800184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800185c:	f7fe fe9e 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000004c 	.word	0x2000004c
 800186c:	2000012c 	.word	0x2000012c
 8001870:	20000050 	.word	0x20000050
 8001874:	e000ed04 	.word	0xe000ed04

08001878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <vTaskStartScheduler+0x80>)
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2282      	movs	r2, #130	; 0x82
 800188a:	491c      	ldr	r1, [pc, #112]	; (80018fc <vTaskStartScheduler+0x84>)
 800188c:	481c      	ldr	r0, [pc, #112]	; (8001900 <vTaskStartScheduler+0x88>)
 800188e:	f7ff fc33 	bl	80010f8 <xTaskCreate>
 8001892:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800189a:	f000 fdcb 	bl	8002434 <xTimerCreateTimerTask>
 800189e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d115      	bne.n	80018d2 <vTaskStartScheduler+0x5a>
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <vTaskStartScheduler+0x8c>)
 80018ba:	f04f 32ff 	mov.w	r2, #4294967295
 80018be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <vTaskStartScheduler+0x90>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <vTaskStartScheduler+0x94>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80018cc:	f7fe fdac 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80018d0:	e00d      	b.n	80018ee <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d109      	bne.n	80018ee <vTaskStartScheduler+0x76>
 80018da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018de:	f383 8811 	msr	BASEPRI, r3
 80018e2:	f3bf 8f6f 	isb	sy
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e7fe      	b.n	80018ec <vTaskStartScheduler+0x74>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000148 	.word	0x20000148
 80018fc:	080045b8 	.word	0x080045b8
 8001900:	08001f79 	.word	0x08001f79
 8001904:	20000144 	.word	0x20000144
 8001908:	20000130 	.word	0x20000130
 800190c:	20000128 	.word	0x20000128

08001910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <vTaskSuspendAll+0x18>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <vTaskSuspendAll+0x18>)
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	2000014c 	.word	0x2000014c

0800192c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <xTaskResumeAll+0x114>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <xTaskResumeAll+0x2a>
 8001942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001946:	f383 8811 	msr	BASEPRI, r3
 800194a:	f3bf 8f6f 	isb	sy
 800194e:	f3bf 8f4f 	dsb	sy
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	e7fe      	b.n	8001954 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001956:	f7fe fdf3 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <xTaskResumeAll+0x114>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <xTaskResumeAll+0x114>)
 8001962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <xTaskResumeAll+0x114>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d161      	bne.n	8001a30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <xTaskResumeAll+0x118>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d05d      	beq.n	8001a30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001974:	e02e      	b.n	80019d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <xTaskResumeAll+0x11c>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3318      	adds	r3, #24
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fcae 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3304      	adds	r3, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fca9 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <xTaskResumeAll+0x120>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <xTaskResumeAll+0x120>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <xTaskResumeAll+0x124>)
 80019b2:	441a      	add	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3304      	adds	r3, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7fe fc35 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <xTaskResumeAll+0x128>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d302      	bcc.n	80019d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <xTaskResumeAll+0x12c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <xTaskResumeAll+0x11c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1cc      	bne.n	8001976 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80019e2:	f000 fb6f 	bl	80020c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <xTaskResumeAll+0x130>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019f2:	f000 f847 	bl	8001a84 <xTaskIncrementTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <xTaskResumeAll+0x12c>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f1      	bne.n	80019f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <xTaskResumeAll+0x130>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <xTaskResumeAll+0x12c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <xTaskResumeAll+0x134>)
 8001a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a30:	f7fe fdb4 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001a34:	68bb      	ldr	r3, [r7, #8]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000014c 	.word	0x2000014c
 8001a44:	20000124 	.word	0x20000124
 8001a48:	200000e4 	.word	0x200000e4
 8001a4c:	2000012c 	.word	0x2000012c
 8001a50:	20000050 	.word	0x20000050
 8001a54:	2000004c 	.word	0x2000004c
 8001a58:	20000138 	.word	0x20000138
 8001a5c:	20000134 	.word	0x20000134
 8001a60:	e000ed04 	.word	0xe000ed04

08001a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <xTaskGetTickCount+0x1c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000128 	.word	0x20000128

08001a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <xTaskIncrementTick+0x14c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 808c 	bne.w	8001bb0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <xTaskIncrementTick+0x150>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001aa0:	4a4c      	ldr	r2, [pc, #304]	; (8001bd4 <xTaskIncrementTick+0x150>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11f      	bne.n	8001aec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <xTaskIncrementTick+0x154>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <xTaskIncrementTick+0x46>
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	e7fe      	b.n	8001ac8 <xTaskIncrementTick+0x44>
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <xTaskIncrementTick+0x154>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <xTaskIncrementTick+0x158>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <xTaskIncrementTick+0x154>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <xTaskIncrementTick+0x158>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <xTaskIncrementTick+0x15c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a3e      	ldr	r2, [pc, #248]	; (8001be0 <xTaskIncrementTick+0x15c>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f000 faec 	bl	80020c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <xTaskIncrementTick+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d34d      	bcc.n	8001b92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <xTaskIncrementTick+0x154>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <xTaskIncrementTick+0x80>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <xTaskIncrementTick+0x82>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <xTaskIncrementTick+0x160>)
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	601a      	str	r2, [r3, #0]
					break;
 8001b12:	e03e      	b.n	8001b92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <xTaskIncrementTick+0x154>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d203      	bcs.n	8001b34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b2c:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <xTaskIncrementTick+0x160>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
						break;
 8001b32:	e02e      	b.n	8001b92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fbd3 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3318      	adds	r3, #24
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fbca 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <xTaskIncrementTick+0x164>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <xTaskIncrementTick+0x164>)
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <xTaskIncrementTick+0x168>)
 8001b70:	441a      	add	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3304      	adds	r3, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f7fe fb56 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <xTaskIncrementTick+0x16c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3b4      	bcc.n	8001af6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b90:	e7b1      	b.n	8001af6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <xTaskIncrementTick+0x16c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	4914      	ldr	r1, [pc, #80]	; (8001bec <xTaskIncrementTick+0x168>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d907      	bls.n	8001bba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e004      	b.n	8001bba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <xTaskIncrementTick+0x170>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <xTaskIncrementTick+0x170>)
 8001bb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <xTaskIncrementTick+0x174>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001bc6:	697b      	ldr	r3, [r7, #20]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000014c 	.word	0x2000014c
 8001bd4:	20000128 	.word	0x20000128
 8001bd8:	200000dc 	.word	0x200000dc
 8001bdc:	200000e0 	.word	0x200000e0
 8001be0:	2000013c 	.word	0x2000013c
 8001be4:	20000144 	.word	0x20000144
 8001be8:	2000012c 	.word	0x2000012c
 8001bec:	20000050 	.word	0x20000050
 8001bf0:	2000004c 	.word	0x2000004c
 8001bf4:	20000134 	.word	0x20000134
 8001bf8:	20000138 	.word	0x20000138

08001bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c02:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <vTaskSwitchContext+0xec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <vTaskSwitchContext+0xf0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c10:	e065      	b.n	8001cde <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <vTaskSwitchContext+0xf0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <vTaskSwitchContext+0xf4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d111      	bne.n	8001c54 <vTaskSwitchContext+0x58>
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	3304      	adds	r3, #4
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10b      	bne.n	8001c54 <vTaskSwitchContext+0x58>
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d105      	bne.n	8001c54 <vTaskSwitchContext+0x58>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d008      	beq.n	8001c66 <vTaskSwitchContext+0x6a>
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <vTaskSwitchContext+0xf4>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <vTaskSwitchContext+0xf4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3334      	adds	r3, #52	; 0x34
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f002 f95a 	bl	8003f1a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <vTaskSwitchContext+0xf8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	f1c3 031f 	rsb	r3, r3, #31
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	491e      	ldr	r1, [pc, #120]	; (8001cf8 <vTaskSwitchContext+0xfc>)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	e7fe      	b.n	8001ca2 <vTaskSwitchContext+0xa6>
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <vTaskSwitchContext+0xfc>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d104      	bne.n	8001cd4 <vTaskSwitchContext+0xd8>
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <vTaskSwitchContext+0xf4>)
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000014c 	.word	0x2000014c
 8001cec:	20000138 	.word	0x20000138
 8001cf0:	2000004c 	.word	0x2000004c
 8001cf4:	2000012c 	.word	0x2000012c
 8001cf8:	20000050 	.word	0x20000050

08001cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <vTaskPlaceOnEventList+0x24>
 8001d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e7fe      	b.n	8001d1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <vTaskPlaceOnEventList+0x44>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3318      	adds	r3, #24
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7fe faa2 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d2e:	2101      	movs	r1, #1
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f000 fb19 	bl	8002368 <prvAddCurrentTaskToDelayedList>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000004c 	.word	0x2000004c

08001d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <vTaskPlaceOnEventListRestricted+0x26>
 8001d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5a:	f383 8811 	msr	BASEPRI, r3
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e7fe      	b.n	8001d68 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <vTaskPlaceOnEventListRestricted+0x50>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3318      	adds	r3, #24
 8001d70:	4619      	mov	r1, r3
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7fe fa59 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f000 faee 	bl	8002368 <prvAddCurrentTaskToDelayedList>
	}
 8001d8c:	bf00      	nop
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000004c 	.word	0x2000004c

08001d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <xTaskRemoveFromEventList+0x2a>
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e7fe      	b.n	8001dc0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa8c 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <xTaskRemoveFromEventList+0xac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d11c      	bne.n	8001e0e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fa83 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <xTaskRemoveFromEventList+0xb0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <xTaskRemoveFromEventList+0xb0>)
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <xTaskRemoveFromEventList+0xb4>)
 8001dfe:	441a      	add	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7fe fa0f 	bl	800022a <vListInsertEnd>
 8001e0c:	e005      	b.n	8001e1a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3318      	adds	r3, #24
 8001e12:	4619      	mov	r1, r3
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <xTaskRemoveFromEventList+0xb8>)
 8001e16:	f7fe fa08 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <xTaskRemoveFromEventList+0xbc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d905      	bls.n	8001e34 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <xTaskRemoveFromEventList+0xc0>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e001      	b.n	8001e38 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001e38:	697b      	ldr	r3, [r7, #20]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000014c 	.word	0x2000014c
 8001e48:	2000012c 	.word	0x2000012c
 8001e4c:	20000050 	.word	0x20000050
 8001e50:	200000e4 	.word	0x200000e4
 8001e54:	2000004c 	.word	0x2000004c
 8001e58:	20000138 	.word	0x20000138

08001e5c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <vTaskSetTimeOutState+0x22>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e7fe      	b.n	8001e7c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <vTaskSetTimeOutState+0x40>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <vTaskSetTimeOutState+0x44>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	605a      	str	r2, [r3, #4]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000013c 	.word	0x2000013c
 8001ea0:	20000128 	.word	0x20000128

08001ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <xTaskCheckForTimeOut+0x24>
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e7fe      	b.n	8001ec6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <xTaskCheckForTimeOut+0x3e>
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	e7fe      	b.n	8001ee0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001ee2:	f7fe fb2d 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <xTaskCheckForTimeOut+0xb4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d102      	bne.n	8001efc <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e026      	b.n	8001f4a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <xTaskCheckForTimeOut+0xb8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d007      	beq.n	8001f18 <xTaskCheckForTimeOut+0x74>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d802      	bhi.n	8001f18 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e018      	b.n	8001f4a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d20e      	bcs.n	8001f46 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1acb      	subs	r3, r1, r3
 8001f34:	441a      	add	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff8e 	bl	8001e5c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e001      	b.n	8001f4a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001f4a:	f7fe fb27 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001f4e:	697b      	ldr	r3, [r7, #20]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000128 	.word	0x20000128
 8001f5c:	2000013c 	.word	0x2000013c

08001f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <vTaskMissedYield+0x14>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	20000138 	.word	0x20000138

08001f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f80:	f000 f854 	bl	800202c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <prvIdleTask+0x2c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d907      	bls.n	8001f9c <prvIdleTask+0x24>
			{
				taskYIELD();
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <prvIdleTask+0x30>)
 8001f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001f9c:	f001 ffc3 	bl	8003f26 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001fa0:	e7ee      	b.n	8001f80 <prvIdleTask+0x8>
 8001fa2:	bf00      	nop
 8001fa4:	20000050 	.word	0x20000050
 8001fa8:	e000ed04 	.word	0xe000ed04

08001fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	e00c      	b.n	8001fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <prvInitialiseTaskLists+0x60>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f902 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d9ef      	bls.n	8001fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <prvInitialiseTaskLists+0x64>)
 8001fda:	f7fe f8f9 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <prvInitialiseTaskLists+0x68>)
 8001fe0:	f7fe f8f6 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <prvInitialiseTaskLists+0x6c>)
 8001fe6:	f7fe f8f3 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <prvInitialiseTaskLists+0x70>)
 8001fec:	f7fe f8f0 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <prvInitialiseTaskLists+0x74>)
 8001ff2:	f7fe f8ed 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <prvInitialiseTaskLists+0x78>)
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <prvInitialiseTaskLists+0x64>)
 8001ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <prvInitialiseTaskLists+0x7c>)
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <prvInitialiseTaskLists+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000050 	.word	0x20000050
 8002010:	200000b4 	.word	0x200000b4
 8002014:	200000c8 	.word	0x200000c8
 8002018:	200000e4 	.word	0x200000e4
 800201c:	200000f8 	.word	0x200000f8
 8002020:	20000110 	.word	0x20000110
 8002024:	200000dc 	.word	0x200000dc
 8002028:	200000e0 	.word	0x200000e0

0800202c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002032:	e028      	b.n	8002086 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002034:	f7ff fc6c 	bl	8001910 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <prvCheckTasksWaitingTermination+0x6c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002048:	f7ff fc70 	bl	800192c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002052:	f7fe fa75 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <prvCheckTasksWaitingTermination+0x6c>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3304      	adds	r3, #4
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f93e 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <prvCheckTasksWaitingTermination+0x70>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <prvCheckTasksWaitingTermination+0x70>)
 8002070:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <prvCheckTasksWaitingTermination+0x74>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <prvCheckTasksWaitingTermination+0x74>)
 800207a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800207c:	f7fe fa8e 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f000 f80f 	bl	80020a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <prvCheckTasksWaitingTermination+0x74>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1d2      	bne.n	8002034 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200000f8 	.word	0x200000f8
 800209c:	20000124 	.word	0x20000124
 80020a0:	2000010c 	.word	0x2000010c

080020a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 f8cf 	bl	8003254 <vPortFree>
			vPortFree( pxTCB );
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 f8cc 	bl	8003254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <prvResetNextTaskUnblockTime+0x44>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <prvResetNextTaskUnblockTime+0x14>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <prvResetNextTaskUnblockTime+0x16>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <prvResetNextTaskUnblockTime+0x48>)
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020e6:	e008      	b.n	80020fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <prvResetNextTaskUnblockTime+0x44>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <prvResetNextTaskUnblockTime+0x48>)
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200000dc 	.word	0x200000dc
 800210c:	20000144 	.word	0x20000144

08002110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <xTaskGetSchedulerState+0x34>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800211e:	2301      	movs	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e008      	b.n	8002136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <xTaskGetSchedulerState+0x38>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800212c:	2302      	movs	r3, #2
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002136:	687b      	ldr	r3, [r7, #4]
	}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000130 	.word	0x20000130
 8002148:	2000014c 	.word	0x2000014c

0800214c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d062      	beq.n	8002224 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <vTaskPriorityInherit+0xe0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	429a      	cmp	r2, r3
 800216a:	d25b      	bcs.n	8002224 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db06      	blt.n	8002182 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <vTaskPriorityInherit+0xe0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f1c3 0205 	rsb	r2, r3, #5
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6959      	ldr	r1, [r3, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4a27      	ldr	r2, [pc, #156]	; (8002230 <vTaskPriorityInherit+0xe4>)
 8002194:	4413      	add	r3, r2
 8002196:	4299      	cmp	r1, r3
 8002198:	d101      	bne.n	800219e <vTaskPriorityInherit+0x52>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <vTaskPriorityInherit+0x54>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03a      	beq.n	800221a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f89b 	bl	80002e4 <uxListRemove>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d115      	bne.n	80021e0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b8:	491d      	ldr	r1, [pc, #116]	; (8002230 <vTaskPriorityInherit+0xe4>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <vTaskPriorityInherit+0x94>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	2201      	movs	r2, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <vTaskPriorityInherit+0xe8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4013      	ands	r3, r2
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <vTaskPriorityInherit+0xe8>)
 80021de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <vTaskPriorityInherit+0xe0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2201      	movs	r2, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <vTaskPriorityInherit+0xe8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <vTaskPriorityInherit+0xe8>)
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4a09      	ldr	r2, [pc, #36]	; (8002230 <vTaskPriorityInherit+0xe4>)
 800220a:	441a      	add	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7fe f809 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002218:	e004      	b.n	8002224 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <vTaskPriorityInherit+0xe0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000004c 	.word	0x2000004c
 8002230:	20000050 	.word	0x20000050
 8002234:	2000012c 	.word	0x2000012c

08002238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d06c      	beq.n	8002328 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <xTaskPriorityDisinherit+0xfc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d009      	beq.n	800226c <xTaskPriorityDisinherit+0x34>
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e7fe      	b.n	800226a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <xTaskPriorityDisinherit+0x50>
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	e7fe      	b.n	8002286 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	429a      	cmp	r2, r3
 800229c:	d044      	beq.n	8002328 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d140      	bne.n	8002328 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3304      	adds	r3, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f81a 	bl	80002e4 <uxListRemove>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ba:	491f      	ldr	r1, [pc, #124]	; (8002338 <xTaskPriorityDisinherit+0x100>)
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <xTaskPriorityDisinherit+0xaa>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <xTaskPriorityDisinherit+0x104>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4013      	ands	r3, r2
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <xTaskPriorityDisinherit+0x104>)
 80022e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f1c3 0205 	rsb	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <xTaskPriorityDisinherit+0x104>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <xTaskPriorityDisinherit+0x104>)
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4a08      	ldr	r2, [pc, #32]	; (8002338 <xTaskPriorityDisinherit+0x100>)
 8002316:	441a      	add	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f7fd ff83 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002324:	2301      	movs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002328:	697b      	ldr	r3, [r7, #20]
	}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000004c 	.word	0x2000004c
 8002338:	20000050 	.word	0x20000050
 800233c:	2000012c 	.word	0x2000012c

08002340 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <pvTaskIncrementMutexHeldCount+0x24>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <pvTaskIncrementMutexHeldCount+0x24>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002352:	3201      	adds	r2, #1
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002356:	4b03      	ldr	r3, [pc, #12]	; (8002364 <pvTaskIncrementMutexHeldCount+0x24>)
 8002358:	681b      	ldr	r3, [r3, #0]
	}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	2000004c 	.word	0x2000004c

08002368 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ffb0 	bl	80002e4 <uxListRemove>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2201      	movs	r2, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4013      	ands	r3, r2
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d10a      	bne.n	80023c0 <prvAddCurrentTaskToDelayedList+0x58>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	481a      	ldr	r0, [pc, #104]	; (8002424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80023ba:	f7fd ff36 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023be:	e026      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d209      	bcs.n	80023ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7fd ff44 	bl	8000272 <vListInsert>
}
 80023ea:	e010      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <prvAddCurrentTaskToDelayedList+0xc4>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3304      	adds	r3, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fd ff3a 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d202      	bcs.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000128 	.word	0x20000128
 800241c:	2000004c 	.word	0x2000004c
 8002420:	2000012c 	.word	0x2000012c
 8002424:	20000110 	.word	0x20000110
 8002428:	200000e0 	.word	0x200000e0
 800242c:	200000dc 	.word	0x200000dc
 8002430:	20000144 	.word	0x20000144

08002434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800243e:	f000 fadd 	bl	80029fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <xTimerCreateTimerTask+0x54>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <xTimerCreateTimerTask+0x58>)
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2303      	movs	r3, #3
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002458:	490d      	ldr	r1, [pc, #52]	; (8002490 <xTimerCreateTimerTask+0x5c>)
 800245a:	480e      	ldr	r0, [pc, #56]	; (8002494 <xTimerCreateTimerTask+0x60>)
 800245c:	f7fe fe4c 	bl	80010f8 <xTaskCreate>
 8002460:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <xTimerCreateTimerTask+0x48>
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	e7fe      	b.n	800247a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800247c:	687b      	ldr	r3, [r7, #4]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000180 	.word	0x20000180
 800248c:	20000184 	.word	0x20000184
 8002490:	080045c0 	.word	0x080045c0
 8002494:	0800264d 	.word	0x0800264d

08002498 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80024a6:	2028      	movs	r0, #40	; 0x28
 80024a8:	f000 fe0e 	bl	80030c8 <pvPortMalloc>
 80024ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f805 	bl	80024d2 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80024c8:	697b      	ldr	r3, [r7, #20]
	}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <prvInitialiseNewTimer+0x28>
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e7fe      	b.n	80024f8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002500:	f000 fa7c 	bl	80029fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd fe72 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <xTimerGenericCommand+0x2c>
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	e7fe      	b.n	800255e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <xTimerGenericCommand+0x94>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02a      	beq.n	80025be <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b05      	cmp	r3, #5
 8002578:	dc18      	bgt.n	80025ac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800257a:	f7ff fdc9 	bl	8002110 <xTaskGetSchedulerState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b02      	cmp	r3, #2
 8002582:	d109      	bne.n	8002598 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <xTimerGenericCommand+0x94>)
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	f107 0114 	add.w	r1, r7, #20
 800258c:	2300      	movs	r3, #0
 800258e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002590:	f7fe f9a6 	bl	80008e0 <xQueueGenericSend>
 8002594:	6278      	str	r0, [r7, #36]	; 0x24
 8002596:	e012      	b.n	80025be <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <xTimerGenericCommand+0x94>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f107 0114 	add.w	r1, r7, #20
 80025a0:	2300      	movs	r3, #0
 80025a2:	2200      	movs	r2, #0
 80025a4:	f7fe f99c 	bl	80008e0 <xQueueGenericSend>
 80025a8:	6278      	str	r0, [r7, #36]	; 0x24
 80025aa:	e008      	b.n	80025be <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <xTimerGenericCommand+0x94>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	f107 0114 	add.w	r1, r7, #20
 80025b4:	2300      	movs	r3, #0
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	f7fe fa8c 	bl	8000ad4 <xQueueGenericSendFromISR>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000180 	.word	0x20000180

080025cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <prvProcessExpiredTimer+0x7c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fe7d 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d121      	bne.n	8002636 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	18d1      	adds	r1, r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f000 f8c8 	bl	8002794 <prvInsertTimerInActiveList>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d015      	beq.n	8002636 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800260a:	2300      	movs	r3, #0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	2100      	movs	r1, #0
 8002614:	6978      	ldr	r0, [r7, #20]
 8002616:	f7ff ff8d 	bl	8002534 <xTimerGenericCommand>
 800261a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <prvProcessExpiredTimer+0x6a>
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e7fe      	b.n	8002634 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	4798      	blx	r3
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000178 	.word	0x20000178

0800264c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f857 	bl	800270c <prvGetNextExpireTime>
 800265e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4619      	mov	r1, r3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f803 	bl	8002670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800266a:	f000 f8d5 	bl	8002818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800266e:	e7f1      	b.n	8002654 <prvTimerTask+0x8>

08002670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800267a:	f7ff f949 	bl	8001910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f866 	bl	8002754 <prvSampleTimeNow>
 8002688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d130      	bne.n	80026f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <prvProcessTimerOrBlockTask+0x3c>
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	429a      	cmp	r2, r3
 800269c:	d806      	bhi.n	80026ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800269e:	f7ff f945 	bl	800192c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff91 	bl	80025cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80026aa:	e024      	b.n	80026f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <prvProcessTimerOrBlockTask+0x90>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <prvProcessTimerOrBlockTask+0x94>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fcdd 	bl	8001090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80026d6:	f7ff f929 	bl	800192c <xTaskResumeAll>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <prvProcessTimerOrBlockTask+0x98>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
}
 80026f0:	e001      	b.n	80026f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80026f2:	f7ff f91b 	bl	800192c <xTaskResumeAll>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000017c 	.word	0x2000017c
 8002704:	20000180 	.word	0x20000180
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <prvGetNextExpireTime+0x44>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <prvGetNextExpireTime+0x44>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e001      	b.n	8002742 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000178 	.word	0x20000178

08002754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800275c:	f7ff f982 	bl	8001a64 <xTaskGetTickCount>
 8002760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <prvSampleTimeNow+0x3c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d205      	bcs.n	8002778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800276c:	f000 f8e6 	bl	800293c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e002      	b.n	800277e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800277e:	4a04      	ldr	r2, [pc, #16]	; (8002790 <prvSampleTimeNow+0x3c>)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000188 	.word	0x20000188

08002794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d812      	bhi.n	80027e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	1ad2      	subs	r2, r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e01b      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <prvInsertTimerInActiveList+0x7c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7fd fd4a 	bl	8000272 <vListInsert>
 80027de:	e012      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d206      	bcs.n	80027f6 <prvInsertTimerInActiveList+0x62>
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e007      	b.n	8002806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <prvInsertTimerInActiveList+0x80>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fd fd36 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002806:	697b      	ldr	r3, [r7, #20]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	2000017c 	.word	0x2000017c
 8002814:	20000178 	.word	0x20000178

08002818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800281e:	e07a      	b.n	8002916 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db77      	blt.n	8002916 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	3304      	adds	r3, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fd54 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff88 	bl	8002754 <prvSampleTimeNow>
 8002844:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b09      	cmp	r3, #9
 800284a:	d863      	bhi.n	8002914 <prvProcessReceivedCommands+0xfc>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <prvProcessReceivedCommands+0x3c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	0800287d 	.word	0x0800287d
 8002858:	0800287d 	.word	0x0800287d
 800285c:	0800287d 	.word	0x0800287d
 8002860:	08002917 	.word	0x08002917
 8002864:	080028d7 	.word	0x080028d7
 8002868:	0800290d 	.word	0x0800290d
 800286c:	0800287d 	.word	0x0800287d
 8002870:	0800287d 	.word	0x0800287d
 8002874:	08002917 	.word	0x08002917
 8002878:	080028d7 	.word	0x080028d7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	18d1      	adds	r1, r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a3a      	ldr	r2, [r7, #32]
 8002888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800288a:	f7ff ff83 	bl	8002794 <prvInsertTimerInActiveList>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d040      	beq.n	8002916 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800289a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d138      	bne.n	8002916 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	441a      	add	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028b6:	f7ff fe3d 	bl	8002534 <xTimerGenericCommand>
 80028ba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d129      	bne.n	8002916 <prvProcessReceivedCommands+0xfe>
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e7fe      	b.n	80028d4 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <prvProcessReceivedCommands+0xe0>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e7fe      	b.n	80028f6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	18d1      	adds	r1, r2, r3
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002906:	f7ff ff45 	bl	8002794 <prvInsertTimerInActiveList>
					break;
 800290a:	e004      	b.n	8002916 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800290c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800290e:	f000 fca1 	bl	8003254 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002912:	e000      	b.n	8002916 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <prvProcessReceivedCommands+0x120>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f107 0108 	add.w	r1, r7, #8
 800291e:	2300      	movs	r3, #0
 8002920:	2200      	movs	r2, #0
 8002922:	f7fe f96b 	bl	8000bfc <xQueueGenericReceive>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f47f af79 	bne.w	8002820 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	; 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000180 	.word	0x20000180

0800293c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002942:	e044      	b.n	80029ce <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3304      	adds	r3, #4
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fcc1 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	6938      	ldr	r0, [r7, #16]
 8002968:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d12d      	bne.n	80029ce <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d90e      	bls.n	80029a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7fd fc69 	bl	8000272 <vListInsert>
 80029a0:	e015      	b.n	80029ce <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	2100      	movs	r1, #0
 80029ac:	6938      	ldr	r0, [r7, #16]
 80029ae:	f7ff fdc1 	bl	8002534 <xTimerGenericCommand>
 80029b2:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <prvSwitchTimerLists+0x92>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	e7fe      	b.n	80029cc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1b5      	bne.n	8002944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <prvSwitchTimerLists+0xbc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <prvSwitchTimerLists+0xb8>)
 80029e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <prvSwitchTimerLists+0xbc>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000178 	.word	0x20000178
 80029f8:	2000017c 	.word	0x2000017c

080029fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a00:	f7fd fd9e 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <prvCheckForValidListAndQueue+0x54>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002a0c:	4811      	ldr	r0, [pc, #68]	; (8002a54 <prvCheckForValidListAndQueue+0x58>)
 8002a0e:	f7fd fbdf 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a12:	4811      	ldr	r0, [pc, #68]	; (8002a58 <prvCheckForValidListAndQueue+0x5c>)
 8002a14:	f7fd fbdc 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <prvCheckForValidListAndQueue+0x60>)
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <prvCheckForValidListAndQueue+0x58>)
 8002a1c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <prvCheckForValidListAndQueue+0x64>)
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <prvCheckForValidListAndQueue+0x5c>)
 8002a22:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a24:	2200      	movs	r2, #0
 8002a26:	210c      	movs	r1, #12
 8002a28:	2005      	movs	r0, #5
 8002a2a:	f7fd ff01 	bl	8000830 <xQueueGenericCreate>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <prvCheckForValidListAndQueue+0x54>)
 8002a32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <prvCheckForValidListAndQueue+0x54>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <prvCheckForValidListAndQueue+0x54>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4908      	ldr	r1, [pc, #32]	; (8002a64 <prvCheckForValidListAndQueue+0x68>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fafc 	bl	8001040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a48:	f7fd fda8 	bl	800059c <vPortExitCritical>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000180 	.word	0x20000180
 8002a54:	20000150 	.word	0x20000150
 8002a58:	20000164 	.word	0x20000164
 8002a5c:	20000178 	.word	0x20000178
 8002a60:	2000017c 	.word	0x2000017c
 8002a64:	080045c8 	.word	0x080045c8

08002a68 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <DAC_SetChannel1Data+0x34>)
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	3308      	adds	r3, #8
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007400 	.word	0x40007400

08002aa0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <DMA_Init+0xac>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002aca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ad6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ae2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002aee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60da      	str	r2, [r3, #12]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	f01c803f 	.word	0xf01c803f

08002b50 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002b6e:	e005      	b.n	8002b7c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0201 	bic.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	601a      	str	r2, [r3, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e001      	b.n	8002baa <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <DMA_GetFlagStatus+0x6c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d802      	bhi.n	8002bd8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <DMA_GetFlagStatus+0x70>)
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e001      	b.n	8002bdc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <DMA_GetFlagStatus+0x74>)
 8002bda:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e002      	b.n	8002bf4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002bfa:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
 8002c0e:	e001      	b.n	8002c14 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	4002640f 	.word	0x4002640f
 8002c28:	40026000 	.word	0x40026000
 8002c2c:	40026400 	.word	0x40026400

08002c30 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <DMA_ClearFlag+0x50>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d802      	bhi.n	8002c48 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <DMA_ClearFlag+0x54>)
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e001      	b.n	8002c4c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <DMA_ClearFlag+0x58>)
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c5c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002c64:	e006      	b.n	8002c74 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c6c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6093      	str	r3, [r2, #8]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	4002640f 	.word	0x4002640f
 8002c84:	40026000 	.word	0x40026000
 8002c88:	40026400 	.word	0x40026400

08002c8c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e076      	b.n	8002d96 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d165      	bne.n	8002d90 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2103      	movs	r1, #3
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	791b      	ldrb	r3, [r3, #4]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	791b      	ldrb	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d003      	beq.n	8002d02 <GPIO_Init+0x76>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d12e      	bne.n	8002d60 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	795b      	ldrb	r3, [r3, #5]
 8002d20:	4619      	mov	r1, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	408b      	lsls	r3, r1
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	401a      	ands	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	7992      	ldrb	r2, [r2, #6]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	b292      	uxth	r2, r2
 8002d54:	fa01 f202 	lsl.w	r2, r1, r2
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	79db      	ldrb	r3, [r3, #7]
 8002d80:	4619      	mov	r1, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d985      	bls.n	8002ca8 <GPIO_Init+0x1c>
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002dc6:	e006      	b.n	8002dd6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002dc8:	4906      	ldr	r1, [pc, #24]	; (8002de4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	819a      	strh	r2, [r3, #12]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	891b      	ldrh	r3, [r3, #8]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e001      	b.n	8002e30 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <STM_EVAL_LEDInit+0x50>)
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ffa7 	bl	8002da8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <STM_EVAL_LEDInit+0x54>)
 8002e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e64:	2301      	movs	r3, #1
 8002e66:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e70:	2302      	movs	r3, #2
 8002e72:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <STM_EVAL_LEDInit+0x58>)
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff02 	bl	8002c8c <GPIO_Init>
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	08004718 	.word	0x08004718
 8002e94:	08004710 	.word	0x08004710
 8002e98:	20000004 	.word	0x20000004

08002e9c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <STM_EVAL_LEDOn+0x28>)
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <STM_EVAL_LEDOn+0x2c>)
 8002eb2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002eb6:	831a      	strh	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	08004710 	.word	0x08004710

08002ecc <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <STM_EVAL_LEDOff+0x28>)
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4905      	ldr	r1, [pc, #20]	; (8002ef8 <STM_EVAL_LEDOff+0x2c>)
 8002ee2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002ee6:	835a      	strh	r2, [r3, #26]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	08004710 	.word	0x08004710

08002efc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002f00:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <Audio_MAL_IRQHandler+0xec>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7ff fe54 	bl	8002bb8 <DMA_GetFlagStatus>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d064      	beq.n	8002fe0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002f16:	4b35      	ldr	r3, [pc, #212]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04c      	beq.n	8002fb8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002f1e:	bf00      	nop
 8002f20:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe2f 	bl	8002b88 <DMA_GetCmdStatus>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f7      	bne.n	8002f20 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <Audio_MAL_IRQHandler+0xec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff fe78 	bl	8002c30 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <Audio_MAL_IRQHandler+0xf4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <Audio_MAL_IRQHandler+0xf8>)
 8002f48:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	4293      	cmp	r3, r2
 8002f54:	bf28      	it	cs
 8002f56:	4613      	movcs	r3, r2
 8002f58:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <Audio_MAL_IRQHandler+0xf8>)
 8002f5a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4924      	ldr	r1, [pc, #144]	; (8002ff4 <Audio_MAL_IRQHandler+0xf8>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd9c 	bl	8002aa0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fdee 	bl	8002b50 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <Audio_MAL_IRQHandler+0xf4>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d203      	bcs.n	8002f8a <Audio_MAL_IRQHandler+0x8e>
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	e000      	b.n	8002f8c <Audio_MAL_IRQHandler+0x90>
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <Audio_MAL_IRQHandler+0xfc>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <Audio_MAL_IRQHandler+0xf4>)
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f9e:	428b      	cmp	r3, r1
 8002fa0:	bf28      	it	cs
 8002fa2:	460b      	movcs	r3, r1
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <Audio_MAL_IRQHandler+0xf0>)
 8002fa8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fdcd 	bl	8002b50 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002fb6:	e013      	b.n	8002fe0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fdc6 	bl	8002b50 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <Audio_MAL_IRQHandler+0xe8>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <Audio_MAL_IRQHandler+0xec>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7ff fe2e 	bl	8002c30 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <Audio_MAL_IRQHandler+0xf4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f83c 	bl	8003058 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	2000001c 	.word	0x2000001c
 8002fe8:	20000020 	.word	0x20000020
 8002fec:	20000014 	.word	0x20000014
 8002ff0:	200191f8 	.word	0x200191f8
 8002ff4:	20019238 	.word	0x20019238
 8002ff8:	0001fffe 	.word	0x0001fffe

08002ffc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003000:	f7ff ff7c 	bl	8002efc <Audio_MAL_IRQHandler>
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}

08003008 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800300c:	f7ff ff76 	bl	8002efc <Audio_MAL_IRQHandler>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003018:	2102      	movs	r1, #2
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <SPI3_IRQHandler+0x3c>)
 800301c:	f7ff fef3 	bl	8002e06 <SPI_I2S_GetFlagStatus>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d011      	beq.n	800304a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <SPI3_IRQHandler+0x40>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d106      	bne.n	800303c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800302e:	f000 f81e 	bl	800306e <EVAL_AUDIO_GetSampleCallBack>
 8003032:	4603      	mov	r3, r0
 8003034:	4619      	mov	r1, r3
 8003036:	2004      	movs	r0, #4
 8003038:	f7ff fd16 	bl	8002a68 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800303c:	f000 f817 	bl	800306e <EVAL_AUDIO_GetSampleCallBack>
 8003040:	4603      	mov	r3, r0
 8003042:	4619      	mov	r1, r3
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <SPI3_IRQHandler+0x3c>)
 8003046:	f7ff fecf 	bl	8002de8 <SPI_I2S_SendData>
  }
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40003c00 	.word	0x40003c00
 8003054:	20000018 	.word	0x20000018

08003058 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003062:	bf00      	nop
}
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030d4:	f7fe fc1c 	bl	8001910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <pvPortMalloc+0x178>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030e0:	f000 f91c 	bl	800331c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030e4:	4b57      	ldr	r3, [pc, #348]	; (8003244 <pvPortMalloc+0x17c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 808c 	bne.w	800320a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01c      	beq.n	8003132 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80030f8:	2208      	movs	r2, #8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	2b00      	cmp	r3, #0
 8003108:	d013      	beq.n	8003132 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f023 0307 	bic.w	r3, r3, #7
 8003110:	3308      	adds	r3, #8
 8003112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <pvPortMalloc+0x6a>
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e7fe      	b.n	8003130 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d068      	beq.n	800320a <pvPortMalloc+0x142>
 8003138:	4b43      	ldr	r3, [pc, #268]	; (8003248 <pvPortMalloc+0x180>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d863      	bhi.n	800320a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <pvPortMalloc+0x184>)
 8003144:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <pvPortMalloc+0x184>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800314c:	e004      	b.n	8003158 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d203      	bcs.n	800316a <pvPortMalloc+0xa2>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f1      	bne.n	800314e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <pvPortMalloc+0x178>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	429a      	cmp	r2, r3
 8003172:	d04a      	beq.n	800320a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	4413      	add	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad2      	subs	r2, r2, r3
 800318e:	2308      	movs	r3, #8
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	429a      	cmp	r2, r3
 8003194:	d91e      	bls.n	80031d4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <pvPortMalloc+0xf4>
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e7fe      	b.n	80031ba <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f000 f906 	bl	80033e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <pvPortMalloc+0x180>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <pvPortMalloc+0x180>)
 80031e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <pvPortMalloc+0x180>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <pvPortMalloc+0x188>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d203      	bcs.n	80031f6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <pvPortMalloc+0x180>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a17      	ldr	r2, [pc, #92]	; (8003250 <pvPortMalloc+0x188>)
 80031f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <pvPortMalloc+0x17c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	431a      	orrs	r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800320a:	f7fe fb8f 	bl	800192c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003214:	f000 fe7e 	bl	8003f14 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <pvPortMalloc+0x16e>
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e7fe      	b.n	8003234 <pvPortMalloc+0x16c>
	return pvReturn;
 8003236:	69fb      	ldr	r3, [r7, #28]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20019194 	.word	0x20019194
 8003244:	200191a0 	.word	0x200191a0
 8003248:	20019198 	.word	0x20019198
 800324c:	2001918c 	.word	0x2001918c
 8003250:	2001919c 	.word	0x2001919c

08003254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d046      	beq.n	80032f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003266:	2308      	movs	r3, #8
 8003268:	425b      	negs	r3, r3
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4413      	add	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <vPortFree+0xa8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <vPortFree+0x42>
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e7fe      	b.n	8003294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <vPortFree+0x5e>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	e7fe      	b.n	80032b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <vPortFree+0xa8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d019      	beq.n	80032f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <vPortFree+0xa8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032d8:	f7fe fb1a 	bl	8001910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <vPortFree+0xac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4413      	add	r3, r2
 80032e6:	4a06      	ldr	r2, [pc, #24]	; (8003300 <vPortFree+0xac>)
 80032e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032ea:	6938      	ldr	r0, [r7, #16]
 80032ec:	f000 f878 	bl	80033e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80032f0:	f7fe fb1c 	bl	800192c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032f4:	bf00      	nop
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200191a0 	.word	0x200191a0
 8003300:	20019198 	.word	0x20019198

08003304 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <xPortGetFreeHeapSize+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20019198 	.word	0x20019198

0800331c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003322:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <prvHeapInit+0xac>)
 800332a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3307      	adds	r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0307 	bic.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	4a1f      	ldr	r2, [pc, #124]	; (80033c8 <prvHeapInit+0xac>)
 800334c:	4413      	add	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003354:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <prvHeapInit+0xb0>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <prvHeapInit+0xb0>)
 800335c:	2200      	movs	r2, #0
 800335e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003368:	2208      	movs	r2, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <prvHeapInit+0xb4>)
 800337c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <prvHeapInit+0xb4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <prvHeapInit+0xb4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	1ad2      	subs	r2, r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <prvHeapInit+0xb4>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <prvHeapInit+0xb8>)
 80033aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <prvHeapInit+0xbc>)
 80033b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <prvHeapInit+0xc0>)
 80033b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033ba:	601a      	str	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	2000018c 	.word	0x2000018c
 80033cc:	2001918c 	.word	0x2001918c
 80033d0:	20019194 	.word	0x20019194
 80033d4:	2001919c 	.word	0x2001919c
 80033d8:	20019198 	.word	0x20019198
 80033dc:	200191a0 	.word	0x200191a0

080033e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <prvInsertBlockIntoFreeList+0xac>)
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e002      	b.n	80033f4 <prvInsertBlockIntoFreeList+0x14>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3f7      	bcc.n	80033ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	441a      	add	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d108      	bne.n	8003422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	441a      	add	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d118      	bne.n	8003468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <prvInsertBlockIntoFreeList+0xb0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d00d      	beq.n	800345e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e008      	b.n	8003470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <prvInsertBlockIntoFreeList+0xb0>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e003      	b.n	8003470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d002      	beq.n	800347e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2001918c 	.word	0x2001918c
 8003490:	20019194 	.word	0x20019194

08003494 <main>:
void vGenerator3CallbackFunction( TimerHandle_t xTimer );

/*-----------------------------------------------------------*/

int main(void)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b083      	sub	sp, #12
 8003498:	af02      	add	r7, sp, #8
	/* Configure the system. */
	prvSetupHardware();
 800349a:	f000 fd50 	bl	8003f3e <prvSetupHardware>

	STM_EVAL_LEDInit(amber_led); 
 800349e:	2001      	movs	r0, #1
 80034a0:	f7ff fcce 	bl	8002e40 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7ff fccb 	bl	8002e40 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 80034aa:	2003      	movs	r0, #3
 80034ac:	f7ff fcc8 	bl	8002e40 <STM_EVAL_LEDInit>

	// create queue to send and receive potentiometer value
	xQueue_request_handle = xQueueCreate( QUEUE_LENGTH, sizeof(message *));
 80034b0:	2200      	movs	r2, #0
 80034b2:	2104      	movs	r1, #4
 80034b4:	2064      	movs	r0, #100	; 0x64
 80034b6:	f7fd f9bb 	bl	8000830 <xQueueGenericCreate>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <main+0x15c>)
 80034be:	601a      	str	r2, [r3, #0]
	xQueue_response_handle = xQueueCreate( QUEUE_LENGTH, sizeof(message *));
 80034c0:	2200      	movs	r2, #0
 80034c2:	2104      	movs	r1, #4
 80034c4:	2064      	movs	r0, #100	; 0x64
 80034c6:	f7fd f9b3 	bl	8000830 <xQueueGenericCreate>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <main+0x160>)
 80034ce:	601a      	str	r2, [r3, #0]

	// add potentiometer queue to registry for debugging
	vQueueAddToRegistry( xQueue_request_handle, "RequestQueue" );
 80034d0:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <main+0x15c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4948      	ldr	r1, [pc, #288]	; (80035f8 <main+0x164>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fdb2 	bl	8001040 <vQueueAddToRegistry>
	vQueueAddToRegistry( xQueue_response_handle, "ResponseQueue" );
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <main+0x160>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4946      	ldr	r1, [pc, #280]	; (80035fc <main+0x168>)
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fdac 	bl	8001040 <vQueueAddToRegistry>

	// need to decide priority and stack size
	xTaskCreate(DD_Scheduler_Task, "DD Scheduler", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80034e8:	2300      	movs	r3, #0
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	2304      	movs	r3, #4
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	2282      	movs	r2, #130	; 0x82
 80034f4:	4942      	ldr	r1, [pc, #264]	; (8003600 <main+0x16c>)
 80034f6:	4843      	ldr	r0, [pc, #268]	; (8003604 <main+0x170>)
 80034f8:	f7fd fdfe 	bl	80010f8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_1, "DD Task Generator 1", configMINIMAL_STACK_SIZE, NULL, 3, xGenerator1TaskHandle);
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <main+0x174>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2303      	movs	r3, #3
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2300      	movs	r3, #0
 8003508:	2282      	movs	r2, #130	; 0x82
 800350a:	4940      	ldr	r1, [pc, #256]	; (800360c <main+0x178>)
 800350c:	4840      	ldr	r0, [pc, #256]	; (8003610 <main+0x17c>)
 800350e:	f7fd fdf3 	bl	80010f8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_2, "DD Task Generator 2", configMINIMAL_STACK_SIZE, NULL, 3, xGenerator2TaskHandle);
 8003512:	4b40      	ldr	r3, [pc, #256]	; (8003614 <main+0x180>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2303      	movs	r3, #3
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	2282      	movs	r2, #130	; 0x82
 8003520:	493d      	ldr	r1, [pc, #244]	; (8003618 <main+0x184>)
 8003522:	483e      	ldr	r0, [pc, #248]	; (800361c <main+0x188>)
 8003524:	f7fd fde8 	bl	80010f8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_3, "DD Task Generator 3", configMINIMAL_STACK_SIZE, NULL, 3, xGenerator3TaskHandle);
 8003528:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <main+0x18c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2303      	movs	r3, #3
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	2282      	movs	r2, #130	; 0x82
 8003536:	493b      	ldr	r1, [pc, #236]	; (8003624 <main+0x190>)
 8003538:	483b      	ldr	r0, [pc, #236]	; (8003628 <main+0x194>)
 800353a:	f7fd fddd 	bl	80010f8 <xTaskCreate>
	xTaskCreate(Monitor_Task, "Monitor", configMINIMAL_STACK_SIZE, NULL, 4, NULL); // high priority or else will never run
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2304      	movs	r3, #4
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	2282      	movs	r2, #130	; 0x82
 800354a:	4938      	ldr	r1, [pc, #224]	; (800362c <main+0x198>)
 800354c:	4838      	ldr	r0, [pc, #224]	; (8003630 <main+0x19c>)
 800354e:	f7fd fdd3 	bl	80010f8 <xTaskCreate>

	// create software timers for controlling traffic lights
	xGenerator1Timer = xTimerCreate("Generator 1", TASK_1_PERIOD / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator1CallbackFunction);
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <main+0x1a0>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	2201      	movs	r2, #1
 800355a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800355e:	4836      	ldr	r0, [pc, #216]	; (8003638 <main+0x1a4>)
 8003560:	f7fe ff9a 	bl	8002498 <xTimerCreate>
 8003564:	4602      	mov	r2, r0
 8003566:	4b35      	ldr	r3, [pc, #212]	; (800363c <main+0x1a8>)
 8003568:	601a      	str	r2, [r3, #0]
	xGenerator2Timer = xTimerCreate("Generator 2", TASK_2_PERIOD  / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator2CallbackFunction);
 800356a:	4b35      	ldr	r3, [pc, #212]	; (8003640 <main+0x1ac>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003576:	4833      	ldr	r0, [pc, #204]	; (8003644 <main+0x1b0>)
 8003578:	f7fe ff8e 	bl	8002498 <xTimerCreate>
 800357c:	4602      	mov	r2, r0
 800357e:	4b32      	ldr	r3, [pc, #200]	; (8003648 <main+0x1b4>)
 8003580:	601a      	str	r2, [r3, #0]
	xGenerator3Timer = xTimerCreate("Generator 3", TASK_3_PERIOD / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator3CallbackFunction);
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <main+0x1b8>)
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	2201      	movs	r2, #1
 800358a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800358e:	4830      	ldr	r0, [pc, #192]	; (8003650 <main+0x1bc>)
 8003590:	f7fe ff82 	bl	8002498 <xTimerCreate>
 8003594:	4602      	mov	r2, r0
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <main+0x1c0>)
 8003598:	601a      	str	r2, [r3, #0]

	// start the timers
	xTimerStart(xGenerator1Timer, 0);
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <main+0x1a8>)
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	f7fe fa61 	bl	8001a64 <xTaskGetTickCount>
 80035a2:	4602      	mov	r2, r0
 80035a4:	2300      	movs	r3, #0
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	2101      	movs	r1, #1
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7fe ffc1 	bl	8002534 <xTimerGenericCommand>
	xTimerStart(xGenerator2Timer, 0);
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <main+0x1b4>)
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	f7fe fa55 	bl	8001a64 <xTaskGetTickCount>
 80035ba:	4602      	mov	r2, r0
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	2101      	movs	r1, #1
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7fe ffb5 	bl	8002534 <xTimerGenericCommand>
	xTimerStart(xGenerator3Timer, 0);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <main+0x1c0>)
 80035cc:	681c      	ldr	r4, [r3, #0]
 80035ce:	f7fe fa49 	bl	8001a64 <xTaskGetTickCount>
 80035d2:	4602      	mov	r2, r0
 80035d4:	2300      	movs	r3, #0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	2101      	movs	r1, #1
 80035dc:	4620      	mov	r0, r4
 80035de:	f7fe ffa9 	bl	8002534 <xTimerGenericCommand>
	
	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 80035e2:	f7fe f949 	bl	8001878 <vTaskStartScheduler>

	return 0;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3704      	adds	r7, #4
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	200191b0 	.word	0x200191b0
 80035f4:	200191b4 	.word	0x200191b4
 80035f8:	080045d0 	.word	0x080045d0
 80035fc:	080045e0 	.word	0x080045e0
 8003600:	080045f0 	.word	0x080045f0
 8003604:	08003659 	.word	0x08003659
 8003608:	200191a4 	.word	0x200191a4
 800360c:	08004600 	.word	0x08004600
 8003610:	080037e5 	.word	0x080037e5
 8003614:	200191a8 	.word	0x200191a8
 8003618:	08004614 	.word	0x08004614
 800361c:	08003835 	.word	0x08003835
 8003620:	200191ac 	.word	0x200191ac
 8003624:	08004628 	.word	0x08004628
 8003628:	08003885 	.word	0x08003885
 800362c:	0800463c 	.word	0x0800463c
 8003630:	080039ad 	.word	0x080039ad
 8003634:	08003ed9 	.word	0x08003ed9
 8003638:	08004644 	.word	0x08004644
 800363c:	2001927c 	.word	0x2001927c
 8003640:	08003eed 	.word	0x08003eed
 8003644:	08004650 	.word	0x08004650
 8003648:	20019274 	.word	0x20019274
 800364c:	08003f01 	.word	0x08003f01
 8003650:	0800465c 	.word	0x0800465c
 8003654:	20019278 	.word	0x20019278

08003658 <DD_Scheduler_Task>:


/*------------Tasks-----------------------------------------------*/
static void DD_Scheduler_Task( void *pvParameters )
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b08f      	sub	sp, #60	; 0x3c
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	// initialize task lists (only available to scheduler)
	struct dd_task_list* active_list = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
	struct dd_task_list* complete_list = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
	struct dd_task_list* overdue_list = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		message* received_message;

		// adjusts user task priorities  (Set earliest deadline task priority to high and the rest to low so first completes that and then so on)
		if(xQueueReceive(xQueue_request_handle, &received_message, 500)){
 800366c:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <DD_Scheduler_Task+0x184>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003674:	2300      	movs	r3, #0
 8003676:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800367a:	f7fd fabf 	bl	8000bfc <xQueueGenericReceive>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f3      	beq.n	800366c <DD_Scheduler_Task+0x14>
			// check for overdue tasks (could have used software timers instead, would be better to accommodate for aperiodic but kinda redundant for periodic)
			dd_task_list* temp = (dd_task_list *)pvPortMalloc(sizeof(dd_task_list));
 8003684:	201c      	movs	r0, #28
 8003686:	f7ff fd1f 	bl	80030c8 <pvPortMalloc>
 800368a:	62b8      	str	r0, [r7, #40]	; 0x28
			temp = active_list;
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
			
			// loop through active task list, check for overdue, if overdue remove and add to overdue list 
			while(temp != NULL){
 8003690:	e019      	b.n	80036c6 <DD_Scheduler_Task+0x6e>
				if (temp->task.absolute_deadline < xTaskGetTickCount() && temp->task.completion_time == 0){
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	691c      	ldr	r4, [r3, #16]
 8003696:	f7fe f9e5 	bl	8001a64 <xTaskGetTickCount>
 800369a:	4603      	mov	r3, r0
 800369c:	429c      	cmp	r4, r3
 800369e:	d215      	bcs.n	80036cc <DD_Scheduler_Task+0x74>
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <DD_Scheduler_Task+0x74>
					active_list = delete_task(active_list, &temp->task);
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	4619      	mov	r1, r3
 80036ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ae:	f000 fafe 	bl	8003cae <delete_task>
 80036b2:	6378      	str	r0, [r7, #52]	; 0x34
					overdue_list = add_task(overdue_list, &temp->task);
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	4619      	mov	r1, r3
 80036b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ba:	f000 fadd 	bl	8003c78 <add_task>
 80036be:	62f8      	str	r0, [r7, #44]	; 0x2c
					//vTaskSuspend(temp->task.t_handle);
					//vTaskDelete(temp->task.t_handle);
					temp = temp->next_task;
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
			while(temp != NULL){
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e2      	bne.n	8003692 <DD_Scheduler_Task+0x3a>
				else {
					break;
				}
			}

			temp = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
			vPortFree(temp);
 80036d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d2:	f7ff fdbf 	bl	8003254 <vPortFree>
			//active_list = order_tasks_deadline_first(active_list);
			// reset priorities of tasks accordingly
			//active_list = assign_task_priorities(active_list);

			// cases based on what message type is received
			if (received_message->type == create_dd)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11f      	bne.n	800371e <DD_Scheduler_Task+0xc6>
			{
				// assign release time to new task
				received_message->task_info->release_time = xTaskGetTickCount();
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	685c      	ldr	r4, [r3, #4]
 80036e2:	f7fe f9bf 	bl	8001a64 <xTaskGetTickCount>
 80036e6:	4603      	mov	r3, r0
 80036e8:	60e3      	str	r3, [r4, #12]
				received_message->task_info->completion_time = 0;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	615a      	str	r2, [r3, #20]

				// add DD task to active task list
				active_list = add_task(active_list, received_message->task_info);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4619      	mov	r1, r3
 80036f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036fa:	f000 fabd 	bl	8003c78 <add_task>
 80036fe:	6378      	str	r0, [r7, #52]	; 0x34

				// sort list by deadline
				active_list = order_tasks_deadline_first(active_list);
 8003700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003702:	f000 fb1d 	bl	8003d40 <order_tasks_deadline_first>
 8003706:	6378      	str	r0, [r7, #52]	; 0x34

				// set priorities of user defined task according to sorted list
				// head (first of list) set to high priority, rest set to low priority
				active_list = assign_task_priorities(active_list);
 8003708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800370a:	f000 fb72 	bl	8003df2 <assign_task_priorities>
 800370e:	6378      	str	r0, [r7, #52]	; 0x34

				// start task
				vTaskResume(received_message->task_info->t_handle);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe f852 	bl	80017c0 <vTaskResume>
 800371c:	e7a6      	b.n	800366c <DD_Scheduler_Task+0x14>
			}
			else if (received_message->type == delete_dd)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d125      	bne.n	8003772 <DD_Scheduler_Task+0x11a>
			{
				// assign completion time to newly completed DD-task
				struct dd_task done_task = get_dd_task(active_list, received_message->task_id);
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	f107 030c 	add.w	r3, r7, #12
 800372e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fb94 	bl	8003e5e <get_dd_task>

				if (done_task.type != BADVALUE){
 8003736:	7c3b      	ldrb	r3, [r7, #16]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d097      	beq.n	800366c <DD_Scheduler_Task+0x14>
					done_task.completion_time = xTaskGetTickCount();
 800373c:	f7fe f992 	bl	8001a64 <xTaskGetTickCount>
 8003740:	4603      	mov	r3, r0
 8003742:	623b      	str	r3, [r7, #32]

					// remove DD task from active task list
					active_list = delete_task(active_list, &done_task);
 8003744:	f107 030c 	add.w	r3, r7, #12
 8003748:	4619      	mov	r1, r3
 800374a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800374c:	f000 faaf 	bl	8003cae <delete_task>
 8003750:	6378      	str	r0, [r7, #52]	; 0x34

					// add DD task to complete task list
					complete_list = add_task(complete_list, &done_task);
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	4619      	mov	r1, r3
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fa8d 	bl	8003c78 <add_task>
 800375e:	6338      	str	r0, [r7, #48]	; 0x30

					// re-sort active task list by deadline
					active_list = order_tasks_deadline_first(active_list);
 8003760:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003762:	f000 faed 	bl	8003d40 <order_tasks_deadline_first>
 8003766:	6378      	str	r0, [r7, #52]	; 0x34

					// set priorities of user defined tasks accordingly
					// head (first of list) set to high priority, rest set to low priority
					active_list = assign_task_priorities(active_list);
 8003768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800376a:	f000 fb42 	bl	8003df2 <assign_task_priorities>
 800376e:	6378      	str	r0, [r7, #52]	; 0x34
 8003770:	e77c      	b.n	800366c <DD_Scheduler_Task+0x14>
				}
			}
			else if (received_message->type == get_active_dd_list)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d10c      	bne.n	8003794 <DD_Scheduler_Task+0x13c>
			{
				received_message->task_list = active_list;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800377e:	60da      	str	r2, [r3, #12]

				if (xQueueSend(xQueue_response_handle, &received_message, 500)){
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <DD_Scheduler_Task+0x188>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003788:	2300      	movs	r3, #0
 800378a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800378e:	f7fd f8a7 	bl	80008e0 <xQueueGenericSend>
 8003792:	e76b      	b.n	800366c <DD_Scheduler_Task+0x14>
					// sent message successfully
				}
			}
			else if (received_message->type == get_completed_dd_list)
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d10c      	bne.n	80037b6 <DD_Scheduler_Task+0x15e>
			{
				received_message->task_list = complete_list;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a0:	60da      	str	r2, [r3, #12]

				// get complete task list and send to a queue
				if (xQueueSend(xQueue_response_handle, &received_message, 500)){
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <DD_Scheduler_Task+0x188>)
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80037aa:	2300      	movs	r3, #0
 80037ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037b0:	f7fd f896 	bl	80008e0 <xQueueGenericSend>
 80037b4:	e75a      	b.n	800366c <DD_Scheduler_Task+0x14>
					// sent message successfully
				}
			}
			else if (received_message->type == get_overdue_dd_list)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	f47f af56 	bne.w	800366c <DD_Scheduler_Task+0x14>
			{
				received_message->task_list = overdue_list;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	60da      	str	r2, [r3, #12]

				// get complete task list and send to a queue
				if (xQueueSend(xQueue_response_handle, &received_message, 500)){
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <DD_Scheduler_Task+0x188>)
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80037ce:	2300      	movs	r3, #0
 80037d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037d4:	f7fd f884 	bl	80008e0 <xQueueGenericSend>
	{
 80037d8:	e748      	b.n	800366c <DD_Scheduler_Task+0x14>
 80037da:	bf00      	nop
 80037dc:	200191b0 	.word	0x200191b0
 80037e0:	200191b4 	.word	0x200191b4

080037e4 <DD_Task_Generator_1>:
	}
}

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_1( void *pvParameters )
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	6078      	str	r0, [r7, #4]
	while(1){
		// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_1_PERIOD
		// should reuse F-Task handles inside each DD task
		// periodically generate user tasks for DD_Scheduler
		TaskHandle_t task_1_handle;
		xTaskCreate( User_Task_1, "User Task 1", configMINIMAL_STACK_SIZE, NULL, 1, &task_1_handle); // start it at lowest priority
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2301      	movs	r3, #1
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	2282      	movs	r2, #130	; 0x82
 80037fa:	490c      	ldr	r1, [pc, #48]	; (800382c <DD_Task_Generator_1+0x48>)
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <DD_Task_Generator_1+0x4c>)
 80037fe:	f7fd fc7b 	bl	80010f8 <xTaskCreate>
		vTaskSuspend(task_1_handle); // DD scheduler will start it when it should be run
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd ff19 	bl	800163c <vTaskSuspend>

		// prepares all information needed for creating specific instance of DD-tasks
		// calls create_dd_task
		// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
		create_dd_task(task_1_handle, PERIODIC, 1,  xTaskGetTickCount() + TASK_1_PERIOD / portTICK_PERIOD_MS);
 800380a:	68fc      	ldr	r4, [r7, #12]
 800380c:	f7fe f92a 	bl	8001a64 <xTaskGetTickCount>
 8003810:	4603      	mov	r3, r0
 8003812:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003816:	2201      	movs	r2, #1
 8003818:	2100      	movs	r1, #0
 800381a:	4620      	mov	r0, r4
 800381c:	f000 f900 	bl	8003a20 <create_dd_task>

		// needs to suspend itself
		vTaskDelay(TASK_1_PERIOD);
 8003820:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003824:	f7fd fe28 	bl	8001478 <vTaskDelay>
	while(1){
 8003828:	e7e0      	b.n	80037ec <DD_Task_Generator_1+0x8>
 800382a:	bf00      	nop
 800382c:	08004668 	.word	0x08004668
 8003830:	080038d5 	.word	0x080038d5

08003834 <DD_Task_Generator_2>:

}

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_2( void *pvParameters )
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
	while(1){
		// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_2_PERIOD
		// should reuse F-Task handles inside each DD task
		// periodically generate user tasks for DD_Scheduler
		TaskHandle_t task_2_handle;
		xTaskCreate( User_Task_2, "User Task 2", configMINIMAL_STACK_SIZE, NULL, 1, &task_2_handle); // start it at lowest priority
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	2301      	movs	r3, #1
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	2282      	movs	r2, #130	; 0x82
 800384a:	490c      	ldr	r1, [pc, #48]	; (800387c <DD_Task_Generator_2+0x48>)
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <DD_Task_Generator_2+0x4c>)
 800384e:	f7fd fc53 	bl	80010f8 <xTaskCreate>
		vTaskSuspend(task_2_handle); // DD scheduler will start it when it should be run
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fef1 	bl	800163c <vTaskSuspend>

		// prepares all information needed for creating specific instance of DD-tasks
		// calls create_dd_task
		// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
		create_dd_task(task_2_handle, PERIODIC, 2,  xTaskGetTickCount() + TASK_2_PERIOD / portTICK_PERIOD_MS);
 800385a:	68fc      	ldr	r4, [r7, #12]
 800385c:	f7fe f902 	bl	8001a64 <xTaskGetTickCount>
 8003860:	4603      	mov	r3, r0
 8003862:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003866:	2202      	movs	r2, #2
 8003868:	2100      	movs	r1, #0
 800386a:	4620      	mov	r0, r4
 800386c:	f000 f8d8 	bl	8003a20 <create_dd_task>

		vTaskDelay(TASK_2_PERIOD);
 8003870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003874:	f7fd fe00 	bl	8001478 <vTaskDelay>
	while(1){
 8003878:	e7e0      	b.n	800383c <DD_Task_Generator_2+0x8>
 800387a:	bf00      	nop
 800387c:	08004674 	.word	0x08004674
 8003880:	0800391f 	.word	0x0800391f

08003884 <DD_Task_Generator_3>:
	}
}

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_3( void *pvParameters )
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
	while(1){
		// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_3_PERIOD
		// should reuse F-Task handles inside each DD task
		// periodically generate user tasks for DD_Scheduler
		TaskHandle_t task_3_handle;
		xTaskCreate( User_Task_3, "User Task 3", configMINIMAL_STACK_SIZE, NULL, 1, &task_3_handle); // start it at lowest priority
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2301      	movs	r3, #1
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	2282      	movs	r2, #130	; 0x82
 800389a:	490c      	ldr	r1, [pc, #48]	; (80038cc <DD_Task_Generator_3+0x48>)
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <DD_Task_Generator_3+0x4c>)
 800389e:	f7fd fc2b 	bl	80010f8 <xTaskCreate>
		vTaskSuspend(task_3_handle); // DD scheduler will start it when it should be run
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fec9 	bl	800163c <vTaskSuspend>

		// prepares all information needed for creating specific instance of DD-tasks
		// calls create_dd_task
		// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
		create_dd_task(task_3_handle, PERIODIC, 3,  xTaskGetTickCount() + TASK_3_PERIOD / portTICK_PERIOD_MS);
 80038aa:	68fc      	ldr	r4, [r7, #12]
 80038ac:	f7fe f8da 	bl	8001a64 <xTaskGetTickCount>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 80038b6:	2203      	movs	r2, #3
 80038b8:	2100      	movs	r1, #0
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 f8b0 	bl	8003a20 <create_dd_task>

		// needs to suspend itself
		vTaskDelay(TASK_3_PERIOD);
 80038c0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80038c4:	f7fd fdd8 	bl	8001478 <vTaskDelay>
	while(1){
 80038c8:	e7e0      	b.n	800388c <DD_Task_Generator_3+0x8>
 80038ca:	bf00      	nop
 80038cc:	08004680 	.word	0x08004680
 80038d0:	08003969 	.word	0x08003969

080038d4 <User_Task_1>:
	}

}

static void User_Task_1( void *pvParameters )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 80038dc:	f7fe f8c2 	bl	8001a64 <xTaskGetTickCount>
 80038e0:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_1_EXECUTION_TIME / portTICK_PERIOD_MS;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	335f      	adds	r3, #95	; 0x5f
 80038e6:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(amber_led);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f7ff fad7 	bl	8002e9c <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 80038ee:	bf00      	nop
 80038f0:	f7fe f8b8 	bl	8001a64 <xTaskGetTickCount>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d3f9      	bcc.n	80038f0 <User_Task_1+0x1c>
	{
		// loop for TASK_1_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(amber_led);
 80038fc:	2001      	movs	r0, #1
 80038fe:	f7ff fae5 	bl	8002ecc <STM_EVAL_LEDOff>

	vTaskPrioritySet(NULL, 4);
 8003902:	2104      	movs	r1, #4
 8003904:	2000      	movs	r0, #0
 8003906:	f7fd fdeb 	bl	80014e0 <vTaskPrioritySet>

	// execution time is done, delete task
	delete_dd_task(1);
 800390a:	2001      	movs	r0, #1
 800390c:	f000 f8d2 	bl	8003ab4 <delete_dd_task>

	// ends its task
	vTaskDelete(NULL);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fd23 	bl	800135c <vTaskDelete>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <User_Task_2>:

static void User_Task_2( void *pvParameters )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 8003926:	f7fe f89d 	bl	8001a64 <xTaskGetTickCount>
 800392a:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_2_EXECUTION_TIME / portTICK_PERIOD_MS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3396      	adds	r3, #150	; 0x96
 8003930:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(green_led);
 8003932:	2000      	movs	r0, #0
 8003934:	f7ff fab2 	bl	8002e9c <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 8003938:	bf00      	nop
 800393a:	f7fe f893 	bl	8001a64 <xTaskGetTickCount>
 800393e:	4602      	mov	r2, r0
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d3f9      	bcc.n	800393a <User_Task_2+0x1c>
	{
		// loop for TASK_2_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(green_led);
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff fac0 	bl	8002ecc <STM_EVAL_LEDOff>

	vTaskPrioritySet(NULL, 4);
 800394c:	2104      	movs	r1, #4
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd fdc6 	bl	80014e0 <vTaskPrioritySet>

	// execution time is done, delete task
	delete_dd_task(2);
 8003954:	2002      	movs	r0, #2
 8003956:	f000 f8ad 	bl	8003ab4 <delete_dd_task>

	// ends its task
	vTaskDelete(NULL);
 800395a:	2000      	movs	r0, #0
 800395c:	f7fd fcfe 	bl	800135c <vTaskDelete>
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <User_Task_3>:

static void User_Task_3( void *pvParameters )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 8003970:	f7fe f878 	bl	8001a64 <xTaskGetTickCount>
 8003974:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_3_EXECUTION_TIME / portTICK_PERIOD_MS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	33fa      	adds	r3, #250	; 0xfa
 800397a:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(blue_led);
 800397c:	2003      	movs	r0, #3
 800397e:	f7ff fa8d 	bl	8002e9c <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 8003982:	bf00      	nop
 8003984:	f7fe f86e 	bl	8001a64 <xTaskGetTickCount>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3f9      	bcc.n	8003984 <User_Task_3+0x1c>
	{
		// loop for TASK_3_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(blue_led);
 8003990:	2003      	movs	r0, #3
 8003992:	f7ff fa9b 	bl	8002ecc <STM_EVAL_LEDOff>

	// execution time is done, delete task
	delete_dd_task(3);
 8003996:	2003      	movs	r0, #3
 8003998:	f000 f88c 	bl	8003ab4 <delete_dd_task>

	// ends its task
	vTaskDelete(NULL);
 800399c:	2000      	movs	r0, #0
 800399e:	f7fd fcdd 	bl	800135c <vTaskDelete>
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <Monitor_Task>:

static void Monitor_Task( void *pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// periodically reports system information
		vTaskDelay(500);
 80039b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039b8:	f7fd fd5e 	bl	8001478 <vTaskDelay>

		// call get_active_dd_task_list
		int active_list_count = print_count_of_list (get_active_dd_task_list());
 80039bc:	f000 f89c 	bl	8003af8 <get_active_dd_task_list>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f9a2 	bl	8003d0c <print_count_of_list>
 80039c8:	6178      	str	r0, [r7, #20]
		// call get_complete_dd_task_list
		int complete_list_count = print_count_of_list(get_complete_dd_task_list());
 80039ca:	f000 f8d5 	bl	8003b78 <get_complete_dd_task_list>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f99b 	bl	8003d0c <print_count_of_list>
 80039d6:	6138      	str	r0, [r7, #16]
		// call get_overdue_dd_task_list
		int overdue_list_count = print_count_of_list(get_overdue_dd_task_list());
 80039d8:	f000 f90e 	bl	8003bf8 <get_overdue_dd_task_list>
 80039dc:	4603      	mov	r3, r0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f994 	bl	8003d0c <print_count_of_list>
 80039e4:	60f8      	str	r0, [r7, #12]

		// print to console number of tasks in each list
		printf("In Monitoring Task, current time: %u\n", (unsigned int)xTaskGetTickCount());
 80039e6:	f7fe f83d 	bl	8001a64 <xTaskGetTickCount>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4619      	mov	r1, r3
 80039ee:	4808      	ldr	r0, [pc, #32]	; (8003a10 <Monitor_Task+0x64>)
 80039f0:	f000 fd60 	bl	80044b4 <printf>
		printf("Active task list count: %d\n", active_list_count);
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	4807      	ldr	r0, [pc, #28]	; (8003a14 <Monitor_Task+0x68>)
 80039f8:	f000 fd5c 	bl	80044b4 <printf>
		printf("Complete task list count: %d\n", complete_list_count);
 80039fc:	6939      	ldr	r1, [r7, #16]
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <Monitor_Task+0x6c>)
 8003a00:	f000 fd58 	bl	80044b4 <printf>
		printf("Overdue task list count: %d\n", overdue_list_count);
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <Monitor_Task+0x70>)
 8003a08:	f000 fd54 	bl	80044b4 <printf>
	{
 8003a0c:	e7d2      	b.n	80039b4 <Monitor_Task+0x8>
 8003a0e:	bf00      	nop
 8003a10:	0800468c 	.word	0x0800468c
 8003a14:	080046b4 	.word	0x080046b4
 8003a18:	080046d0 	.word	0x080046d0
 8003a1c:	080046f0 	.word	0x080046f0

08003a20 <create_dd_task>:
	}
}

/*------------------ helper functions -----------------------------------------*/
void create_dd_task( TaskHandle_t t_handle, enum task_type type, uint32_t the_task_id, uint32_t absolute_deadline)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	72fb      	strb	r3, [r7, #11]
	// receive information needed to create new dd_task struct (minus release time and completion time)
	message* this_message = (message *)pvPortMalloc(sizeof(message));
 8003a30:	2010      	movs	r0, #16
 8003a32:	f7ff fb49 	bl	80030c8 <pvPortMalloc>
 8003a36:	4603      	mov	r3, r0
 8003a38:	617b      	str	r3, [r7, #20]
	this_message->task_info = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task));
 8003a3a:	697c      	ldr	r4, [r7, #20]
 8003a3c:	2018      	movs	r0, #24
 8003a3e:	f7ff fb43 	bl	80030c8 <pvPortMalloc>
 8003a42:	4603      	mov	r3, r0
 8003a44:	6063      	str	r3, [r4, #4]
	//this_message->type = (enum message_type)pvPortMalloc(sizeof(enum message_type));

	this_message->type = create_dd;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
	this_message->task_info->t_handle = t_handle;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]
	this_message->task_info->type = type;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	7afa      	ldrb	r2, [r7, #11]
 8003a5a:	711a      	strb	r2, [r3, #4]
	this_message->task_info->task_id = the_task_id;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
	this_message->task_info->release_time = 0;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	60da      	str	r2, [r3, #12]
	this_message->task_info->absolute_deadline = absolute_deadline;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	611a      	str	r2, [r3, #16]
	this_message->task_info->completion_time = 0;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
	this_message->task_id = the_task_id;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

	// sends message struct  to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <create_dd_task+0x90>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0114 	add.w	r1, r7, #20
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a90:	f7fc ff26 	bl	80008e0 <xQueueGenericSend>
	{
		// wait for reply from DDS (obtain reply message)

	}

	vPortFree(this_message->task_info);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fbdb 	bl	8003254 <vPortFree>
	vPortFree(this_message);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fbd7 	bl	8003254 <vPortFree>
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd90      	pop	{r4, r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200191b0 	.word	0x200191b0

08003ab4 <delete_dd_task>:

void delete_dd_task(uint32_t task_id)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	// receive ID of DD-Task when it has completed its execution (from user task)
	// struct with id is packaged as message
	message* this_message = (message *)pvPortMalloc(sizeof(message));
 8003abc:	2010      	movs	r0, #16
 8003abe:	f7ff fb03 	bl	80030c8 <pvPortMalloc>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	60fb      	str	r3, [r7, #12]
	//this_message->type = (enum message_type)pvPortMalloc(sizeof(enum message_type));
	this_message->type = delete_dd;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
	this_message->task_id = task_id;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	609a      	str	r2, [r3, #8]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <delete_dd_task+0x40>)
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	f107 010c 	add.w	r1, r7, #12
 8003ada:	2300      	movs	r3, #0
 8003adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae0:	f7fc fefe 	bl	80008e0 <xQueueGenericSend>
	{
		// wait for reply from DDS (obtain reply message)

	}

	vPortFree(this_message);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fbb4 	bl	8003254 <vPortFree>
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	200191b0 	.word	0x200191b0

08003af8 <get_active_dd_task_list>:

struct dd_task_list* get_active_dd_task_list(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
	// sends message to queue requesting Active Task list from DDS
	message* this_message = (message *)pvPortMalloc(sizeof(message *));
 8003afe:	2004      	movs	r0, #4
 8003b00:	f7ff fae2 	bl	80030c8 <pvPortMalloc>
 8003b04:	4603      	mov	r3, r0
 8003b06:	607b      	str	r3, [r7, #4]
	//this_message->task_info = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task *));
	//this_message->type = (enum message_type)pvPortMalloc(sizeof(enum message_type));
	this_message->type = get_active_dd_list;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <get_active_dd_task_list+0x78>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	1d39      	adds	r1, r7, #4
 8003b14:	2300      	movs	r3, #0
 8003b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b1a:	f7fc fee1 	bl	80008e0 <xQueueGenericSend>
	{
		// wait for reply from DDS (obtain reply message)

	}

	vPortFree(this_message);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fb97 	bl	8003254 <vPortFree>

	// wait for reply from DDS (obtain reply message)
	message* reply_message = (message *)pvPortMalloc(sizeof(message *));
 8003b26:	2004      	movs	r0, #4
 8003b28:	f7ff face 	bl	80030c8 <pvPortMalloc>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	603b      	str	r3, [r7, #0]
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, portMAX_DELAY))
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <get_active_dd_task_list+0x7c>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4639      	mov	r1, r7
 8003b36:	2300      	movs	r3, #0
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	f7fd f85e 	bl	8000bfc <xQueueGenericReceive>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <get_active_dd_task_list+0x6c>
	{
		// check for message type
		if (reply_message->type == get_active_dd_list)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d102      	bne.n	8003b54 <get_active_dd_task_list+0x5c>
		{
			return reply_message->task_list;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	e009      	b.n	8003b68 <get_active_dd_task_list+0x70>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <get_active_dd_task_list+0x7c>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	4639      	mov	r1, r7
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b60:	f7fc febe 	bl	80008e0 <xQueueGenericSend>

			}
		}
	}

	return reply_message->task_list;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200191b0 	.word	0x200191b0
 8003b74:	200191b4 	.word	0x200191b4

08003b78 <get_complete_dd_task_list>:

struct dd_task_list* get_complete_dd_task_list(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
	// sends message to queue requesting Complete Task list from DDS
	message* this_message = (message *)pvPortMalloc(sizeof(message *));
 8003b7e:	2004      	movs	r0, #4
 8003b80:	f7ff faa2 	bl	80030c8 <pvPortMalloc>
 8003b84:	4603      	mov	r3, r0
 8003b86:	607b      	str	r3, [r7, #4]
	this_message->type = get_completed_dd_list;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	701a      	strb	r2, [r3, #0]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <get_complete_dd_task_list+0x78>)
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	1d39      	adds	r1, r7, #4
 8003b94:	2300      	movs	r3, #0
 8003b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b9a:	f7fc fea1 	bl	80008e0 <xQueueGenericSend>
		// wait for reply from DDS (obtain reply message)

	}

	//vPortFree(this_message->task_info);
	vPortFree(this_message);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fb57 	bl	8003254 <vPortFree>

	// wait for reply from DDS (obtain reply message)
	message* reply_message = (message *)pvPortMalloc(sizeof(message *));
 8003ba6:	2004      	movs	r0, #4
 8003ba8:	f7ff fa8e 	bl	80030c8 <pvPortMalloc>
 8003bac:	4603      	mov	r3, r0
 8003bae:	603b      	str	r3, [r7, #0]
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, portMAX_DELAY))
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <get_complete_dd_task_list+0x7c>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	f7fd f81e 	bl	8000bfc <xQueueGenericReceive>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <get_complete_dd_task_list+0x6c>
	{
		// check for message type
		if (reply_message->type == get_completed_dd_list)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d102      	bne.n	8003bd4 <get_complete_dd_task_list+0x5c>
		{
			//vPortFree(this_message);
			return reply_message->task_list;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	e009      	b.n	8003be8 <get_complete_dd_task_list+0x70>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <get_complete_dd_task_list+0x7c>)
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	4639      	mov	r1, r7
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003be0:	f7fc fe7e 	bl	80008e0 <xQueueGenericSend>
		}
	}

	//vPortFree(this_message);

	return reply_message->task_list;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200191b0 	.word	0x200191b0
 8003bf4:	200191b4 	.word	0x200191b4

08003bf8 <get_overdue_dd_task_list>:

struct dd_task_list* get_overdue_dd_task_list(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
	// sends message to queue requesting Overdue Task list from DDS
	message* this_message = (message *)pvPortMalloc(sizeof(message *));
 8003bfe:	2004      	movs	r0, #4
 8003c00:	f7ff fa62 	bl	80030c8 <pvPortMalloc>
 8003c04:	4603      	mov	r3, r0
 8003c06:	607b      	str	r3, [r7, #4]
	this_message->type = get_overdue_dd_list;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	701a      	strb	r2, [r3, #0]

	// sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <get_overdue_dd_task_list+0x78>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	1d39      	adds	r1, r7, #4
 8003c14:	2300      	movs	r3, #0
 8003c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c1a:	f7fc fe61 	bl	80008e0 <xQueueGenericSend>
	{
		// sent successfully
	}

	//vPortFree(this_message->task_info);
	vPortFree(this_message);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fb17 	bl	8003254 <vPortFree>

	// wait for reply from DDS (obtain reply message)
	message* reply_message = (message *)pvPortMalloc(sizeof(message *));
 8003c26:	2004      	movs	r0, #4
 8003c28:	f7ff fa4e 	bl	80030c8 <pvPortMalloc>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	603b      	str	r3, [r7, #0]
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, portMAX_DELAY))
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <get_overdue_dd_task_list+0x7c>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4639      	mov	r1, r7
 8003c36:	2300      	movs	r3, #0
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	f7fc ffde 	bl	8000bfc <xQueueGenericReceive>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <get_overdue_dd_task_list+0x6c>
	{
		// check for message type
		if (reply_message->type == get_overdue_dd_list)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d102      	bne.n	8003c54 <get_overdue_dd_task_list+0x5c>
		{
			return reply_message->task_list;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	e009      	b.n	8003c68 <get_overdue_dd_task_list+0x70>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <get_overdue_dd_task_list+0x7c>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4639      	mov	r1, r7
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c60:	f7fc fe3e 	bl	80008e0 <xQueueGenericSend>
		}
	}

	//vPortFree(this_message);

	return reply_message->task_list;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200191b0 	.word	0x200191b0
 8003c74:	200191b4 	.word	0x200191b4

08003c78 <add_task>:

/* linked list functions */
// add new task
dd_task_list * add_task( dd_task_list * list_head, struct dd_task * new_dd_task )
{
 8003c78:	b5b0      	push	{r4, r5, r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	dd_task_list* new_node = (dd_task_list *)pvPortMalloc(sizeof(dd_task_list));
 8003c82:	201c      	movs	r0, #28
 8003c84:	f7ff fa20 	bl	80030c8 <pvPortMalloc>
 8003c88:	60f8      	str	r0, [r7, #12]
	//new_node->task = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task *));
	new_node->task = *new_dd_task;
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4614      	mov	r4, r2
 8003c90:	461d      	mov	r5, r3
 8003c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c9a:	e884 0003 	stmia.w	r4, {r0, r1}
	new_node->next_task = list_head;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	619a      	str	r2, [r3, #24]

	return new_node;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bdb0      	pop	{r4, r5, r7, pc}

08003cae <delete_task>:

// delete task
dd_task_list * delete_task ( struct dd_task_list * list_head, struct dd_task * done_dd_task )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
	// Store head node
    struct dd_task_list *temp = list_head;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
	struct dd_task_list *prev = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->task.t_handle == done_dd_task->t_handle) {
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <delete_task+0x36>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d108      	bne.n	8003ce4 <delete_task+0x36>
        list_head = temp->next_task; // Changed head
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	607b      	str	r3, [r7, #4]
    }

    // Search for the task to be deleted, keep track of the
    // previous node as we need to change 'prev->next'
    while (temp != NULL && temp->task.t_handle != done_dd_task->t_handle) {
 8003cd8:	e004      	b.n	8003ce4 <delete_task+0x36>
        prev = temp;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
        temp = temp->next_task;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]
    while (temp != NULL && temp->task.t_handle != done_dd_task->t_handle) {
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <delete_task+0x48>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d1f1      	bne.n	8003cda <delete_task+0x2c>
    }

    // Unlink the node from linked list
    prev->next_task = temp->next_task;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	619a      	str	r2, [r3, #24]

    //vPortFree(temp);

    return list_head;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <print_count_of_list>:

// return count of list
int print_count_of_list ( struct dd_task_list * dd_task_list_head )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	struct dd_task_list *p = dd_task_list_head;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
	while(p != NULL){
 8003d1c:	e005      	b.n	8003d2a <print_count_of_list+0x1e>
	    p = p->next_task;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]
	    count++;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]
	while(p != NULL){
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f6      	bne.n	8003d1e <print_count_of_list+0x12>
	}

	vPortFree(p);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fa8f 	bl	8003254 <vPortFree>

	return count;
 8003d36:	68bb      	ldr	r3, [r7, #8]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <order_tasks_deadline_first>:

// reorder by deadline first (this isn't ordering them properly)
dd_task_list * order_tasks_deadline_first( dd_task_list * dd_task_list_head )
{
 8003d40:	b4b0      	push	{r4, r5, r7}
 8003d42:	b08d      	sub	sp, #52	; 0x34
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	struct dd_task_list *current = dd_task_list_head;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct dd_task_list *index = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct dd_task temp;

	if (dd_task_list_head == NULL){
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <order_tasks_deadline_first+0x1a>
		return dd_task_list_head;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	e046      	b.n	8003de8 <order_tasks_deadline_first+0xa8>
	}
	else {
		int first_run = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
		while (current != NULL){
 8003d5e:	e03f      	b.n	8003de0 <order_tasks_deadline_first+0xa0>
			index = current->next_task;
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28

			while (index != NULL){
 8003d66:	e02c      	b.n	8003dc2 <order_tasks_deadline_first+0x82>
				if (index->task.absolute_deadline < 50000){
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d82a      	bhi.n	8003dca <order_tasks_deadline_first+0x8a>
					if (current->task.absolute_deadline > index->task.absolute_deadline){
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d91d      	bls.n	8003dbc <order_tasks_deadline_first+0x7c>
						temp = current->task;
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	f107 040c 	add.w	r4, r7, #12
 8003d86:	461d      	mov	r5, r3
 8003d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d90:	e884 0003 	stmia.w	r4, {r0, r1}
						current->task = index->task;
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003da4:	e884 0003 	stmia.w	r4, {r0, r1}
						index->task = temp;
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	461d      	mov	r5, r3
 8003dac:	f107 040c 	add.w	r4, r7, #12
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003db8:	e885 0003 	stmia.w	r5, {r0, r1}
					}
				}
				else {
					break;
				}
				index = index->next_task;
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
			while (index != NULL){
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1cf      	bne.n	8003d68 <order_tasks_deadline_first+0x28>
 8003dc8:	e000      	b.n	8003dcc <order_tasks_deadline_first+0x8c>
					break;
 8003dca:	bf00      	nop
			}

			if (first_run){
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <order_tasks_deadline_first+0x9a>
				dd_task_list_head = current;
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	607b      	str	r3, [r7, #4]
				first_run = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
			}

			current = current->next_task;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (current != NULL){
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1bc      	bne.n	8003d60 <order_tasks_deadline_first+0x20>

		}
	}

	return dd_task_list_head;
 8003de6:	687b      	ldr	r3, [r7, #4]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3734      	adds	r7, #52	; 0x34
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bcb0      	pop	{r4, r5, r7}
 8003df0:	4770      	bx	lr

08003df2 <assign_task_priorities>:

// assign task priorities
dd_task_list * assign_task_priorities ( dd_task_list * dd_task_list_head )
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
	int priority = 3; // start priority
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	60fb      	str	r3, [r7, #12]

	if (dd_task_list_head == NULL){
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <assign_task_priorities+0x16>
		return dd_task_list_head;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	e026      	b.n	8003e56 <assign_task_priorities+0x64>
	}
	else {
		struct dd_task_list *temp; // = (dd_task_list *)pvPortMalloc(sizeof(dd_task_list *));
		temp = dd_task_list_head->next_task;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	60bb      	str	r3, [r7, #8]
		vTaskPrioritySet(dd_task_list_head->task.t_handle, 3); // highest priority without being in way of monitor task
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2103      	movs	r1, #3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd fb63 	bl	80014e0 <vTaskPrioritySet>
		if (priority - 1 != 0)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d013      	beq.n	8003e48 <assign_task_priorities+0x56>
		{
			priority--; // can't make priority lower than one
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
		}

		// set the rest of tasks priorities
		while(temp != NULL){
 8003e26:	e00f      	b.n	8003e48 <assign_task_priorities+0x56>
			vTaskPrioritySet(temp->task.t_handle, priority); // each task is 1 level priority lower than prev task (should they go from 3 to 1 or is 2 and 1 okay?)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fb55 	bl	80014e0 <vTaskPrioritySet>
			temp = temp->next_task;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60bb      	str	r3, [r7, #8]
			if (priority - 1 != 0)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d002      	beq.n	8003e48 <assign_task_priorities+0x56>
			{
				priority--; // can't make priority lower than one
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
		while(temp != NULL){
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ec      	bne.n	8003e28 <assign_task_priorities+0x36>
			}
		}

		vPortFree(temp);
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	f7ff fa00 	bl	8003254 <vPortFree>
	}

	return dd_task_list_head;
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <get_dd_task>:

struct dd_task get_dd_task(struct dd_task_list * list_head, uint32_t the_task_id)
{
 8003e5e:	b4b0      	push	{r4, r5, r7}
 8003e60:	b08d      	sub	sp, #52	; 0x34
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
	// Store head node
	struct dd_task_list *current = list_head;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	// If head node itself holds the key to be deleted
	if (current != NULL && current->task.task_id == the_task_id) {
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <get_dd_task+0x2c>
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d105      	bne.n	8003e8a <get_dd_task+0x2c>
		current = list_head;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	// Search for the earliest task with matching task id
	while (current != NULL && current->task.task_id != the_task_id) {
 8003e82:	e002      	b.n	8003e8a <get_dd_task+0x2c>
		current = current->next_task;
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (current != NULL && current->task.task_id != the_task_id) {
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <get_dd_task+0x3c>
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1f4      	bne.n	8003e84 <get_dd_task+0x26>
	}

	if (current == NULL){
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10c      	bne.n	8003eba <get_dd_task+0x5c>
		struct dd_task null_task;
		null_task.type = BADVALUE;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	763b      	strb	r3, [r7, #24]
		return null_task;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	461d      	mov	r5, r3
 8003ea8:	f107 0414 	add.w	r4, r7, #20
 8003eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eb8:	e009      	b.n	8003ece <get_dd_task+0x70>
	}

	return current->task;
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	461d      	mov	r5, r3
 8003ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003eca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	3734      	adds	r7, #52	; 0x34
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bcb0      	pop	{r4, r5, r7}
 8003ed6:	4770      	bx	lr

08003ed8 <vGenerator1CallbackFunction>:

/*------------------ software timer callbacks -----------------------------------------*/
void vGenerator1CallbackFunction( TimerHandle_t xTimer )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	// (might not work cause of same reason xTickGetCount() doesnt work)
	//vTaskResume(xGenerator1TaskHandle);
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <vGenerator2CallbackFunction>:

void vGenerator2CallbackFunction( TimerHandle_t xTimer )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	//vTaskResume(xGenerator2TaskHandle);
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <vGenerator3CallbackFunction>:

void vGenerator3CallbackFunction( TimerHandle_t xTimer )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	//vTaskResume(xGenerator3TaskHandle);
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <vApplicationMallocFailedHook>:
// could add another timer callback for overdue tasks (would be started each time a task is created?)

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003f18:	e7fe      	b.n	8003f18 <vApplicationMallocFailedHook+0x4>

08003f1a <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003f24:	e7fe      	b.n	8003f24 <vApplicationStackOverflowHook+0xa>

08003f26 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003f2c:	f7ff f9ea 	bl	8003304 <xPortGetFreeHeapSize>
 8003f30:	4603      	mov	r3, r0
 8003f32:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003f34:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7ff f89c 	bl	8003080 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f4e:	e003      	b.n	8003f58 <LoopCopyDataInit>

08003f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f56:	3104      	adds	r1, #4

08003f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f58:	480a      	ldr	r0, [pc, #40]	; (8003f84 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f60:	d3f6      	bcc.n	8003f50 <CopyDataInit>
  ldr  r2, =_sbss
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003f64:	e002      	b.n	8003f6c <LoopFillZerobss>

08003f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f68:	f842 3b04 	str.w	r3, [r2], #4

08003f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f70:	d3f9      	bcc.n	8003f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f72:	f000 f877 	bl	8004064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f76:	f000 fae7 	bl	8004548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f7a:	f7ff fa8b 	bl	8003494 <main>
  bx  lr    
 8003f7e:	4770      	bx	lr
  ldr  r3, =_sidata
 8003f80:	08004748 	.word	0x08004748
  ldr  r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f88:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8003f8c:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8003f90:	20019280 	.word	0x20019280

08003f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f94:	e7fe      	b.n	8003f94 <ADC_IRQHandler>

08003f96 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <HardFault_Handler+0x4>

08003faa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003fae:	e7fe      	b.n	8003fae <MemManage_Handler+0x4>

08003fb0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <BusFault_Handler+0x4>

08003fb6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003fba:	e7fe      	b.n	8003fba <UsageFault_Handler+0x4>

08003fbc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <ITM_SendChar+0x58>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01a      	beq.n	8004016 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003fe0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fe4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003fe8:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003ff0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ff4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ff8:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8004000:	bf00      	nop
 8004002:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0fa      	beq.n	8004002 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 800400c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004016:	687b      	ldr	r3, [r7, #4]
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000edf0 	.word	0xe000edf0

08004028 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e009      	b.n	8004052 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	60ba      	str	r2, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ffc0 	bl	8003fcc <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbf1      	blt.n	800403e <_write+0x16>
 return len;
 800405a:	687b      	ldr	r3, [r7, #4]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <SystemInit+0x60>)
 800406a:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <SystemInit+0x60>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <SystemInit+0x64>)
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <SystemInit+0x64>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <SystemInit+0x64>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <SystemInit+0x64>)
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <SystemInit+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004098:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <SystemInit+0x64>)
 800409c:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <SystemInit+0x68>)
 800409e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <SystemInit+0x64>)
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <SystemInit+0x64>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <SystemInit+0x64>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80040b2:	f000 f80d 	bl	80040d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040b6:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <SystemInit+0x60>)
 80040b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040bc:	609a      	str	r2, [r3, #8]
#endif
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	e000ed00 	.word	0xe000ed00
 80040c8:	40023800 	.word	0x40023800
 80040cc:	24003010 	.word	0x24003010

080040d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	2300      	movs	r3, #0
 80040dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80040de:	4a36      	ldr	r2, [pc, #216]	; (80041b8 <SetSysClock+0xe8>)
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <SetSysClock+0xe8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <SetSysClock+0xe8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3301      	adds	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <SetSysClock+0x38>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004106:	d1f0      	bne.n	80040ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <SetSysClock+0xe8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004114:	2301      	movs	r3, #1
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	e001      	b.n	800411e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800411a:	2300      	movs	r3, #0
 800411c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d142      	bne.n	80041aa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <SetSysClock+0xe8>)
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <SetSysClock+0xe8>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <SetSysClock+0xec>)
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <SetSysClock+0xec>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <SetSysClock+0xe8>)
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <SetSysClock+0xe8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004144:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <SetSysClock+0xe8>)
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <SetSysClock+0xe8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <SetSysClock+0xe8>)
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <SetSysClock+0xe8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800415a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <SetSysClock+0xe8>)
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <SetSysClock+0xf0>)
 8004160:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <SetSysClock+0xe8>)
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <SetSysClock+0xe8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800416e:	bf00      	nop
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <SetSysClock+0xe8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f9      	beq.n	8004170 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <SetSysClock+0xf4>)
 800417e:	f240 6205 	movw	r2, #1541	; 0x605
 8004182:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004184:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <SetSysClock+0xe8>)
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <SetSysClock+0xe8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004190:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <SetSysClock+0xe8>)
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <SetSysClock+0xe8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800419c:	bf00      	nop
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <SetSysClock+0xe8>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d1f9      	bne.n	800419e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000
 80041c0:	07405408 	.word	0x07405408
 80041c4:	40023c00 	.word	0x40023c00

080041c8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80041d8:	e004      	b.n	80041e4 <ts_itoa+0x1c>
		div *= base;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d2f3      	bcs.n	80041da <ts_itoa+0x12>

	while (div != 0)
 80041f2:	e029      	b.n	8004248 <ts_itoa+0x80>
	{
		int num = d/div;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	613b      	str	r3, [r7, #16]
		d = d%div;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	fbb3 f1f2 	udiv	r1, r3, r2
 8004206:	fb02 f201 	mul.w	r2, r2, r1
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	fb92 f3f3 	sdiv	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b09      	cmp	r3, #9
 800421c:	dd0a      	ble.n	8004234 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	6011      	str	r1, [r2, #0]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	3237      	adds	r2, #55	; 0x37
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e009      	b.n	8004248 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	3230      	adds	r2, #48	; 0x30
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d2      	bne.n	80041f4 <ts_itoa+0x2c>
	}
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b088      	sub	sp, #32
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800426a:	e07d      	b.n	8004368 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b25      	cmp	r3, #37	; 0x25
 8004272:	d171      	bne.n	8004358 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3301      	adds	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d01e      	beq.n	80042c0 <ts_formatstring+0x66>
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	dc06      	bgt.n	8004294 <ts_formatstring+0x3a>
 8004286:	2b58      	cmp	r3, #88	; 0x58
 8004288:	d050      	beq.n	800432c <ts_formatstring+0xd2>
 800428a:	2b63      	cmp	r3, #99	; 0x63
 800428c:	d00e      	beq.n	80042ac <ts_formatstring+0x52>
 800428e:	2b25      	cmp	r3, #37	; 0x25
 8004290:	d058      	beq.n	8004344 <ts_formatstring+0xea>
 8004292:	e05d      	b.n	8004350 <ts_formatstring+0xf6>
 8004294:	2b73      	cmp	r3, #115	; 0x73
 8004296:	d02b      	beq.n	80042f0 <ts_formatstring+0x96>
 8004298:	2b73      	cmp	r3, #115	; 0x73
 800429a:	dc02      	bgt.n	80042a2 <ts_formatstring+0x48>
 800429c:	2b69      	cmp	r3, #105	; 0x69
 800429e:	d00f      	beq.n	80042c0 <ts_formatstring+0x66>
 80042a0:	e056      	b.n	8004350 <ts_formatstring+0xf6>
 80042a2:	2b75      	cmp	r3, #117	; 0x75
 80042a4:	d037      	beq.n	8004316 <ts_formatstring+0xbc>
 80042a6:	2b78      	cmp	r3, #120	; 0x78
 80042a8:	d040      	beq.n	800432c <ts_formatstring+0xd2>
 80042aa:	e051      	b.n	8004350 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60fa      	str	r2, [r7, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	1d11      	adds	r1, r2, #4
 80042b6:	6079      	str	r1, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
				break;
 80042be:	e047      	b.n	8004350 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da07      	bge.n	80042e0 <ts_formatstring+0x86>
					{
						val *= -1;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	425b      	negs	r3, r3
 80042d4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	60fa      	str	r2, [r7, #12]
 80042dc:	222d      	movs	r2, #45	; 0x2d
 80042de:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	220a      	movs	r2, #10
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff6d 	bl	80041c8 <ts_itoa>
				}
				break;
 80042ee:	e02f      	b.n	8004350 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80042fa:	e007      	b.n	800430c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	60fa      	str	r2, [r7, #12]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	1c51      	adds	r1, r2, #1
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f3      	bne.n	80042fc <ts_formatstring+0xa2>
					}
				}
				break;
 8004314:	e01c      	b.n	8004350 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1d1a      	adds	r2, r3, #4
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	220a      	movs	r2, #10
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff4f 	bl	80041c8 <ts_itoa>
				break;
 800432a:	e011      	b.n	8004350 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	2210      	movs	r2, #16
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff43 	bl	80041c8 <ts_itoa>
				break;
 8004342:	e005      	b.n	8004350 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	60fa      	str	r2, [r7, #12]
 800434a:	2225      	movs	r2, #37	; 0x25
 800434c:	701a      	strb	r2, [r3, #0]
				  break;
 800434e:	bf00      	nop
			}
			fmt++;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3301      	adds	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	e007      	b.n	8004368 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	60fa      	str	r2, [r7, #12]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	1c51      	adds	r1, r2, #1
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f af7d 	bne.w	800426c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1ad3      	subs	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004396:	e081      	b.n	800449c <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b25      	cmp	r3, #37	; 0x25
 800439e:	d177      	bne.n	8004490 <ts_formatlength+0x108>
		{
			++fmt;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3301      	adds	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	3b58      	subs	r3, #88	; 0x58
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d86a      	bhi.n	8004486 <ts_formatlength+0xfe>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <ts_formatlength+0x30>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	08004479 	.word	0x08004479
 80043bc:	08004487 	.word	0x08004487
 80043c0:	08004487 	.word	0x08004487
 80043c4:	08004487 	.word	0x08004487
 80043c8:	08004487 	.word	0x08004487
 80043cc:	08004487 	.word	0x08004487
 80043d0:	08004487 	.word	0x08004487
 80043d4:	08004487 	.word	0x08004487
 80043d8:	08004487 	.word	0x08004487
 80043dc:	08004487 	.word	0x08004487
 80043e0:	08004487 	.word	0x08004487
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	0800444b 	.word	0x0800444b
 80043ec:	08004487 	.word	0x08004487
 80043f0:	08004487 	.word	0x08004487
 80043f4:	08004487 	.word	0x08004487
 80043f8:	08004487 	.word	0x08004487
 80043fc:	0800444b 	.word	0x0800444b
 8004400:	08004487 	.word	0x08004487
 8004404:	08004487 	.word	0x08004487
 8004408:	08004487 	.word	0x08004487
 800440c:	08004487 	.word	0x08004487
 8004410:	08004487 	.word	0x08004487
 8004414:	08004487 	.word	0x08004487
 8004418:	08004487 	.word	0x08004487
 800441c:	08004487 	.word	0x08004487
 8004420:	08004487 	.word	0x08004487
 8004424:	08004459 	.word	0x08004459
 8004428:	08004487 	.word	0x08004487
 800442c:	0800444b 	.word	0x0800444b
 8004430:	08004487 	.word	0x08004487
 8004434:	08004487 	.word	0x08004487
 8004438:	08004479 	.word	0x08004479
			{
			  case 'c':
		  		  va_arg(va, int);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3304      	adds	r3, #4
 8004440:	603b      	str	r3, [r7, #0]
				  ++length;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
				  break;
 8004448:	e025      	b.n	8004496 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	330b      	adds	r3, #11
 800444e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	603b      	str	r3, [r7, #0]
				  break;
 8004456:	e01e      	b.n	8004496 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	603a      	str	r2, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004462:	e002      	b.n	800446a <ts_formatlength+0xe2>
			  			  ++length;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	60ba      	str	r2, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f6      	bne.n	8004464 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004476:	e00e      	b.n	8004496 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3308      	adds	r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3304      	adds	r3, #4
 8004482:	603b      	str	r3, [r7, #0]
				  break;
 8004484:	e007      	b.n	8004496 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3301      	adds	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
				  break;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3301      	adds	r3, #1
 800449a:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f47f af79 	bne.w	8004398 <ts_formatlength+0x10>
	}
	return length;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 80044b4:	b40f      	push	{r0, r1, r2, r3}
 80044b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
	int length = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80044c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044c6:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044cc:	f7ff ff5c 	bl	8004388 <ts_formatlength>
 80044d0:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80044d2:	466b      	mov	r3, sp
 80044d4:	461e      	mov	r6, r3
		char buf[length];
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	1e4b      	subs	r3, r1, #1
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	460b      	mov	r3, r1
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80044e8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80044ec:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80044f0:	460b      	mov	r3, r1
 80044f2:	461a      	mov	r2, r3
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	00dd      	lsls	r5, r3, #3
 80044fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044fe:	00d4      	lsls	r4, r2, #3
 8004500:	460b      	mov	r3, r1
 8004502:	3307      	adds	r3, #7
 8004504:	08db      	lsrs	r3, r3, #3
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	ebad 0d03 	sub.w	sp, sp, r3
 800450c:	466b      	mov	r3, sp
 800450e:	3300      	adds	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004516:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fe9b 	bl	800425a <ts_formatstring>
 8004524:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4619      	mov	r1, r3
 800452c:	2001      	movs	r0, #1
 800452e:	f7ff fd7b 	bl	8004028 <_write>
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004542:	b004      	add	sp, #16
 8004544:	4770      	bx	lr
	...

08004548 <__libc_init_array>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4e0d      	ldr	r6, [pc, #52]	; (8004580 <__libc_init_array+0x38>)
 800454c:	4c0d      	ldr	r4, [pc, #52]	; (8004584 <__libc_init_array+0x3c>)
 800454e:	1ba4      	subs	r4, r4, r6
 8004550:	10a4      	asrs	r4, r4, #2
 8004552:	2500      	movs	r5, #0
 8004554:	42a5      	cmp	r5, r4
 8004556:	d109      	bne.n	800456c <__libc_init_array+0x24>
 8004558:	4e0b      	ldr	r6, [pc, #44]	; (8004588 <__libc_init_array+0x40>)
 800455a:	4c0c      	ldr	r4, [pc, #48]	; (800458c <__libc_init_array+0x44>)
 800455c:	f000 f8e4 	bl	8004728 <_init>
 8004560:	1ba4      	subs	r4, r4, r6
 8004562:	10a4      	asrs	r4, r4, #2
 8004564:	2500      	movs	r5, #0
 8004566:	42a5      	cmp	r5, r4
 8004568:	d105      	bne.n	8004576 <__libc_init_array+0x2e>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004570:	4798      	blx	r3
 8004572:	3501      	adds	r5, #1
 8004574:	e7ee      	b.n	8004554 <__libc_init_array+0xc>
 8004576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800457a:	4798      	blx	r3
 800457c:	3501      	adds	r5, #1
 800457e:	e7f2      	b.n	8004566 <__libc_init_array+0x1e>
 8004580:	08004740 	.word	0x08004740
 8004584:	08004740 	.word	0x08004740
 8004588:	08004740 	.word	0x08004740
 800458c:	08004744 	.word	0x08004744

08004590 <memcpy>:
 8004590:	b510      	push	{r4, lr}
 8004592:	1e43      	subs	r3, r0, #1
 8004594:	440a      	add	r2, r1
 8004596:	4291      	cmp	r1, r2
 8004598:	d100      	bne.n	800459c <memcpy+0xc>
 800459a:	bd10      	pop	{r4, pc}
 800459c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a4:	e7f7      	b.n	8004596 <memcpy+0x6>

080045a6 <memset>:
 80045a6:	4402      	add	r2, r0
 80045a8:	4603      	mov	r3, r0
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d100      	bne.n	80045b0 <memset+0xa>
 80045ae:	4770      	bx	lr
 80045b0:	f803 1b01 	strb.w	r1, [r3], #1
 80045b4:	e7f9      	b.n	80045aa <memset+0x4>
 80045b6:	0000      	movs	r0, r0
 80045b8:	454c4449 	.word	0x454c4449
 80045bc:	00000000 	.word	0x00000000
 80045c0:	20726d54 	.word	0x20726d54
 80045c4:	00637653 	.word	0x00637653
 80045c8:	51726d54 	.word	0x51726d54
 80045cc:	00000000 	.word	0x00000000
 80045d0:	75716552 	.word	0x75716552
 80045d4:	51747365 	.word	0x51747365
 80045d8:	65756575 	.word	0x65756575
 80045dc:	00000000 	.word	0x00000000
 80045e0:	70736552 	.word	0x70736552
 80045e4:	65736e6f 	.word	0x65736e6f
 80045e8:	75657551 	.word	0x75657551
 80045ec:	00000065 	.word	0x00000065
 80045f0:	53204444 	.word	0x53204444
 80045f4:	64656863 	.word	0x64656863
 80045f8:	72656c75 	.word	0x72656c75
 80045fc:	00000000 	.word	0x00000000
 8004600:	54204444 	.word	0x54204444
 8004604:	206b7361 	.word	0x206b7361
 8004608:	656e6547 	.word	0x656e6547
 800460c:	6f746172 	.word	0x6f746172
 8004610:	00312072 	.word	0x00312072
 8004614:	54204444 	.word	0x54204444
 8004618:	206b7361 	.word	0x206b7361
 800461c:	656e6547 	.word	0x656e6547
 8004620:	6f746172 	.word	0x6f746172
 8004624:	00322072 	.word	0x00322072
 8004628:	54204444 	.word	0x54204444
 800462c:	206b7361 	.word	0x206b7361
 8004630:	656e6547 	.word	0x656e6547
 8004634:	6f746172 	.word	0x6f746172
 8004638:	00332072 	.word	0x00332072
 800463c:	696e6f4d 	.word	0x696e6f4d
 8004640:	00726f74 	.word	0x00726f74
 8004644:	656e6547 	.word	0x656e6547
 8004648:	6f746172 	.word	0x6f746172
 800464c:	00312072 	.word	0x00312072
 8004650:	656e6547 	.word	0x656e6547
 8004654:	6f746172 	.word	0x6f746172
 8004658:	00322072 	.word	0x00322072
 800465c:	656e6547 	.word	0x656e6547
 8004660:	6f746172 	.word	0x6f746172
 8004664:	00332072 	.word	0x00332072
 8004668:	72657355 	.word	0x72657355
 800466c:	73615420 	.word	0x73615420
 8004670:	0031206b 	.word	0x0031206b
 8004674:	72657355 	.word	0x72657355
 8004678:	73615420 	.word	0x73615420
 800467c:	0032206b 	.word	0x0032206b
 8004680:	72657355 	.word	0x72657355
 8004684:	73615420 	.word	0x73615420
 8004688:	0033206b 	.word	0x0033206b
 800468c:	4d206e49 	.word	0x4d206e49
 8004690:	74696e6f 	.word	0x74696e6f
 8004694:	6e69726f 	.word	0x6e69726f
 8004698:	61542067 	.word	0x61542067
 800469c:	202c6b73 	.word	0x202c6b73
 80046a0:	72727563 	.word	0x72727563
 80046a4:	20746e65 	.word	0x20746e65
 80046a8:	656d6974 	.word	0x656d6974
 80046ac:	7525203a 	.word	0x7525203a
 80046b0:	0000000a 	.word	0x0000000a
 80046b4:	69746341 	.word	0x69746341
 80046b8:	74206576 	.word	0x74206576
 80046bc:	206b7361 	.word	0x206b7361
 80046c0:	7473696c 	.word	0x7473696c
 80046c4:	756f6320 	.word	0x756f6320
 80046c8:	203a746e 	.word	0x203a746e
 80046cc:	000a6425 	.word	0x000a6425
 80046d0:	706d6f43 	.word	0x706d6f43
 80046d4:	6574656c 	.word	0x6574656c
 80046d8:	73617420 	.word	0x73617420
 80046dc:	696c206b 	.word	0x696c206b
 80046e0:	63207473 	.word	0x63207473
 80046e4:	746e756f 	.word	0x746e756f
 80046e8:	6425203a 	.word	0x6425203a
 80046ec:	0000000a 	.word	0x0000000a
 80046f0:	7265764f 	.word	0x7265764f
 80046f4:	20657564 	.word	0x20657564
 80046f8:	6b736174 	.word	0x6b736174
 80046fc:	73696c20 	.word	0x73696c20
 8004700:	6f632074 	.word	0x6f632074
 8004704:	3a746e75 	.word	0x3a746e75
 8004708:	0a642520 	.word	0x0a642520
 800470c:	00000000 	.word	0x00000000

08004710 <GPIO_PIN>:
 8004710:	20001000 80004000                       ... .@..

08004718 <GPIO_CLK>:
 8004718:	00000008 00000008 00000008 00000008     ................

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
