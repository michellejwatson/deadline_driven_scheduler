
deadline_driven_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  20000000  0800428c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  6 .bss          00001e4c  2000008c  2000008c  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ed8  20001ed8  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e908  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000252f  00000000  00000000  0002e9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cd0  00000000  00000000  00030ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005a96  00000000  00000000  00032760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004798  00000000  00000000  000381f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c98e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003530  00000000  00000000  0003ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800426c 	.word	0x0800426c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800426c 	.word	0x0800426c

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001cb8 	.word	0x20001cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	200000a8 	.word	0x200000a8
 8000530:	200000ac 	.word	0x200000ac
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 face 	bl	8001bc0 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001cb8 	.word	0x20001cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f9ea 	bl	8001a48 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000024 	.word	0x20000024
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	200000a8 	.word	0x200000a8
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	200000ac 	.word	0x200000ac

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f001 f8a8 	bl	80018d4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <pvPortMalloc+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <pvPortMalloc+0x8c>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <pvPortMalloc+0x88>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <pvPortMalloc+0x90>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <pvPortMalloc+0x90>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <pvPortMalloc+0x90>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <pvPortMalloc+0x88>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <pvPortMalloc+0x90>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <pvPortMalloc+0x90>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <pvPortMalloc+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f001 f88e 	bl	80018f0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80007da:	f003 f8f9 	bl	80039d0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001cb4 	.word	0x20001cb4
 80007ec:	200000b8 	.word	0x200000b8
 80007f0:	20001cb0 	.word	0x20001cb0

080007f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <vPortFree+0x22>
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e7fe      	b.n	8000814 <vPortFree+0x20>
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <xPortGetFreeHeapSize+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8000830:	3318      	adds	r3, #24
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20001cb0 	.word	0x20001cb0

08000840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <xQueueGenericReset+0x28>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	e7fe      	b.n	8000866 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000868:	f7ff fe6a 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	68f9      	ldr	r1, [r7, #12]
 8000876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000898:	3b01      	subs	r3, #1
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3310      	adds	r3, #16
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa46 	bl	8001d5c <xTaskRemoveFromEventList>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d012      	beq.n	80008fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <xQueueGenericReset+0xcc>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	e009      	b.n	80008fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3310      	adds	r3, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc6f 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3324      	adds	r3, #36	; 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc6a 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008fc:	f7ff fe4e 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <xQueueGenericCreate+0x28>
 8000924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e7fe      	b.n	8000936 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e004      	b.n	800094e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3348      	adds	r3, #72	; 0x48
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff04 	bl	8000760 <pvPortMalloc>
 8000958:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3348      	adds	r3, #72	; 0x48
 8000964:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4613      	mov	r3, r2
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 f805 	bl	8000982 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000978:	69bb      	ldr	r3, [r7, #24]
	}
 800097a:	4618      	mov	r0, r3
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e002      	b.n	80009a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009b0:	2101      	movs	r1, #1
 80009b2:	69b8      	ldr	r0, [r7, #24]
 80009b4:	f7ff ff44 	bl	8000840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <xQueueGenericSend+0x30>
 80009dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e0:	f383 8811 	msr	BASEPRI, r3
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ee:	e7fe      	b.n	80009ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <xQueueGenericSend+0x3e>
 80009f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <xQueueGenericSend+0x42>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <xQueueGenericSend+0x44>
 8000a02:	2300      	movs	r3, #0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <xQueueGenericSend+0x5c>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d103      	bne.n	8000a2a <xQueueGenericSend+0x6a>
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <xQueueGenericSend+0x6e>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <xQueueGenericSend+0x70>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d109      	bne.n	8000a48 <xQueueGenericSend+0x88>
 8000a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a38:	f383 8811 	msr	BASEPRI, r3
 8000a3c:	f3bf 8f6f 	isb	sy
 8000a40:	f3bf 8f4f 	dsb	sy
 8000a44:	623b      	str	r3, [r7, #32]
 8000a46:	e7fe      	b.n	8000a46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a48:	f001 fb44 	bl	80020d4 <xTaskGetSchedulerState>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <xQueueGenericSend+0x98>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <xQueueGenericSend+0x9c>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <xQueueGenericSend+0x9e>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d109      	bne.n	8000a76 <xQueueGenericSend+0xb6>
 8000a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a66:	f383 8811 	msr	BASEPRI, r3
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	e7fe      	b.n	8000a74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a76:	f7ff fd63 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d302      	bcc.n	8000a8c <xQueueGenericSend+0xcc>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d129      	bne.n	8000ae0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a92:	f000 fa35 	bl	8000f00 <prvCopyDataToQueue>
 8000a96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d010      	beq.n	8000ac2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	3324      	adds	r3, #36	; 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f959 	bl	8001d5c <xTaskRemoveFromEventList>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
 8000ac0:	e00a      	b.n	8000ad8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ad8:	f7ff fd60 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e063      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ae6:	f7ff fd59 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e05c      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d106      	bne.n	8000b02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f991 	bl	8001e20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000b02:	f7ff fd4b 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b06:	f000 fee5 	bl	80018d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b0a:	f7ff fd19 	bl	8000540 <vPortEnterCritical>
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1a:	d103      	bne.n	8000b24 <xQueueGenericSend+0x164>
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSend+0x17a>
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b3a:	f7ff fd2f 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b3e:	1d3a      	adds	r2, r7, #4
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f98e 	bl	8001e68 <xTaskCheckForTimeOut>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d124      	bne.n	8000b9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b54:	f000 facc 	bl	80010f0 <prvIsQueueFull>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d018      	beq.n	8000b90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b60:	3310      	adds	r3, #16
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f8aa 	bl	8001cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b6e:	f000 fa57 	bl	8001020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b72:	f000 febd 	bl	80018f0 <xTaskResumeAll>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f af7c 	bne.w	8000a76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	f3bf 8f6f 	isb	sy
 8000b8e:	e772      	b.n	8000a76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b92:	f000 fa45 	bl	8001020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b96:	f000 feab 	bl	80018f0 <xTaskResumeAll>
 8000b9a:	e76c      	b.n	8000a76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b9e:	f000 fa3f 	bl	8001020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ba2:	f000 fea5 	bl	80018f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ba6:	2300      	movs	r3, #0
		}
	}
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000ed04 	.word	0xe000ed04

08000bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <xQueueGenericSendFromISR+0x2c>
 8000bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd0:	f383 8811 	msr	BASEPRI, r3
 8000bd4:	f3bf 8f6f 	isb	sy
 8000bd8:	f3bf 8f4f 	dsb	sy
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	e7fe      	b.n	8000bde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <xQueueGenericSendFromISR+0x3a>
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <xQueueGenericSendFromISR+0x3e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <xQueueGenericSendFromISR+0x40>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGenericSendFromISR+0x58>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d103      	bne.n	8000c1a <xQueueGenericSendFromISR+0x66>
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <xQueueGenericSendFromISR+0x6a>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <xQueueGenericSendFromISR+0x6c>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <xQueueGenericSendFromISR+0x84>
 8000c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c28:	f383 8811 	msr	BASEPRI, r3
 8000c2c:	f3bf 8f6f 	isb	sy
 8000c30:	f3bf 8f4f 	dsb	sy
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e7fe      	b.n	8000c36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c38:	f7ff fd54 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8000c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	f3bf 8f6f 	isb	sy
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	61ba      	str	r2, [r7, #24]
 8000c52:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d302      	bcc.n	8000c6a <xQueueGenericSendFromISR+0xb6>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d12c      	bne.n	8000cc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7a:	f000 f941 	bl	8000f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c86:	d112      	bne.n	8000cae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 f861 	bl	8001d5c <xTaskRemoveFromEventList>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00e      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b25a      	sxtb	r2, r3
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000cc2:	e001      	b.n	8000cc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <xQueueGenericReceive+0x30>
	__asm volatile
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0a:	e7fe      	b.n	8000d0a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d103      	bne.n	8000d1a <xQueueGenericReceive+0x3e>
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <xQueueGenericReceive+0x42>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <xQueueGenericReceive+0x44>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <xQueueGenericReceive+0x5c>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	e7fe      	b.n	8000d36 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d38:	f001 f9cc 	bl	80020d4 <xTaskGetSchedulerState>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <xQueueGenericReceive+0x6c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <xQueueGenericReceive+0x70>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <xQueueGenericReceive+0x72>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <xQueueGenericReceive+0x8a>
 8000d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	e7fe      	b.n	8000d64 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d66:	f7ff fbeb 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d046      	beq.n	8000e04 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d80:	f000 f928 	bl	8000fd4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d121      	bne.n	8000dce <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d104      	bne.n	8000da4 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000d9a:	f001 fab3 	bl	8002304 <pvTaskIncrementMutexHeldCount>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d027      	beq.n	8000dfc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	3310      	adds	r3, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 ffd3 	bl	8001d5c <xTaskRemoveFromEventList>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01f      	beq.n	8000dfc <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <xQueueGenericReceive+0x220>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
 8000dcc:	e016      	b.n	8000dfc <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dd2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00f      	beq.n	8000dfc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	3324      	adds	r3, #36	; 0x24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 ffbb 	bl	8001d5c <xTaskRemoveFromEventList>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d007      	beq.n	8000dfc <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <xQueueGenericReceive+0x220>)
 8000dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	f3bf 8f4f 	dsb	sy
 8000df8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000dfc:	f7ff fbce 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e077      	b.n	8000ef4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e0a:	f7ff fbc7 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e070      	b.n	8000ef4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 ffff 	bl	8001e20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e2a:	f000 fd53 	bl	80018d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e2e:	f7ff fb87 	bl	8000540 <vPortEnterCritical>
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3e:	d103      	bne.n	8000e48 <xQueueGenericReceive+0x16c>
 8000e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d103      	bne.n	8000e5e <xQueueGenericReceive+0x182>
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e5e:	f7ff fb9d 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fffc 	bl	8001e68 <xTaskCheckForTimeOut>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d131      	bne.n	8000eda <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e78:	f000 f924 	bl	80010c4 <prvIsQueueEmpty>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d025      	beq.n	8000ece <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d108      	bne.n	8000e9c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000e8a:	f7ff fb59 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 f93c 	bl	8002110 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000e98:	f7ff fb80 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9e:	3324      	adds	r3, #36	; 0x24
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 ff0b 	bl	8001cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eac:	f000 f8b8 	bl	8001020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000eb0:	f000 fd1e 	bl	80018f0 <xTaskResumeAll>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f47f af55 	bne.w	8000d66 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <xQueueGenericReceive+0x220>)
 8000ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	e74b      	b.n	8000d66 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ed0:	f000 f8a6 	bl	8001020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000ed4:	f000 fd0c 	bl	80018f0 <xTaskResumeAll>
 8000ed8:	e745      	b.n	8000d66 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000edc:	f000 f8a0 	bl	8001020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ee0:	f000 fd06 	bl	80018f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ee6:	f000 f8ed 	bl	80010c4 <prvIsQueueEmpty>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f43f af3a 	beq.w	8000d66 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3738      	adds	r7, #56	; 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	e000ed04 	.word	0xe000ed04

08000f00 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d14d      	bne.n	8000fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 f966 	bl	80021fc <xTaskPriorityDisinherit>
 8000f30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	e043      	b.n	8000fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d119      	bne.n	8000f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	f003 f886 	bl	800405c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	441a      	add	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d32b      	bcc.n	8000fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	e026      	b.n	8000fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68d8      	ldr	r0, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	f003 f86c 	bl	800405c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	425b      	negs	r3, r3
 8000faa:	441a      	add	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d105      	bne.n	8000fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000fca:	697b      	ldr	r3, [r7, #20]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d018      	beq.n	8001018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	441a      	add	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d303      	bcc.n	8001008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68d9      	ldr	r1, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	461a      	mov	r2, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f003 f822 	bl	800405c <memcpy>
	}
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001028:	f7ff fa8a 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001034:	e011      	b.n	800105a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	2b00      	cmp	r3, #0
 800103c:	d012      	beq.n	8001064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3324      	adds	r3, #36	; 0x24
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fe8a 	bl	8001d5c <xTaskRemoveFromEventList>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800104e:	f000 ff69 	bl	8001f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	3b01      	subs	r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dce9      	bgt.n	8001036 <prvUnlockQueue+0x16>
 8001062:	e000      	b.n	8001066 <prvUnlockQueue+0x46>
					break;
 8001064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800106e:	f7ff fa95 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001072:	f7ff fa65 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800107c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800107e:	e011      	b.n	80010a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3310      	adds	r3, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fe65 	bl	8001d5c <xTaskRemoveFromEventList>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001098:	f000 ff44 	bl	8001f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dce9      	bgt.n	8001080 <prvUnlockQueue+0x60>
 80010ac:	e000      	b.n	80010b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80010ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80010b8:	f7ff fa70 	bl	800059c <vPortExitCritical>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010cc:	f7ff fa38 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e001      	b.n	80010e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010e2:	f7ff fa5b 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010f8:	f7ff fa22 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001104:	429a      	cmp	r2, r3
 8001106:	d102      	bne.n	800110e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e001      	b.n	8001112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e014      	b.n	800115a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <vQueueAddToRegistry+0x4c>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800113c:	490b      	ldr	r1, [pc, #44]	; (800116c <vQueueAddToRegistry+0x4c>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <vQueueAddToRegistry+0x4c>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001152:	e005      	b.n	8001160 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b07      	cmp	r3, #7
 800115e:	d9e7      	bls.n	8001130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20001e10 	.word	0x20001e10

08001170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001180:	f7ff f9de 	bl	8000540 <vPortEnterCritical>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800118a:	b25b      	sxtb	r3, r3
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d103      	bne.n	800119a <vQueueWaitForMessageRestricted+0x2a>
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	d103      	bne.n	80011b0 <vQueueWaitForMessageRestricted+0x40>
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011b0:	f7ff f9f4 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3324      	adds	r3, #36	; 0x24
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd9f 	bl	8001d08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff28 	bl	8001020 <prvUnlockQueue>
	}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af04      	add	r7, sp, #16
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fab7 	bl	8000760 <pvPortMalloc>
 80011f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80011fa:	2050      	movs	r0, #80	; 0x50
 80011fc:	f7ff fab0 	bl	8000760 <pvPortMalloc>
 8001200:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	e005      	b.n	800121c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff faef 	bl	80007f4 <vPortFree>
 8001216:	e001      	b.n	800121c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d013      	beq.n	800124a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	2300      	movs	r3, #0
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f80e 	bl	800125a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800123e:	69f8      	ldr	r0, [r7, #28]
 8001240:	f000 f892 	bl	8001368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	e002      	b.n	8001250 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001250:	69bb      	ldr	r3, [r7, #24]
	}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	461a      	mov	r2, r3
 8001272:	21a5      	movs	r1, #165	; 0xa5
 8001274:	f002 fefd 	bl	8004072 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001282:	3b01      	subs	r3, #1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <prvInitialiseNewTask+0x56>
 800129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a0:	f383 8811 	msr	BASEPRI, r3
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	f3bf 8f4f 	dsb	sy
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e7fe      	b.n	80012ae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e012      	b.n	80012dc <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	7819      	ldrb	r1, [r3, #0]
 80012be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	3334      	adds	r3, #52	; 0x34
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b09      	cmp	r3, #9
 80012e0:	d9e9      	bls.n	80012b6 <prvInitialiseNewTask+0x5c>
 80012e2:	e000      	b.n	80012e6 <prvInitialiseNewTask+0x8c>
		{
			break;
 80012e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d901      	bls.n	80012f8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012f4:	2304      	movs	r3, #4
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	3304      	adds	r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff7e 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	3318      	adds	r3, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff79 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	f1c3 0205 	rsb	r2, r3, #5
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133c:	2200      	movs	r2, #0
 800133e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	69b8      	ldr	r0, [r7, #24]
 8001348:	f7fe fff6 	bl	8000338 <pxPortInitialiseStack>
 800134c:	4602      	mov	r2, r0
 800134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001350:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001370:	f7ff f8e6 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a29      	ldr	r2, [pc, #164]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 800137c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d110      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001394:	f000 fdec 	bl	8001f70 <prvInitialiseTaskLists>
 8001398:	e00d      	b.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <prvAddNewTaskToReadyList+0xc0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d802      	bhi.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <prvAddNewTaskToReadyList+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <prvAddNewTaskToReadyList+0xc4>)
 80013be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	2201      	movs	r2, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <prvAddNewTaskToReadyList+0xc8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <prvAddNewTaskToReadyList+0xc8>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <prvAddNewTaskToReadyList+0xcc>)
 80013e0:	441a      	add	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f7fe ff1e 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80013ee:	f7ff f8d5 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <prvAddNewTaskToReadyList+0xc0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00e      	beq.n	8001418 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <prvAddNewTaskToReadyList+0xd0>)
 800140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20001d90 	.word	0x20001d90
 8001424:	20001cb8 	.word	0x20001cb8
 8001428:	20001d9c 	.word	0x20001d9c
 800142c:	20001dac 	.word	0x20001dac
 8001430:	20001d98 	.word	0x20001d98
 8001434:	20001cbc 	.word	0x20001cbc
 8001438:	e000ed04 	.word	0xe000ed04

0800143c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <vTaskDelay+0x60>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <vTaskDelay+0x2e>
 8001456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	e7fe      	b.n	8001468 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800146a:	f000 fa33 	bl	80018d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 ff5b 	bl	800232c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001476:	f000 fa3b 	bl	80018f0 <xTaskResumeAll>
 800147a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <vTaskDelay+0x64>)
 8001484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20001db8 	.word	0x20001db8
 80014a0:	e000ed04 	.word	0xe000ed04

080014a4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d909      	bls.n	80014cc <vTaskPrioritySet+0x28>
 80014b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014bc:	f383 8811 	msr	BASEPRI, r3
 80014c0:	f3bf 8f6f 	isb	sy
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e7fe      	b.n	80014ca <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d901      	bls.n	80014d6 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014d2:	2304      	movs	r3, #4
 80014d4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80014d6:	f7ff f833 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <vTaskPrioritySet+0x42>
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <vTaskPrioritySet+0x14c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e000      	b.n	80014e8 <vTaskPrioritySet+0x44>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d074      	beq.n	80015e2 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d90d      	bls.n	800151c <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <vTaskPrioritySet+0x14c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	429a      	cmp	r2, r3
 8001508:	d00f      	beq.n	800152a <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <vTaskPrioritySet+0x14c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d809      	bhi.n	800152a <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e006      	b.n	800152a <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <vTaskPrioritySet+0x14c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	429a      	cmp	r2, r3
 8001524:	d101      	bne.n	800152a <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	429a      	cmp	r2, r3
 800153a:	d102      	bne.n	8001542 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db04      	blt.n	800155a <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f1c3 0205 	rsb	r2, r3, #5
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	6959      	ldr	r1, [r3, #20]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <vTaskPrioritySet+0x150>)
 800156a:	4413      	add	r3, r2
 800156c:	4299      	cmp	r1, r3
 800156e:	d101      	bne.n	8001574 <vTaskPrioritySet+0xd0>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <vTaskPrioritySet+0xd2>
 8001574:	2300      	movs	r3, #0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d028      	beq.n	80015cc <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	3304      	adds	r3, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe feb0 	bl	80002e4 <uxListRemove>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800158a:	2201      	movs	r2, #1
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <vTaskPrioritySet+0x154>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4013      	ands	r3, r2
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <vTaskPrioritySet+0x154>)
 800159c:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <vTaskPrioritySet+0x154>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <vTaskPrioritySet+0x154>)
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <vTaskPrioritySet+0x150>)
 80015be:	441a      	add	r2, r3
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	3304      	adds	r3, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f7fe fe2f 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <vTaskPrioritySet+0x158>)
 80015d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80015e2:	f7fe ffdb 	bl	800059c <vPortExitCritical>
	}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20001cb8 	.word	0x20001cb8
 80015f4:	20001cbc 	.word	0x20001cbc
 80015f8:	20001d98 	.word	0x20001d98
 80015fc:	e000ed04 	.word	0xe000ed04

08001600 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001608:	f7fe ff9a 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <vTaskSuspend+0x18>
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <vTaskSuspend+0xf0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	e000      	b.n	800161a <vTaskSuspend+0x1a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3304      	adds	r3, #4
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fe5f 	bl	80002e4 <uxListRemove>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d115      	bne.n	8001658 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	4930      	ldr	r1, [pc, #192]	; (80016f4 <vTaskSuspend+0xf4>)
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10a      	bne.n	8001658 <vTaskSuspend+0x58>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	2201      	movs	r2, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <vTaskSuspend+0xf8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4013      	ands	r3, r2
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <vTaskSuspend+0xf8>)
 8001656:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3318      	adds	r3, #24
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fe3d 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3304      	adds	r3, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4822      	ldr	r0, [pc, #136]	; (80016fc <vTaskSuspend+0xfc>)
 8001672:	f7fe fdda 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001676:	f7fe ff91 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <vTaskSuspend+0x100>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001682:	f7fe ff5d 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001686:	f000 fcff 	bl	8002088 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800168a:	f7fe ff87 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <vTaskSuspend+0xf0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d126      	bne.n	80016e6 <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <vTaskSuspend+0x100>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d016      	beq.n	80016ce <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <vTaskSuspend+0x104>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <vTaskSuspend+0xbc>
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	e7fe      	b.n	80016ba <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <vTaskSuspend+0x108>)
 80016be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f3bf 8f4f 	dsb	sy
 80016c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80016cc:	e00b      	b.n	80016e6 <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <vTaskSuspend+0xfc>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <vTaskSuspend+0x10c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d103      	bne.n	80016e2 <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <vTaskSuspend+0xf0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
	}
 80016e0:	e001      	b.n	80016e6 <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 80016e2:	f000 fa6d 	bl	8001bc0 <vTaskSwitchContext>
	}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001cb8 	.word	0x20001cb8
 80016f4:	20001cbc 	.word	0x20001cbc
 80016f8:	20001d98 	.word	0x20001d98
 80016fc:	20001d7c 	.word	0x20001d7c
 8001700:	20001d9c 	.word	0x20001d9c
 8001704:	20001db8 	.word	0x20001db8
 8001708:	e000ed04 	.word	0xe000ed04
 800170c:	20001d90 	.word	0x20001d90

08001710 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <prvTaskIsTaskSuspended+0x2a>
 8001726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e7fe      	b.n	8001738 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <prvTaskIsTaskSuspended+0x6c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <prvTaskIsTaskSuspended+0x38>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <prvTaskIsTaskSuspended+0x3a>
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <prvTaskIsTaskSuspended+0x70>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00a      	beq.n	800176e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <prvTaskIsTaskSuspended+0x54>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <prvTaskIsTaskSuspended+0x56>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800176e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20001d7c 	.word	0x20001d7c
 8001780:	20001d50 	.word	0x20001d50

08001784 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <vTaskResume+0x26>
 8001796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179a:	f383 8811 	msr	BASEPRI, r3
 800179e:	f3bf 8f6f 	isb	sy
 80017a2:	f3bf 8f4f 	dsb	sy
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e7fe      	b.n	80017a8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d039      	beq.n	8001824 <vTaskResume+0xa0>
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <vTaskResume+0xa8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d034      	beq.n	8001824 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80017ba:	f7fe fec1 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ffa6 	bl	8001710 <prvTaskIsTaskSuspended>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d02a      	beq.n	8001820 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd88 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2201      	movs	r2, #1
 80017da:	409a      	lsls	r2, r3
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <vTaskResume+0xac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <vTaskResume+0xac>)
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <vTaskResume+0xb0>)
 80017f4:	441a      	add	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7fe fd14 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <vTaskResume+0xa8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	429a      	cmp	r2, r3
 800180e:	d307      	bcc.n	8001820 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <vTaskResume+0xb4>)
 8001812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001820:	f7fe febc 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20001cb8 	.word	0x20001cb8
 8001830:	20001d98 	.word	0x20001d98
 8001834:	20001cbc 	.word	0x20001cbc
 8001838:	e000ed04 	.word	0xe000ed04

0800183c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <vTaskStartScheduler+0x80>)
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	2282      	movs	r2, #130	; 0x82
 800184e:	491c      	ldr	r1, [pc, #112]	; (80018c0 <vTaskStartScheduler+0x84>)
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <vTaskStartScheduler+0x88>)
 8001852:	f7ff fcc1 	bl	80011d8 <xTaskCreate>
 8001856:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800185e:	f000 fdcb 	bl	80023f8 <xTimerCreateTimerTask>
 8001862:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d115      	bne.n	8001896 <vTaskStartScheduler+0x5a>
 800186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <vTaskStartScheduler+0x8c>)
 800187e:	f04f 32ff 	mov.w	r2, #4294967295
 8001882:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <vTaskStartScheduler+0x90>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <vTaskStartScheduler+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001890:	f7fe fdca 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001894:	e00d      	b.n	80018b2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d109      	bne.n	80018b2 <vTaskStartScheduler+0x76>
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	e7fe      	b.n	80018b0 <vTaskStartScheduler+0x74>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20001db4 	.word	0x20001db4
 80018c0:	08004124 	.word	0x08004124
 80018c4:	08001f3d 	.word	0x08001f3d
 80018c8:	20001db0 	.word	0x20001db0
 80018cc:	20001d9c 	.word	0x20001d9c
 80018d0:	20001d94 	.word	0x20001d94

080018d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <vTaskSuspendAll+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	4a03      	ldr	r2, [pc, #12]	; (80018ec <vTaskSuspendAll+0x18>)
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20001db8 	.word	0x20001db8

080018f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <xTaskResumeAll+0x114>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <xTaskResumeAll+0x2a>
 8001906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	e7fe      	b.n	8001918 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800191a:	f7fe fe11 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <xTaskResumeAll+0x114>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <xTaskResumeAll+0x114>)
 8001926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <xTaskResumeAll+0x114>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d161      	bne.n	80019f4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001930:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <xTaskResumeAll+0x118>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d05d      	beq.n	80019f4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001938:	e02e      	b.n	8001998 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <xTaskResumeAll+0x11c>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3318      	adds	r3, #24
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fccc 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3304      	adds	r3, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fcc7 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	2201      	movs	r2, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <xTaskResumeAll+0x120>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <xTaskResumeAll+0x120>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <xTaskResumeAll+0x124>)
 8001976:	441a      	add	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3304      	adds	r3, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f7fe fc53 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <xTaskResumeAll+0x128>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d302      	bcc.n	8001998 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <xTaskResumeAll+0x12c>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <xTaskResumeAll+0x11c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1cc      	bne.n	800193a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80019a6:	f000 fb6f 	bl	8002088 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <xTaskResumeAll+0x130>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019b6:	f000 f847 	bl	8001a48 <xTaskIncrementTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <xTaskResumeAll+0x12c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f1      	bne.n	80019b6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <xTaskResumeAll+0x130>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <xTaskResumeAll+0x12c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <xTaskResumeAll+0x134>)
 80019e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80019f4:	f7fe fdd2 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 80019f8:	68bb      	ldr	r3, [r7, #8]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20001db8 	.word	0x20001db8
 8001a08:	20001d90 	.word	0x20001d90
 8001a0c:	20001d50 	.word	0x20001d50
 8001a10:	20001d98 	.word	0x20001d98
 8001a14:	20001cbc 	.word	0x20001cbc
 8001a18:	20001cb8 	.word	0x20001cb8
 8001a1c:	20001da4 	.word	0x20001da4
 8001a20:	20001da0 	.word	0x20001da0
 8001a24:	e000ed04 	.word	0xe000ed04

08001a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <xTaskGetTickCount+0x1c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20001d94 	.word	0x20001d94

08001a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a52:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <xTaskIncrementTick+0x14c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 808c 	bne.w	8001b74 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <xTaskIncrementTick+0x150>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <xTaskIncrementTick+0x150>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d11f      	bne.n	8001ab0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a70:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <xTaskIncrementTick+0x46>
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	e7fe      	b.n	8001a8c <xTaskIncrementTick+0x44>
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <xTaskIncrementTick+0x158>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a40      	ldr	r2, [pc, #256]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <xTaskIncrementTick+0x158>)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <xTaskIncrementTick+0x15c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <xTaskIncrementTick+0x15c>)
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	f000 faec 	bl	8002088 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <xTaskIncrementTick+0x160>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d34d      	bcc.n	8001b56 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <xTaskIncrementTick+0x80>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <xTaskIncrementTick+0x82>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <xTaskIncrementTick+0x160>)
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	601a      	str	r2, [r3, #0]
					break;
 8001ad6:	e03e      	b.n	8001b56 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d203      	bcs.n	8001af8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001af0:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <xTaskIncrementTick+0x160>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
						break;
 8001af6:	e02e      	b.n	8001b56 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fbf1 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fbe8 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2201      	movs	r2, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <xTaskIncrementTick+0x164>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	4a22      	ldr	r2, [pc, #136]	; (8001bac <xTaskIncrementTick+0x164>)
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <xTaskIncrementTick+0x168>)
 8001b34:	441a      	add	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7fe fb74 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <xTaskIncrementTick+0x16c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d3b4      	bcc.n	8001aba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b54:	e7b1      	b.n	8001aba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <xTaskIncrementTick+0x16c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	4914      	ldr	r1, [pc, #80]	; (8001bb0 <xTaskIncrementTick+0x168>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d907      	bls.n	8001b7e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e004      	b.n	8001b7e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <xTaskIncrementTick+0x170>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <xTaskIncrementTick+0x170>)
 8001b7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <xTaskIncrementTick+0x174>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b8a:	697b      	ldr	r3, [r7, #20]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20001db8 	.word	0x20001db8
 8001b98:	20001d94 	.word	0x20001d94
 8001b9c:	20001d48 	.word	0x20001d48
 8001ba0:	20001d4c 	.word	0x20001d4c
 8001ba4:	20001da8 	.word	0x20001da8
 8001ba8:	20001db0 	.word	0x20001db0
 8001bac:	20001d98 	.word	0x20001d98
 8001bb0:	20001cbc 	.word	0x20001cbc
 8001bb4:	20001cb8 	.word	0x20001cb8
 8001bb8:	20001da0 	.word	0x20001da0
 8001bbc:	20001da4 	.word	0x20001da4

08001bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <vTaskSwitchContext+0xec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <vTaskSwitchContext+0xf0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001bd4:	e065      	b.n	8001ca2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <vTaskSwitchContext+0xf0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <vTaskSwitchContext+0xf4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d111      	bne.n	8001c18 <vTaskSwitchContext+0x58>
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10b      	bne.n	8001c18 <vTaskSwitchContext+0x58>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	3308      	adds	r3, #8
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d105      	bne.n	8001c18 <vTaskSwitchContext+0x58>
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d008      	beq.n	8001c2a <vTaskSwitchContext+0x6a>
 8001c18:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <vTaskSwitchContext+0xf4>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <vTaskSwitchContext+0xf4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3334      	adds	r3, #52	; 0x34
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f001 fed6 	bl	80039d6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <vTaskSwitchContext+0xf8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	f1c3 031f 	rsb	r3, r3, #31
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	491e      	ldr	r1, [pc, #120]	; (8001cbc <vTaskSwitchContext+0xfc>)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	e7fe      	b.n	8001c66 <vTaskSwitchContext+0xa6>
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <vTaskSwitchContext+0xfc>)
 8001c74:	4413      	add	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	3308      	adds	r3, #8
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d104      	bne.n	8001c98 <vTaskSwitchContext+0xd8>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <vTaskSwitchContext+0xf4>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20001db8 	.word	0x20001db8
 8001cb0:	20001da4 	.word	0x20001da4
 8001cb4:	20001cb8 	.word	0x20001cb8
 8001cb8:	20001d98 	.word	0x20001d98
 8001cbc:	20001cbc 	.word	0x20001cbc

08001cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <vTaskPlaceOnEventList+0x24>
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e7fe      	b.n	8001ce2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <vTaskPlaceOnEventList+0x44>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3318      	adds	r3, #24
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fac0 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f000 fb19 	bl	800232c <prvAddCurrentTaskToDelayedList>
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20001cb8 	.word	0x20001cb8

08001d08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <vTaskPlaceOnEventListRestricted+0x26>
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e7fe      	b.n	8001d2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <vTaskPlaceOnEventListRestricted+0x50>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3318      	adds	r3, #24
 8001d34:	4619      	mov	r1, r3
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7fe fa77 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f000 faee 	bl	800232c <prvAddCurrentTaskToDelayedList>
	}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20001cb8 	.word	0x20001cb8

08001d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <xTaskRemoveFromEventList+0x2a>
 8001d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e7fe      	b.n	8001d84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe faaa 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <xTaskRemoveFromEventList+0xac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11c      	bne.n	8001dd2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe faa1 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	2201      	movs	r2, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <xTaskRemoveFromEventList+0xb0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <xTaskRemoveFromEventList+0xb0>)
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <xTaskRemoveFromEventList+0xb4>)
 8001dc2:	441a      	add	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f7fe fa2d 	bl	800022a <vListInsertEnd>
 8001dd0:	e005      	b.n	8001dde <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <xTaskRemoveFromEventList+0xb8>)
 8001dda:	f7fe fa26 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <xTaskRemoveFromEventList+0xbc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d905      	bls.n	8001df8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <xTaskRemoveFromEventList+0xc0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e001      	b.n	8001dfc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001dfc:	697b      	ldr	r3, [r7, #20]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20001db8 	.word	0x20001db8
 8001e0c:	20001d98 	.word	0x20001d98
 8001e10:	20001cbc 	.word	0x20001cbc
 8001e14:	20001d50 	.word	0x20001d50
 8001e18:	20001cb8 	.word	0x20001cb8
 8001e1c:	20001da4 	.word	0x20001da4

08001e20 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <vTaskSetTimeOutState+0x22>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e7fe      	b.n	8001e40 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <vTaskSetTimeOutState+0x40>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <vTaskSetTimeOutState+0x44>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20001da8 	.word	0x20001da8
 8001e64:	20001d94 	.word	0x20001d94

08001e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <xTaskCheckForTimeOut+0x24>
 8001e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	f3bf 8f4f 	dsb	sy
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e7fe      	b.n	8001e8a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <xTaskCheckForTimeOut+0x3e>
 8001e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	e7fe      	b.n	8001ea4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001ea6:	f7fe fb4b 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <xTaskCheckForTimeOut+0xb4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d102      	bne.n	8001ec0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e026      	b.n	8001f0e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <xTaskCheckForTimeOut+0xb8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d007      	beq.n	8001edc <xTaskCheckForTimeOut+0x74>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d802      	bhi.n	8001edc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e018      	b.n	8001f0e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d20e      	bcs.n	8001f0a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1acb      	subs	r3, r1, r3
 8001ef8:	441a      	add	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff8e 	bl	8001e20 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e001      	b.n	8001f0e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001f0e:	f7fe fb45 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001f12:	697b      	ldr	r3, [r7, #20]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20001d94 	.word	0x20001d94
 8001f20:	20001da8 	.word	0x20001da8

08001f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <vTaskMissedYield+0x14>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20001da4 	.word	0x20001da4

08001f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f44:	f000 f854 	bl	8001ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <prvIdleTask+0x2c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d907      	bls.n	8001f60 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <prvIdleTask+0x30>)
 8001f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001f60:	f001 fd3f 	bl	80039e2 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001f64:	e7ee      	b.n	8001f44 <prvIdleTask+0x8>
 8001f66:	bf00      	nop
 8001f68:	20001cbc 	.word	0x20001cbc
 8001f6c:	e000ed04 	.word	0xe000ed04

08001f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	e00c      	b.n	8001f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <prvInitialiseTaskLists+0x60>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe f920 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d9ef      	bls.n	8001f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <prvInitialiseTaskLists+0x64>)
 8001f9e:	f7fe f917 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <prvInitialiseTaskLists+0x68>)
 8001fa4:	f7fe f914 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <prvInitialiseTaskLists+0x6c>)
 8001faa:	f7fe f911 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001fae:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <prvInitialiseTaskLists+0x70>)
 8001fb0:	f7fe f90e 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <prvInitialiseTaskLists+0x74>)
 8001fb6:	f7fe f90b 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <prvInitialiseTaskLists+0x78>)
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <prvInitialiseTaskLists+0x64>)
 8001fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <prvInitialiseTaskLists+0x7c>)
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <prvInitialiseTaskLists+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20001cbc 	.word	0x20001cbc
 8001fd4:	20001d20 	.word	0x20001d20
 8001fd8:	20001d34 	.word	0x20001d34
 8001fdc:	20001d50 	.word	0x20001d50
 8001fe0:	20001d64 	.word	0x20001d64
 8001fe4:	20001d7c 	.word	0x20001d7c
 8001fe8:	20001d48 	.word	0x20001d48
 8001fec:	20001d4c 	.word	0x20001d4c

08001ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ff6:	e028      	b.n	800204a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001ff8:	f7ff fc6c 	bl	80018d4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <prvCheckTasksWaitingTermination+0x6c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800200c:	f7ff fc70 	bl	80018f0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002016:	f7fe fa93 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <prvCheckTasksWaitingTermination+0x6c>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f95c 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <prvCheckTasksWaitingTermination+0x70>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <prvCheckTasksWaitingTermination+0x70>)
 8002034:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <prvCheckTasksWaitingTermination+0x74>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3b01      	subs	r3, #1
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <prvCheckTasksWaitingTermination+0x74>)
 800203e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002040:	f7fe faac 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002044:	6838      	ldr	r0, [r7, #0]
 8002046:	f000 f80f 	bl	8002068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <prvCheckTasksWaitingTermination+0x74>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1d2      	bne.n	8001ff8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20001d64 	.word	0x20001d64
 8002060:	20001d90 	.word	0x20001d90
 8002064:	20001d78 	.word	0x20001d78

08002068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fbbd 	bl	80007f4 <vPortFree>
			vPortFree( pxTCB );
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fbba 	bl	80007f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <prvResetNextTaskUnblockTime+0x44>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <prvResetNextTaskUnblockTime+0x14>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <prvResetNextTaskUnblockTime+0x16>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <prvResetNextTaskUnblockTime+0x48>)
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020aa:	e008      	b.n	80020be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <prvResetNextTaskUnblockTime+0x44>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <prvResetNextTaskUnblockTime+0x48>)
 80020bc:	6013      	str	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20001d48 	.word	0x20001d48
 80020d0:	20001db0 	.word	0x20001db0

080020d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <xTaskGetSchedulerState+0x34>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80020e2:	2301      	movs	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	e008      	b.n	80020fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <xTaskGetSchedulerState+0x38>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80020f0:	2302      	movs	r3, #2
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	e001      	b.n	80020fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80020fa:	687b      	ldr	r3, [r7, #4]
	}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20001d9c 	.word	0x20001d9c
 800210c:	20001db8 	.word	0x20001db8

08002110 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d062      	beq.n	80021e8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <vTaskPriorityInherit+0xe0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	429a      	cmp	r2, r3
 800212e:	d25b      	bcs.n	80021e8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db06      	blt.n	8002146 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <vTaskPriorityInherit+0xe0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f1c3 0205 	rsb	r2, r3, #5
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <vTaskPriorityInherit+0xe4>)
 8002158:	4413      	add	r3, r2
 800215a:	4299      	cmp	r1, r3
 800215c:	d101      	bne.n	8002162 <vTaskPriorityInherit+0x52>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <vTaskPriorityInherit+0x54>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03a      	beq.n	80021de <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3304      	adds	r3, #4
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f8b9 	bl	80002e4 <uxListRemove>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d115      	bne.n	80021a4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	491d      	ldr	r1, [pc, #116]	; (80021f4 <vTaskPriorityInherit+0xe4>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <vTaskPriorityInherit+0x94>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	2201      	movs	r2, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <vTaskPriorityInherit+0xe8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4013      	ands	r3, r2
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <vTaskPriorityInherit+0xe8>)
 80021a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <vTaskPriorityInherit+0xe0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	2201      	movs	r2, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <vTaskPriorityInherit+0xe8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <vTaskPriorityInherit+0xe8>)
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <vTaskPriorityInherit+0xe4>)
 80021ce:	441a      	add	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f7fe f827 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021dc:	e004      	b.n	80021e8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <vTaskPriorityInherit+0xe0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20001cb8 	.word	0x20001cb8
 80021f4:	20001cbc 	.word	0x20001cbc
 80021f8:	20001d98 	.word	0x20001d98

080021fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06c      	beq.n	80022ec <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <xTaskPriorityDisinherit+0xfc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d009      	beq.n	8002230 <xTaskPriorityDisinherit+0x34>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e7fe      	b.n	800222e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <xTaskPriorityDisinherit+0x50>
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	e7fe      	b.n	800224a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	429a      	cmp	r2, r3
 8002260:	d044      	beq.n	80022ec <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	2b00      	cmp	r3, #0
 8002268:	d140      	bne.n	80022ec <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3304      	adds	r3, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f838 	bl	80002e4 <uxListRemove>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	491f      	ldr	r1, [pc, #124]	; (80022fc <xTaskPriorityDisinherit+0x100>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <xTaskPriorityDisinherit+0xaa>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <xTaskPriorityDisinherit+0x104>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4013      	ands	r3, r2
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <xTaskPriorityDisinherit+0x104>)
 80022a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f1c3 0205 	rsb	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	2201      	movs	r2, #1
 80022c0:	409a      	lsls	r2, r3
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <xTaskPriorityDisinherit+0x104>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <xTaskPriorityDisinherit+0x104>)
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <xTaskPriorityDisinherit+0x100>)
 80022da:	441a      	add	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	3304      	adds	r3, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f7fd ffa1 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022ec:	697b      	ldr	r3, [r7, #20]
	}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20001cb8 	.word	0x20001cb8
 80022fc:	20001cbc 	.word	0x20001cbc
 8002300:	20001d98 	.word	0x20001d98

08002304 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <pvTaskIncrementMutexHeldCount+0x24>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <pvTaskIncrementMutexHeldCount+0x24>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002316:	3201      	adds	r2, #1
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800231a:	4b03      	ldr	r3, [pc, #12]	; (8002328 <pvTaskIncrementMutexHeldCount+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
	}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20001cb8 	.word	0x20001cb8

0800232c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ffce 	bl	80002e4 <uxListRemove>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2201      	movs	r2, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4013      	ands	r3, r2
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002364:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d10a      	bne.n	8002384 <prvAddCurrentTaskToDelayedList+0x58>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3304      	adds	r3, #4
 800237a:	4619      	mov	r1, r3
 800237c:	481a      	ldr	r0, [pc, #104]	; (80023e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800237e:	f7fd ff54 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002382:	e026      	b.n	80023d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d209      	bcs.n	80023b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f7fd ff62 	bl	8000272 <vListInsert>
}
 80023ae:	e010      	b.n	80023d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fd ff58 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d202      	bcs.n	80023d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80023cc:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20001d94 	.word	0x20001d94
 80023e0:	20001cb8 	.word	0x20001cb8
 80023e4:	20001d98 	.word	0x20001d98
 80023e8:	20001d7c 	.word	0x20001d7c
 80023ec:	20001d4c 	.word	0x20001d4c
 80023f0:	20001d48 	.word	0x20001d48
 80023f4:	20001db0 	.word	0x20001db0

080023f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002402:	f000 fadd 	bl	80029c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <xTimerCreateTimerTask+0x54>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <xTimerCreateTimerTask+0x58>)
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2303      	movs	r3, #3
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800241c:	490d      	ldr	r1, [pc, #52]	; (8002454 <xTimerCreateTimerTask+0x5c>)
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <xTimerCreateTimerTask+0x60>)
 8002420:	f7fe feda 	bl	80011d8 <xTaskCreate>
 8002424:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <xTimerCreateTimerTask+0x48>
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	e7fe      	b.n	800243e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20001dec 	.word	0x20001dec
 8002450:	20001df0 	.word	0x20001df0
 8002454:	0800412c 	.word	0x0800412c
 8002458:	08002611 	.word	0x08002611

0800245c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800246a:	2028      	movs	r0, #40	; 0x28
 800246c:	f7fe f978 	bl	8000760 <pvPortMalloc>
 8002470:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f805 	bl	8002496 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800248c:	697b      	ldr	r3, [r7, #20]
	}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <prvInitialiseNewTimer+0x28>
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e7fe      	b.n	80024bc <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80024c4:	f000 fa7c 	bl	80029c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3304      	adds	r3, #4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd fe90 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <xTimerGenericCommand+0x2c>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	e7fe      	b.n	8002522 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <xTimerGenericCommand+0x94>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02a      	beq.n	8002582 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b05      	cmp	r3, #5
 800253c:	dc18      	bgt.n	8002570 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800253e:	f7ff fdc9 	bl	80020d4 <xTaskGetSchedulerState>
 8002542:	4603      	mov	r3, r0
 8002544:	2b02      	cmp	r3, #2
 8002546:	d109      	bne.n	800255c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <xTimerGenericCommand+0x94>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f107 0114 	add.w	r1, r7, #20
 8002550:	2300      	movs	r3, #0
 8002552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002554:	f7fe fa34 	bl	80009c0 <xQueueGenericSend>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
 800255a:	e012      	b.n	8002582 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <xTimerGenericCommand+0x94>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f107 0114 	add.w	r1, r7, #20
 8002564:	2300      	movs	r3, #0
 8002566:	2200      	movs	r2, #0
 8002568:	f7fe fa2a 	bl	80009c0 <xQueueGenericSend>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24
 800256e:	e008      	b.n	8002582 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <xTimerGenericCommand+0x94>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f107 0114 	add.w	r1, r7, #20
 8002578:	2300      	movs	r3, #0
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	f7fe fb1a 	bl	8000bb4 <xQueueGenericSendFromISR>
 8002580:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002584:	4618      	mov	r0, r3
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20001dec 	.word	0x20001dec

08002590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <prvProcessExpiredTimer+0x7c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd fe9b 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d121      	bne.n	80025fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f000 f8c8 	bl	8002758 <prvInsertTimerInActiveList>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	2100      	movs	r1, #0
 80025d8:	6978      	ldr	r0, [r7, #20]
 80025da:	f7ff ff8d 	bl	80024f8 <xTimerGenericCommand>
 80025de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <prvProcessExpiredTimer+0x6a>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e7fe      	b.n	80025f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	4798      	blx	r3
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20001de4 	.word	0x20001de4

08002610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f857 	bl	80026d0 <prvGetNextExpireTime>
 8002622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4619      	mov	r1, r3
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f803 	bl	8002634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800262e:	f000 f8d5 	bl	80027dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002632:	e7f1      	b.n	8002618 <prvTimerTask+0x8>

08002634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800263e:	f7ff f949 	bl	80018d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f866 	bl	8002718 <prvSampleTimeNow>
 800264c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d130      	bne.n	80026b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <prvProcessTimerOrBlockTask+0x3c>
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	d806      	bhi.n	8002670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002662:	f7ff f945 	bl	80018f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff91 	bl	8002590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800266e:	e024      	b.n	80026ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <prvProcessTimerOrBlockTask+0x90>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <prvProcessTimerOrBlockTask+0x94>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe fd6b 	bl	8001170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800269a:	f7ff f929 	bl	80018f0 <xTaskResumeAll>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <prvProcessTimerOrBlockTask+0x98>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
}
 80026b4:	e001      	b.n	80026ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80026b6:	f7ff f91b 	bl	80018f0 <xTaskResumeAll>
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20001de8 	.word	0x20001de8
 80026c8:	20001dec 	.word	0x20001dec
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <prvGetNextExpireTime+0x44>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <prvGetNextExpireTime+0x44>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e001      	b.n	8002706 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20001de4 	.word	0x20001de4

08002718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002720:	f7ff f982 	bl	8001a28 <xTaskGetTickCount>
 8002724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <prvSampleTimeNow+0x3c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d205      	bcs.n	800273c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002730:	f000 f8e6 	bl	8002900 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e002      	b.n	8002742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <prvSampleTimeNow+0x3c>)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20001df4 	.word	0x20001df4

08002758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d812      	bhi.n	80027a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	1ad2      	subs	r2, r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e01b      	b.n	80027ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <prvInsertTimerInActiveList+0x7c>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fd fd68 	bl	8000272 <vListInsert>
 80027a2:	e012      	b.n	80027ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d206      	bcs.n	80027ba <prvInsertTimerInActiveList+0x62>
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e007      	b.n	80027ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <prvInsertTimerInActiveList+0x80>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3304      	adds	r3, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7fd fd54 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80027ca:	697b      	ldr	r3, [r7, #20]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20001de8 	.word	0x20001de8
 80027d8:	20001de4 	.word	0x20001de4

080027dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08c      	sub	sp, #48	; 0x30
 80027e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027e2:	e07a      	b.n	80028da <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db77      	blt.n	80028da <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3304      	adds	r3, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fd72 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff88 	bl	8002718 <prvSampleTimeNow>
 8002808:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d863      	bhi.n	80028d8 <prvProcessReceivedCommands+0xfc>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <prvProcessReceivedCommands+0x3c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002841 	.word	0x08002841
 800281c:	08002841 	.word	0x08002841
 8002820:	08002841 	.word	0x08002841
 8002824:	080028db 	.word	0x080028db
 8002828:	0800289b 	.word	0x0800289b
 800282c:	080028d1 	.word	0x080028d1
 8002830:	08002841 	.word	0x08002841
 8002834:	08002841 	.word	0x08002841
 8002838:	080028db 	.word	0x080028db
 800283c:	0800289b 	.word	0x0800289b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	18d1      	adds	r1, r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800284e:	f7ff ff83 	bl	8002758 <prvInsertTimerInActiveList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d040      	beq.n	80028da <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d138      	bne.n	80028da <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	441a      	add	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	2100      	movs	r1, #0
 8002878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800287a:	f7ff fe3d 	bl	80024f8 <xTimerGenericCommand>
 800287e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d129      	bne.n	80028da <prvProcessReceivedCommands+0xfe>
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e7fe      	b.n	8002898 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <prvProcessReceivedCommands+0xe0>
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e7fe      	b.n	80028ba <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	18d1      	adds	r1, r2, r3
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	6a3a      	ldr	r2, [r7, #32]
 80028c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ca:	f7ff ff45 	bl	8002758 <prvInsertTimerInActiveList>
					break;
 80028ce:	e004      	b.n	80028da <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80028d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d2:	f7fd ff8f 	bl	80007f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80028d6:	e000      	b.n	80028da <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80028d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <prvProcessReceivedCommands+0x120>)
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	f107 0108 	add.w	r1, r7, #8
 80028e2:	2300      	movs	r3, #0
 80028e4:	2200      	movs	r2, #0
 80028e6:	f7fe f9f9 	bl	8000cdc <xQueueGenericReceive>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af79 	bne.w	80027e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80028f2:	bf00      	nop
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20001dec 	.word	0x20001dec

08002900 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002906:	e044      	b.n	8002992 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	3304      	adds	r3, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fcdf 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	6938      	ldr	r0, [r7, #16]
 800292c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12d      	bne.n	8002992 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d90e      	bls.n	8002966 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fd fc87 	bl	8000272 <vListInsert>
 8002964:	e015      	b.n	8002992 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	2100      	movs	r1, #0
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	f7ff fdc1 	bl	80024f8 <xTimerGenericCommand>
 8002976:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <prvSwitchTimerLists+0x92>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	e7fe      	b.n	8002990 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1b5      	bne.n	8002908 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <prvSwitchTimerLists+0xbc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <prvSwitchTimerLists+0xb8>)
 80029a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <prvSwitchTimerLists+0xbc>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20001de4 	.word	0x20001de4
 80029bc:	20001de8 	.word	0x20001de8

080029c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80029c4:	f7fd fdbc 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80029d0:	4811      	ldr	r0, [pc, #68]	; (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029d2:	f7fd fbfd 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80029d6:	4811      	ldr	r0, [pc, #68]	; (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029d8:	f7fd fbfa 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <prvCheckForValidListAndQueue+0x60>)
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029e0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <prvCheckForValidListAndQueue+0x64>)
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029e6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80029e8:	2200      	movs	r2, #0
 80029ea:	210c      	movs	r1, #12
 80029ec:	2005      	movs	r0, #5
 80029ee:	f7fd ff8f 	bl	8000910 <xQueueGenericCreate>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4908      	ldr	r1, [pc, #32]	; (8002a28 <prvCheckForValidListAndQueue+0x68>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fb8a 	bl	8001120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a0c:	f7fd fdc6 	bl	800059c <vPortExitCritical>
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20001dec 	.word	0x20001dec
 8002a18:	20001dbc 	.word	0x20001dbc
 8002a1c:	20001dd0 	.word	0x20001dd0
 8002a20:	20001de4 	.word	0x20001de4
 8002a24:	20001de8 	.word	0x20001de8
 8002a28:	08004134 	.word	0x08004134

08002a2c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <DAC_SetChannel1Data+0x34>)
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	3308      	adds	r3, #8
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	6013      	str	r3, [r2, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40007400 	.word	0x40007400

08002a64 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <DMA_Init+0xac>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002aa6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002ab2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4313      	orrs	r3, r2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60da      	str	r2, [r3, #12]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	f01c803f 	.word	0xf01c803f

08002b14 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002b32:	e005      	b.n	8002b40 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0201 	bic.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e001      	b.n	8002b6e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <DMA_GetFlagStatus+0x6c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d802      	bhi.n	8002b9c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <DMA_GetFlagStatus+0x70>)
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e001      	b.n	8002ba0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <DMA_GetFlagStatus+0x74>)
 8002b9e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e002      	b.n	8002bb8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002bbe:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
 8002bd2:	e001      	b.n	8002bd8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	4002640f 	.word	0x4002640f
 8002bec:	40026000 	.word	0x40026000
 8002bf0:	40026400 	.word	0x40026400

08002bf4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <DMA_ClearFlag+0x50>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d802      	bhi.n	8002c0c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <DMA_ClearFlag+0x54>)
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e001      	b.n	8002c10 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <DMA_ClearFlag+0x58>)
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c20:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002c28:	e006      	b.n	8002c38 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c30:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	6093      	str	r3, [r2, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	4002640f 	.word	0x4002640f
 8002c48:	40026000 	.word	0x40026000
 8002c4c:	40026400 	.word	0x40026400

08002c50 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e076      	b.n	8002d5a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d165      	bne.n	8002d54 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2103      	movs	r1, #3
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	791b      	ldrb	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d003      	beq.n	8002cc6 <GPIO_Init+0x76>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	791b      	ldrb	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d12e      	bne.n	8002d24 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	795b      	ldrb	r3, [r3, #5]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2301      	movs	r3, #1
 8002d00:	408b      	lsls	r3, r1
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	7992      	ldrb	r2, [r2, #6]
 8002d12:	4611      	mov	r1, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	b292      	uxth	r2, r2
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2103      	movs	r1, #3
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	79db      	ldrb	r3, [r3, #7]
 8002d44:	4619      	mov	r1, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d985      	bls.n	8002c6c <GPIO_Init+0x1c>
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002d8a:	e006      	b.n	8002d9a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002d8c:	4906      	ldr	r1, [pc, #24]	; (8002da8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4013      	ands	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	819a      	strh	r2, [r3, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	891b      	ldrh	r3, [r3, #8]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	4013      	ands	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e001      	b.n	8002df4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4a10      	ldr	r2, [pc, #64]	; (8002e54 <STM_EVAL_LEDInit+0x50>)
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffa7 	bl	8002d6c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <STM_EVAL_LEDInit+0x54>)
 8002e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e34:	2302      	movs	r3, #2
 8002e36:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <STM_EVAL_LEDInit+0x58>)
 8002e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e40:	f107 0208 	add.w	r2, r7, #8
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff02 	bl	8002c50 <GPIO_Init>
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0800425c 	.word	0x0800425c
 8002e58:	08004254 	.word	0x08004254
 8002e5c:	20000004 	.word	0x20000004

08002e60 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <STM_EVAL_LEDOn+0x28>)
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	4905      	ldr	r1, [pc, #20]	; (8002e8c <STM_EVAL_LEDOn+0x2c>)
 8002e76:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002e7a:	831a      	strh	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	08004254 	.word	0x08004254

08002e90 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <STM_EVAL_LEDOff+0x28>)
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	4905      	ldr	r1, [pc, #20]	; (8002ebc <STM_EVAL_LEDOff+0x2c>)
 8002ea6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002eaa:	835a      	strh	r2, [r3, #26]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20000004 	.word	0x20000004
 8002ebc:	08004254 	.word	0x08004254

08002ec0 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b38      	ldr	r3, [pc, #224]	; (8002fac <Audio_MAL_IRQHandler+0xec>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7ff fe54 	bl	8002b7c <DMA_GetFlagStatus>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d064      	beq.n	8002fa4 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002eda:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04c      	beq.n	8002f7c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002ee2:	bf00      	nop
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe2f 	bl	8002b4c <DMA_GetCmdStatus>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f7      	bne.n	8002ee4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <Audio_MAL_IRQHandler+0xec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff fe78 	bl	8002bf4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <Audio_MAL_IRQHandler+0xf4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <Audio_MAL_IRQHandler+0xf8>)
 8002f0c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f16:	4293      	cmp	r3, r2
 8002f18:	bf28      	it	cs
 8002f1a:	4613      	movcs	r3, r2
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <Audio_MAL_IRQHandler+0xf8>)
 8002f1e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4924      	ldr	r1, [pc, #144]	; (8002fb8 <Audio_MAL_IRQHandler+0xf8>)
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd9c 	bl	8002a64 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fdee 	bl	8002b14 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <Audio_MAL_IRQHandler+0xf4>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d203      	bcs.n	8002f4e <Audio_MAL_IRQHandler+0x8e>
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	e000      	b.n	8002f50 <Audio_MAL_IRQHandler+0x90>
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <Audio_MAL_IRQHandler+0xfc>)
 8002f50:	4413      	add	r3, r2
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <Audio_MAL_IRQHandler+0xf4>)
 8002f54:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f62:	428b      	cmp	r3, r1
 8002f64:	bf28      	it	cs
 8002f66:	460b      	movcs	r3, r1
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <Audio_MAL_IRQHandler+0xf0>)
 8002f6c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fdcd 	bl	8002b14 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002f7a:	e013      	b.n	8002fa4 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fdc6 	bl	8002b14 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <Audio_MAL_IRQHandler+0xe8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <Audio_MAL_IRQHandler+0xec>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fe2e 	bl	8002bf4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <Audio_MAL_IRQHandler+0xf4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f83c 	bl	800301c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000001c 	.word	0x2000001c
 8002fac:	20000020 	.word	0x20000020
 8002fb0:	20000014 	.word	0x20000014
 8002fb4:	20001e50 	.word	0x20001e50
 8002fb8:	20001e90 	.word	0x20001e90
 8002fbc:	0001fffe 	.word	0x0001fffe

08002fc0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002fc4:	f7ff ff7c 	bl	8002ec0 <Audio_MAL_IRQHandler>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002fd0:	f7ff ff76 	bl	8002ec0 <Audio_MAL_IRQHandler>
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002fdc:	2102      	movs	r1, #2
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <SPI3_IRQHandler+0x3c>)
 8002fe0:	f7ff fef3 	bl	8002dca <SPI_I2S_GetFlagStatus>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <SPI3_IRQHandler+0x40>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d106      	bne.n	8003000 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002ff2:	f000 f81e 	bl	8003032 <EVAL_AUDIO_GetSampleCallBack>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	2004      	movs	r0, #4
 8002ffc:	f7ff fd16 	bl	8002a2c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003000:	f000 f817 	bl	8003032 <EVAL_AUDIO_GetSampleCallBack>
 8003004:	4603      	mov	r3, r0
 8003006:	4619      	mov	r1, r3
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <SPI3_IRQHandler+0x3c>)
 800300a:	f7ff fecf 	bl	8002dac <SPI_I2S_SendData>
  }
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40003c00 	.word	0x40003c00
 8003018:	20000018 	.word	0x20000018

0800301c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003026:	bf00      	nop
}
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <NVIC_SetPriorityGrouping+0x44>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003060:	4013      	ands	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800306c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <NVIC_SetPriorityGrouping+0x44>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <main>:
void vGenerator3CallbackFunction( TimerHandle_t xGenerator3Timer );

/*-----------------------------------------------------------*/

int main(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af02      	add	r7, sp, #8
	/* Configure the system. */
	prvSetupHardware();
 8003092:	f000 fcb2 	bl	80039fa <prvSetupHardware>

	//active_list = (struct dd_task_list *)pvPortMalloc(sizeof(struct dd_task_list *));
	STM_EVAL_LEDInit(amber_led); // look into here for how to initialize the LEDs with GPIOC
 8003096:	2001      	movs	r0, #1
 8003098:	f7ff feb4 	bl	8002e04 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 800309c:	2000      	movs	r0, #0
 800309e:	f7ff feb1 	bl	8002e04 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 80030a2:	2003      	movs	r0, #3
 80030a4:	f7ff feae 	bl	8002e04 <STM_EVAL_LEDInit>

	// create queue to send and receive potentiometer value
	xQueue_request_handle = xQueueCreate( QUEUE_LENGTH, sizeof(struct message));
 80030a8:	2200      	movs	r2, #0
 80030aa:	2110      	movs	r1, #16
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	f7fd fc2f 	bl	8000910 <xQueueGenericCreate>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <main+0x114>)
 80030b6:	601a      	str	r2, [r3, #0]
	xQueue_response_handle = xQueueCreate( QUEUE_LENGTH, sizeof(struct message));
 80030b8:	2200      	movs	r2, #0
 80030ba:	2110      	movs	r1, #16
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	f7fd fc27 	bl	8000910 <xQueueGenericCreate>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <main+0x118>)
 80030c6:	601a      	str	r2, [r3, #0]

	// add potentiometer queue to registry for debugging
	vQueueAddToRegistry( xQueue_request_handle, "RequestQueue" );
 80030c8:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <main+0x114>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4936      	ldr	r1, [pc, #216]	; (80031a8 <main+0x11c>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f826 	bl	8001120 <vQueueAddToRegistry>
	vQueueAddToRegistry( xQueue_response_handle, "ResponseQueue" );
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <main+0x118>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4934      	ldr	r1, [pc, #208]	; (80031ac <main+0x120>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f820 	bl	8001120 <vQueueAddToRegistry>

	// need to decide priority and stack size
	xTaskCreate(DD_Scheduler_Task, "DD Scheduler", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2303      	movs	r3, #3
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2300      	movs	r3, #0
 80030ea:	2282      	movs	r2, #130	; 0x82
 80030ec:	4930      	ldr	r1, [pc, #192]	; (80031b0 <main+0x124>)
 80030ee:	4831      	ldr	r0, [pc, #196]	; (80031b4 <main+0x128>)
 80030f0:	f7fe f872 	bl	80011d8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_1, "DD Task Generator 1", configMINIMAL_STACK_SIZE, NULL, 2, xGenerator1TaskHandle);
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <main+0x12c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2302      	movs	r3, #2
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2300      	movs	r3, #0
 8003100:	2282      	movs	r2, #130	; 0x82
 8003102:	492e      	ldr	r1, [pc, #184]	; (80031bc <main+0x130>)
 8003104:	482e      	ldr	r0, [pc, #184]	; (80031c0 <main+0x134>)
 8003106:	f7fe f867 	bl	80011d8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_2, "DD Task Generator 2", configMINIMAL_STACK_SIZE, NULL, 2, xGenerator2TaskHandle);
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <main+0x138>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	2302      	movs	r3, #2
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	2282      	movs	r2, #130	; 0x82
 8003118:	492b      	ldr	r1, [pc, #172]	; (80031c8 <main+0x13c>)
 800311a:	482c      	ldr	r0, [pc, #176]	; (80031cc <main+0x140>)
 800311c:	f7fe f85c 	bl	80011d8 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_3, "DD Task Generator 3", configMINIMAL_STACK_SIZE, NULL, 2, xGenerator3TaskHandle);
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <main+0x144>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2302      	movs	r3, #2
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2282      	movs	r2, #130	; 0x82
 800312e:	4929      	ldr	r1, [pc, #164]	; (80031d4 <main+0x148>)
 8003130:	4829      	ldr	r0, [pc, #164]	; (80031d8 <main+0x14c>)
 8003132:	f7fe f851 	bl	80011d8 <xTaskCreate>
	xTaskCreate(Monitor_Task, "Monitor", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 8003136:	2300      	movs	r3, #0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2304      	movs	r3, #4
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	2282      	movs	r2, #130	; 0x82
 8003142:	4926      	ldr	r1, [pc, #152]	; (80031dc <main+0x150>)
 8003144:	4826      	ldr	r0, [pc, #152]	; (80031e0 <main+0x154>)
 8003146:	f7fe f847 	bl	80011d8 <xTaskCreate>

	// create software timers for controlling traffic lights
	xGenerator1Timer = xTimerCreate("Generator 1", TASK_1_PERIOD / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator1CallbackFunction);
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <main+0x158>)
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2300      	movs	r3, #0
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003156:	4824      	ldr	r0, [pc, #144]	; (80031e8 <main+0x15c>)
 8003158:	f7ff f980 	bl	800245c <xTimerCreate>
 800315c:	4602      	mov	r2, r0
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <main+0x160>)
 8003160:	601a      	str	r2, [r3, #0]
	xGenerator2Timer = xTimerCreate("Generator 2", TASK_2_PERIOD  / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator2CallbackFunction);
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <main+0x164>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	2201      	movs	r2, #1
 800316a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800316e:	4821      	ldr	r0, [pc, #132]	; (80031f4 <main+0x168>)
 8003170:	f7ff f974 	bl	800245c <xTimerCreate>
 8003174:	4602      	mov	r2, r0
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <main+0x16c>)
 8003178:	601a      	str	r2, [r3, #0]
	xGenerator3Timer = xTimerCreate("Generator 3", TASK_3_PERIOD / portTICK_PERIOD_MS, pdTRUE, (void *) 0, vGenerator3CallbackFunction);
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <main+0x170>)
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	2201      	movs	r2, #1
 8003182:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003186:	481e      	ldr	r0, [pc, #120]	; (8003200 <main+0x174>)
 8003188:	f7ff f968 	bl	800245c <xTimerCreate>
 800318c:	4602      	mov	r2, r0
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <main+0x178>)
 8003190:	601a      	str	r2, [r3, #0]

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8003192:	f7fe fb53 	bl	800183c <vTaskStartScheduler>

	return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20001e04 	.word	0x20001e04
 80031a4:	20001e08 	.word	0x20001e08
 80031a8:	0800413c 	.word	0x0800413c
 80031ac:	0800414c 	.word	0x0800414c
 80031b0:	0800415c 	.word	0x0800415c
 80031b4:	08003209 	.word	0x08003209
 80031b8:	20001df8 	.word	0x20001df8
 80031bc:	0800416c 	.word	0x0800416c
 80031c0:	080033c9 	.word	0x080033c9
 80031c4:	20001dfc 	.word	0x20001dfc
 80031c8:	08004180 	.word	0x08004180
 80031cc:	08003419 	.word	0x08003419
 80031d0:	20001e00 	.word	0x20001e00
 80031d4:	08004194 	.word	0x08004194
 80031d8:	08003469 	.word	0x08003469
 80031dc:	080041a8 	.word	0x080041a8
 80031e0:	0800356d 	.word	0x0800356d
 80031e4:	08003971 	.word	0x08003971
 80031e8:	080041b0 	.word	0x080041b0
 80031ec:	20001ed4 	.word	0x20001ed4
 80031f0:	08003991 	.word	0x08003991
 80031f4:	080041bc 	.word	0x080041bc
 80031f8:	20001ecc 	.word	0x20001ecc
 80031fc:	080039b1 	.word	0x080039b1
 8003200:	080041c8 	.word	0x080041c8
 8003204:	20001ed0 	.word	0x20001ed0

08003208 <DD_Scheduler_Task>:


/*------------Tasks-----------------------------------------------*/
static void DD_Scheduler_Task( void *pvParameters )
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b094      	sub	sp, #80	; 0x50
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	// waits for scheduling task (usually should be suspended until scheduling task exists)
	// idk if this is correct for while loop

	struct dd_task_list* active_list = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
	struct dd_task_list* complete_list = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
	struct dd_task_list* overdue_list = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
		//this_message->type = (enum message_type)pvPortMalloc(sizeof(enum message_type));
		//this_message->task_list = (struct dd_task_list *)pvPortMalloc(sizeof(struct dd_task_list *));
		// add check for overdue tasks (could use software timers instead, would be better to accomodate for aperiodic but kinda redundant for periodic)

		// adjusts user task priorities  (Set earliest deadline task priority to high and the rest to low so first completes that and then so on)
		while(xQueueReceive(xQueue_request_handle, &received_message, 500)){
 800321c:	e0c2      	b.n	80033a4 <DD_Scheduler_Task+0x19c>
			// cases based on what message type is received
			if (received_message.type == create_dd)
 800321e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d126      	bne.n	8003274 <DD_Scheduler_Task+0x6c>
			{
				// assign release time to new task
				struct dd_task *new_task = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task *));
 8003226:	2004      	movs	r0, #4
 8003228:	f7fd fa9a 	bl	8000760 <pvPortMalloc>
 800322c:	6478      	str	r0, [r7, #68]	; 0x44
				new_task = received_message.task_info;
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
				new_task->release_time = xTaskGetTickCount();
 8003232:	f7fe fbf9 	bl	8001a28 <xTaskGetTickCount>
 8003236:	4602      	mov	r2, r0
 8003238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323a:	60da      	str	r2, [r3, #12]
				new_task->completion_time = 0;
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]

				// add DD task to active task list
				active_list = add_task(active_list, new_task);
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa96 	bl	8003778 <add_task>
 800324c:	4603      	mov	r3, r0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c

				// sort list by deadline
				active_list = order_tasks_deadline_first(active_list);
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fb19 	bl	800388a <order_tasks_deadline_first>
 8003258:	4603      	mov	r3, r0
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c

				// set priorities of user defined task according to sorted list
				// head (first of list) set to high priority, rest set to low priority
				active_list = assign_task_priorities(active_list);
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb5a 	bl	8003918 <assign_task_priorities>
 8003264:	4603      	mov	r3, r0
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c

				// start task
				vTaskResume(new_task->t_handle);
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fa89 	bl	8001784 <vTaskResume>
 8003272:	e097      	b.n	80033a4 <DD_Scheduler_Task+0x19c>

				// MAYBE: start software timer, callback function will be to check if overdue time is passed, when callback is called: send new message type (overdue_dd_task)
			}
			else if (received_message.type == delete_dd)
 8003274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003278:	2b01      	cmp	r3, #1
 800327a:	d12c      	bne.n	80032d6 <DD_Scheduler_Task+0xce>
			{
				// assign completion time to newly completed DD-task
				struct dd_task done_task = *received_message.task_info;
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	f107 040c 	add.w	r4, r7, #12
 8003282:	461d      	mov	r5, r3
 8003284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800328c:	e884 0003 	stmia.w	r4, {r0, r1}
				done_task.completion_time = xTaskGetTickCount();
 8003290:	f7fe fbca 	bl	8001a28 <xTaskGetTickCount>
 8003294:	4603      	mov	r3, r0
 8003296:	623b      	str	r3, [r7, #32]

				// remove DD task from active task list
				active_list = delete_task(active_list, &done_task);
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	f107 020c 	add.w	r2, r7, #12
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 faa6 	bl	80037f2 <delete_task>
 80032a6:	4603      	mov	r3, r0
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c

				// add DD task to complete task list
				complete_list = add_task(complete_list, &done_task);
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	f107 020c 	add.w	r2, r7, #12
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa60 	bl	8003778 <add_task>
 80032b8:	4603      	mov	r3, r0
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38

				// re-sort active task list by deadline
				active_list = order_tasks_deadline_first(active_list);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fae3 	bl	800388a <order_tasks_deadline_first>
 80032c4:	4603      	mov	r3, r0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c

				// set priorities of user defined tasks accordingly
				// head (first of list) set to high priority, rest set to low priority
				active_list = assign_task_priorities(active_list);
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fb24 	bl	8003918 <assign_task_priorities>
 80032d0:	4603      	mov	r3, r0
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	e066      	b.n	80033a4 <DD_Scheduler_Task+0x19c>
			* 		// add DD task to overdue task list
			* 		// re-sort overdue task list by deadline
			* 		// set priorities of user defined tasks accordingly
			* }
			*/
			else if (received_message.type == get_active_dd_list)
 80032d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d109      	bne.n	80032f2 <DD_Scheduler_Task+0xea>
			{

				if (xQueueSend(xQueue_response_handle, &active_list, 500)){
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <DD_Scheduler_Task+0x1b8>)
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032e6:	2300      	movs	r3, #0
 80032e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80032ec:	f7fd fb68 	bl	80009c0 <xQueueGenericSend>
 80032f0:	e058      	b.n	80033a4 <DD_Scheduler_Task+0x19c>
					// sent message successfully
				}
			}
			else if (received_message.type == get_completed_dd_list)
 80032f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d126      	bne.n	8003348 <DD_Scheduler_Task+0x140>
			{
				struct dd_task_list *currentList = active_list;
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	64fb      	str	r3, [r7, #76]	; 0x4c
				while (currentList != NULL) {
 80032fe:	e016      	b.n	800332e <DD_Scheduler_Task+0x126>
					// if completion_time is 0, that means task hasn't been completed
					if( currentList->task.completion_time != 0) {
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <DD_Scheduler_Task+0x126>
						complete_list = add_task(complete_list, &currentList->task);
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa32 	bl	8003778 <add_task>
 8003314:	4603      	mov	r3, r0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
						// delete the completed task from active task list
						active_list = delete_task(active_list, &currentList->task);
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa67 	bl	80037f2 <delete_task>
 8003324:	4603      	mov	r3, r0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
						currentList = currentList->next_task;
 8003328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	64fb      	str	r3, [r7, #76]	; 0x4c
				while (currentList != NULL) {
 800332e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <DD_Scheduler_Task+0xf8>
					}
				}
				// get complete task list and send to a queue
				if (xQueueSend(xQueue_response_handle, &complete_list, 500)){
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <DD_Scheduler_Task+0x1b8>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800333c:	2300      	movs	r3, #0
 800333e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003342:	f7fd fb3d 	bl	80009c0 <xQueueGenericSend>
 8003346:	e02d      	b.n	80033a4 <DD_Scheduler_Task+0x19c>
					// sent message successfully
				}
			}
			else if (received_message.type == get_overdue_dd_list)
 8003348:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800334c:	2b04      	cmp	r3, #4
 800334e:	d129      	bne.n	80033a4 <DD_Scheduler_Task+0x19c>
			{
				struct dd_task_list *currentList = active_list;
 8003350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
				uint32_t timeRightNow = xTaskGetTickCount();
 8003354:	f7fe fb68 	bl	8001a28 <xTaskGetTickCount>
 8003358:	6438      	str	r0, [r7, #64]	; 0x40

				while (currentList != NULL) {
 800335a:	e017      	b.n	800338c <DD_Scheduler_Task+0x184>
					// if completion_time is 0, that means task hasn't been completed
					if( currentList->task.absolute_deadline <= timeRightNow) {
 800335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003362:	429a      	cmp	r2, r3
 8003364:	d812      	bhi.n	800338c <DD_Scheduler_Task+0x184>
						overdue_list = add_task(overdue_list, &currentList->task);
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa03 	bl	8003778 <add_task>
 8003372:	4603      	mov	r3, r0
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
						// delete overdue task from active task list
						active_list = delete_task(active_list, &currentList->task);
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fa38 	bl	80037f2 <delete_task>
 8003382:	4603      	mov	r3, r0
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
						currentList = currentList->next_task;
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
				while (currentList != NULL) {
 800338c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e4      	bne.n	800335c <DD_Scheduler_Task+0x154>
					}
				}
				// get complete task list and send to a queue
				if (xQueueSend(xQueue_response_handle, &overdue_list, 500)){
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <DD_Scheduler_Task+0x1b8>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800339a:	2300      	movs	r3, #0
 800339c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033a0:	f7fd fb0e 	bl	80009c0 <xQueueGenericSend>
		while(xQueueReceive(xQueue_request_handle, &received_message, 500)){
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <DD_Scheduler_Task+0x1bc>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033ac:	2300      	movs	r3, #0
 80033ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033b2:	f7fd fc93 	bl	8000cdc <xQueueGenericReceive>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af30 	bne.w	800321e <DD_Scheduler_Task+0x16>
	{
 80033be:	e72d      	b.n	800321c <DD_Scheduler_Task+0x14>
 80033c0:	20001e08 	.word	0x20001e08
 80033c4:	20001e04 	.word	0x20001e04

080033c8 <DD_Task_Generator_1>:
	}
}

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_1( void *pvParameters )
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
	// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_1_PERIOD
	// should reuse F-Task handles inside each DD task
	// periodically generate user tasks for DD_Scheduler
	TaskHandle_t task_1_handle;
	xTaskCreate( User_Task_1, "User Task 1", configMINIMAL_STACK_SIZE, NULL, 1, &task_1_handle); // start it at lowest priority
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	2301      	movs	r3, #1
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2300      	movs	r3, #0
 80033dc:	2282      	movs	r2, #130	; 0x82
 80033de:	490c      	ldr	r1, [pc, #48]	; (8003410 <DD_Task_Generator_1+0x48>)
 80033e0:	480c      	ldr	r0, [pc, #48]	; (8003414 <DD_Task_Generator_1+0x4c>)
 80033e2:	f7fd fef9 	bl	80011d8 <xTaskCreate>
	vTaskSuspend(task_1_handle); // DD scheduler will start it when it should be run
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f909 	bl	8001600 <vTaskSuspend>

	// prepares all information needed for creating specific instance of DD-tasks
	// calls create_dd_task
	// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
	create_dd_task(task_1_handle, PERIODIC, 1,  xTaskGetTickCount() + TASK_1_EXECUTION_TIME / portTICK_PERIOD_MS);
 80033ee:	68fc      	ldr	r4, [r7, #12]
 80033f0:	f7fe fb1a 	bl	8001a28 <xTaskGetTickCount>
 80033f4:	4603      	mov	r3, r0
 80033f6:	335f      	adds	r3, #95	; 0x5f
 80033f8:	2201      	movs	r2, #1
 80033fa:	2100      	movs	r1, #0
 80033fc:	4620      	mov	r0, r4
 80033fe:	f000 f8e5 	bl	80035cc <create_dd_task>

	// needs to suspend itself (NULL means suspends itself)
	vTaskSuspend( NULL );
 8003402:	2000      	movs	r0, #0
 8003404:	f7fe f8fc 	bl	8001600 <vTaskSuspend>
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bd90      	pop	{r4, r7, pc}
 8003410:	080041d4 	.word	0x080041d4
 8003414:	080034b9 	.word	0x080034b9

08003418 <DD_Task_Generator_2>:

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_2( void *pvParameters )
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b087      	sub	sp, #28
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
	// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_2_PERIOD
	// should reuse F-Task handles inside each DD task
	// periodically generate user tasks for DD_Scheduler
	TaskHandle_t task_2_handle;
	xTaskCreate( User_Task_2, "User Task 2", configMINIMAL_STACK_SIZE, NULL, 1, &task_2_handle); // start it at lowest priority
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2301      	movs	r3, #1
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2282      	movs	r2, #130	; 0x82
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <DD_Task_Generator_2+0x48>)
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <DD_Task_Generator_2+0x4c>)
 8003432:	f7fd fed1 	bl	80011d8 <xTaskCreate>
	vTaskSuspend(task_2_handle); // DD scheduler will start it when it should be run
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe f8e1 	bl	8001600 <vTaskSuspend>

	// prepares all information needed for creating specific instance of DD-tasks
	// calls create_dd_task
	// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
	create_dd_task(task_2_handle, PERIODIC, 2,  xTaskGetTickCount() + TASK_2_EXECUTION_TIME / portTICK_PERIOD_MS);
 800343e:	68fc      	ldr	r4, [r7, #12]
 8003440:	f7fe faf2 	bl	8001a28 <xTaskGetTickCount>
 8003444:	4603      	mov	r3, r0
 8003446:	3396      	adds	r3, #150	; 0x96
 8003448:	2202      	movs	r2, #2
 800344a:	2100      	movs	r1, #0
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f8bd 	bl	80035cc <create_dd_task>

	// needs to suspend itself (NULL means suspends itself)
	vTaskSuspend( NULL );
 8003452:	2000      	movs	r0, #0
 8003454:	f7fe f8d4 	bl	8001600 <vTaskSuspend>
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bd90      	pop	{r4, r7, pc}
 8003460:	080041e0 	.word	0x080041e0
 8003464:	080034f5 	.word	0x080034f5

08003468 <DD_Task_Generator_3>:

// task generator for DD_User_Task_1 (will have one for each DD task)
static void DD_Task_Generator_3( void *pvParameters )
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b087      	sub	sp, #28
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
	// normal state: suspended, resumed when software timer callback is triggered, timer period would be TASK_3_PERIOD
	// should reuse F-Task handles inside each DD task
	// periodically generate user tasks for DD_Scheduler
	TaskHandle_t task_3_handle;
	xTaskCreate( User_Task_3, "User Task 3", configMINIMAL_STACK_SIZE, NULL, 1, &task_3_handle); // start it at lowest priority
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2301      	movs	r3, #1
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	2282      	movs	r2, #130	; 0x82
 800347e:	490c      	ldr	r1, [pc, #48]	; (80034b0 <DD_Task_Generator_3+0x48>)
 8003480:	480c      	ldr	r0, [pc, #48]	; (80034b4 <DD_Task_Generator_3+0x4c>)
 8003482:	f7fd fea9 	bl	80011d8 <xTaskCreate>
	vTaskSuspend(task_3_handle); // DD scheduler will start it when it should be run
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe f8b9 	bl	8001600 <vTaskSuspend>

	// prepares all information needed for creating specific instance of DD-tasks
	// calls create_dd_task
	// xTaskGetTickCount: The count of ticks since vTaskStartScheduler was called
	create_dd_task(task_3_handle, PERIODIC, 3,  xTaskGetTickCount() + TASK_3_EXECUTION_TIME / portTICK_PERIOD_MS);
 800348e:	68fc      	ldr	r4, [r7, #12]
 8003490:	f7fe faca 	bl	8001a28 <xTaskGetTickCount>
 8003494:	4603      	mov	r3, r0
 8003496:	33fa      	adds	r3, #250	; 0xfa
 8003498:	2203      	movs	r2, #3
 800349a:	2100      	movs	r1, #0
 800349c:	4620      	mov	r0, r4
 800349e:	f000 f895 	bl	80035cc <create_dd_task>

	// needs to suspend itself (NULL means suspends itself)
	vTaskSuspend( NULL );
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7fe f8ac 	bl	8001600 <vTaskSuspend>
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	080041ec 	.word	0x080041ec
 80034b4:	08003531 	.word	0x08003531

080034b8 <User_Task_1>:

static void User_Task_1( void *pvParameters )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 80034c0:	f7fe fab2 	bl	8001a28 <xTaskGetTickCount>
 80034c4:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_1_EXECUTION_TIME / portTICK_PERIOD_MS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	335f      	adds	r3, #95	; 0x5f
 80034ca:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(amber_led);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7ff fcc7 	bl	8002e60 <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 80034d2:	bf00      	nop
 80034d4:	f7fe faa8 	bl	8001a28 <xTaskGetTickCount>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d3f9      	bcc.n	80034d4 <User_Task_1+0x1c>
	{
		// loop for TASK_1_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(amber_led);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7ff fcd5 	bl	8002e90 <STM_EVAL_LEDOff>

	// execution time is done, delete task
	delete_dd_task(1);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f000 f89e 	bl	8003628 <delete_dd_task>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <User_Task_2>:

static void User_Task_2( void *pvParameters )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 80034fc:	f7fe fa94 	bl	8001a28 <xTaskGetTickCount>
 8003500:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_2_EXECUTION_TIME / portTICK_PERIOD_MS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3396      	adds	r3, #150	; 0x96
 8003506:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(green_led);
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff fca9 	bl	8002e60 <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 800350e:	bf00      	nop
 8003510:	f7fe fa8a 	bl	8001a28 <xTaskGetTickCount>
 8003514:	4602      	mov	r2, r0
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3f9      	bcc.n	8003510 <User_Task_2+0x1c>
	{
		// loop for TASK_2_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(green_led);
 800351c:	2000      	movs	r0, #0
 800351e:	f7ff fcb7 	bl	8002e90 <STM_EVAL_LEDOff>

	// execution time is done, delete task
	delete_dd_task(2);
 8003522:	2002      	movs	r0, #2
 8003524:	f000 f880 	bl	8003628 <delete_dd_task>
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <User_Task_3>:

static void User_Task_3( void *pvParameters )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	TickType_t start_time = xTaskGetTickCount();
 8003538:	f7fe fa76 	bl	8001a28 <xTaskGetTickCount>
 800353c:	60f8      	str	r0, [r7, #12]
	TickType_t end_time = start_time + TASK_3_EXECUTION_TIME / portTICK_PERIOD_MS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	33fa      	adds	r3, #250	; 0xfa
 8003542:	60bb      	str	r3, [r7, #8]

	// could turn on LED on discovery board to provide visual indication of what user-defined task is executing
	STM_EVAL_LEDOn(blue_led);
 8003544:	2003      	movs	r0, #3
 8003546:	f7ff fc8b 	bl	8002e60 <STM_EVAL_LEDOn>

	// execute an empty loop for duration of execution time
	while ( end_time > xTaskGetTickCount())
 800354a:	bf00      	nop
 800354c:	f7fe fa6c 	bl	8001a28 <xTaskGetTickCount>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	d3f9      	bcc.n	800354c <User_Task_3+0x1c>
	{
		// loop for TASK_3_EXECUTION_TIME
	}

	// turn off LED here
	STM_EVAL_LEDOff(blue_led);
 8003558:	2003      	movs	r0, #3
 800355a:	f7ff fc99 	bl	8002e90 <STM_EVAL_LEDOff>

	// execution time is done, delete task
	delete_dd_task(3);
 800355e:	2003      	movs	r0, #3
 8003560:	f000 f862 	bl	8003628 <delete_dd_task>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <Monitor_Task>:

static void Monitor_Task( void *pvParameters )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// periodically reports processor utilization
		vTaskDelay(1000); // probably need to change delay later to appropriate amount
 8003574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003578:	f7fd ff60 	bl	800143c <vTaskDelay>

		// call get_active_dd_task_list
		int active_list_count = print_count_of_list (get_active_dd_task_list());
 800357c:	f000 f86c 	bl	8003658 <get_active_dd_task_list>
 8003580:	4603      	mov	r3, r0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f968 	bl	8003858 <print_count_of_list>
 8003588:	6178      	str	r0, [r7, #20]
		// call get_complete_dd_task_list
		int complete_list_count = print_count_of_list(get_complete_dd_task_list());
 800358a:	f000 f895 	bl	80036b8 <get_complete_dd_task_list>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f961 	bl	8003858 <print_count_of_list>
 8003596:	6138      	str	r0, [r7, #16]
		// call get_overdue_dd_task_list
		int overdue_list_count = print_count_of_list(get_overdue_dd_task_list());
 8003598:	f000 f8be 	bl	8003718 <get_overdue_dd_task_list>
 800359c:	4603      	mov	r3, r0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f95a 	bl	8003858 <print_count_of_list>
 80035a4:	60f8      	str	r0, [r7, #12]

		// print to console number of tasks in each list
		printf("Active task list count: %d\n", active_list_count);
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <Monitor_Task+0x54>)
 80035aa:	f000 fce1 	bl	8003f70 <printf>
		printf("Complete task list count: %d\n", complete_list_count);
 80035ae:	6939      	ldr	r1, [r7, #16]
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <Monitor_Task+0x58>)
 80035b2:	f000 fcdd 	bl	8003f70 <printf>
		printf("Overdue task list count: %d\n", overdue_list_count);
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	4803      	ldr	r0, [pc, #12]	; (80035c8 <Monitor_Task+0x5c>)
 80035ba:	f000 fcd9 	bl	8003f70 <printf>
	{
 80035be:	e7d9      	b.n	8003574 <Monitor_Task+0x8>
 80035c0:	080041f8 	.word	0x080041f8
 80035c4:	08004214 	.word	0x08004214
 80035c8:	08004234 	.word	0x08004234

080035cc <create_dd_task>:
	}
}

/*------------------ helper functions -----------------------------------------*/
void create_dd_task( TaskHandle_t t_handle, enum task_type type, uint32_t the_task_id, uint32_t absolute_deadline)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	460b      	mov	r3, r1
 80035da:	72fb      	strb	r3, [r7, #11]
	// struct is packaged as message and
	message this_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	//this_message.task_info = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task *));
	//this_message.type = (enum message_type)pvPortMalloc(sizeof(enum message_type));

	this_message.type = create_dd;
 80035dc:	2300      	movs	r3, #0
 80035de:	743b      	strb	r3, [r7, #16]
	//this_message->task_id = the_task_id;
	//this_message->task_info = this_task;
	this_message.task_info->t_handle = t_handle;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	601a      	str	r2, [r3, #0]
	this_message.task_info->type = type;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	7afa      	ldrb	r2, [r7, #11]
 80035ea:	711a      	strb	r2, [r3, #4]
	this_message.task_info->task_id = the_task_id;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]
	this_message.task_info->release_time = 0;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
	this_message.task_info->absolute_deadline = absolute_deadline;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	611a      	str	r2, [r3, #16]
	this_message.task_info->completion_time = 0;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
	this_message.task_id = the_task_id;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	61bb      	str	r3, [r7, #24]

	// sends message struct  to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <create_dd_task+0x58>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	f107 0110 	add.w	r1, r7, #16
 8003610:	2300      	movs	r3, #0
 8003612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003616:	f7fd f9d3 	bl	80009c0 <xQueueGenericSend>
		// wait for reply from DDS (obtain reply message)

	}

	//vPortFree(this_task);
}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20001e04 	.word	0x20001e04

08003628 <delete_dd_task>:

void delete_dd_task(uint32_t task_id)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	// receive ID of DD-Task when it has completed its execution (from user task)
	// struct with id is packaged as message
	struct message this_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	this_message.type = delete_dd;
 8003630:	2301      	movs	r3, #1
 8003632:	723b      	strb	r3, [r7, #8]
	this_message.task_id = task_id;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	613b      	str	r3, [r7, #16]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <delete_dd_task+0x2c>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	f107 0108 	add.w	r1, r7, #8
 8003640:	2300      	movs	r3, #0
 8003642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003646:	f7fd f9bb 	bl	80009c0 <xQueueGenericSend>
	{
		// wait for reply from DDS (obtain reply message)

	}
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20001e04 	.word	0x20001e04

08003658 <get_active_dd_task_list>:

struct dd_task_list* get_active_dd_task_list(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
	// sends message to queue requesting Active Task list from DDS
	struct message this_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	//this_message->task_info = (struct dd_task *)pvPortMalloc(sizeof(struct dd_task *));
	//this_message->type = (enum message_type)pvPortMalloc(sizeof(enum message_type));
	this_message.type = get_active_dd_list;
 800365e:	2302      	movs	r3, #2
 8003660:	743b      	strb	r3, [r7, #16]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <get_active_dd_task_list+0x58>)
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f107 0110 	add.w	r1, r7, #16
 800366a:	2300      	movs	r3, #0
 800366c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003670:	f7fd f9a6 	bl	80009c0 <xQueueGenericSend>
	}

	// wait for reply from DDS (obtain reply message)
	struct message reply_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, 1000))
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <get_active_dd_task_list+0x5c>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4639      	mov	r1, r7
 800367a:	2300      	movs	r3, #0
 800367c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003680:	f7fd fb2c 	bl	8000cdc <xQueueGenericReceive>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <get_active_dd_task_list+0x4c>
	{
		// check for message type
		if (reply_message.type == get_active_dd_list)
 800368a:	783b      	ldrb	r3, [r7, #0]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d101      	bne.n	8003694 <get_active_dd_task_list+0x3c>
		{
			return reply_message.task_list;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	e008      	b.n	80036a6 <get_active_dd_task_list+0x4e>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <get_active_dd_task_list+0x5c>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4639      	mov	r1, r7
 800369a:	2300      	movs	r3, #0
 800369c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036a0:	f7fd f98e 	bl	80009c0 <xQueueGenericSend>

			}
		}
	}

	return reply_message.task_list;
 80036a4:	68fb      	ldr	r3, [r7, #12]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20001e04 	.word	0x20001e04
 80036b4:	20001e08 	.word	0x20001e08

080036b8 <get_complete_dd_task_list>:

struct dd_task_list* get_complete_dd_task_list(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
	// sends message to queue requesting Complete Task list from DDS
	struct message this_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	this_message.type = get_completed_dd_list;
 80036be:	2303      	movs	r3, #3
 80036c0:	743b      	strb	r3, [r7, #16]

	//sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <get_complete_dd_task_list+0x58>)
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	f107 0110 	add.w	r1, r7, #16
 80036ca:	2300      	movs	r3, #0
 80036cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036d0:	f7fd f976 	bl	80009c0 <xQueueGenericSend>
	}

	// wait for reply from DDS (obtain reply message)
	struct message reply_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, 1000))
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <get_complete_dd_task_list+0x5c>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	4639      	mov	r1, r7
 80036da:	2300      	movs	r3, #0
 80036dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e0:	f7fd fafc 	bl	8000cdc <xQueueGenericReceive>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <get_complete_dd_task_list+0x4c>
	{
		// check for message type
		if (reply_message.type == get_completed_dd_list)
 80036ea:	783b      	ldrb	r3, [r7, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d101      	bne.n	80036f4 <get_complete_dd_task_list+0x3c>
		{
			return reply_message.task_list;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	e008      	b.n	8003706 <get_complete_dd_task_list+0x4e>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <get_complete_dd_task_list+0x5c>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4639      	mov	r1, r7
 80036fa:	2300      	movs	r3, #0
 80036fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003700:	f7fd f95e 	bl	80009c0 <xQueueGenericSend>

			}
		}
	}

	return reply_message.task_list;
 8003704:	68fb      	ldr	r3, [r7, #12]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20001e04 	.word	0x20001e04
 8003714:	20001e08 	.word	0x20001e08

08003718 <get_overdue_dd_task_list>:

struct dd_task_list* get_overdue_dd_task_list(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
	// sends message to queue requesting Overdue Task list from DDS
	struct message this_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	this_message.type = get_overdue_dd_list;
 800371e:	2304      	movs	r3, #4
 8003720:	743b      	strb	r3, [r7, #16]

	// sends to queue (for DDS to receive)
	if (xQueueSend(xQueue_request_handle, &this_message, 1000))
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <get_overdue_dd_task_list+0x58>)
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f107 0110 	add.w	r1, r7, #16
 800372a:	2300      	movs	r3, #0
 800372c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003730:	f7fd f946 	bl	80009c0 <xQueueGenericSend>
	}

	// wait for reply from DDS (obtain reply message)
	struct message reply_message;// = (struct message *)pvPortMalloc(sizeof(struct message *));
	// when response is received from DDS, function returns the list
	if (xQueueReceive(xQueue_response_handle, &reply_message, 1000))
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <get_overdue_dd_task_list+0x5c>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	4639      	mov	r1, r7
 800373a:	2300      	movs	r3, #0
 800373c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003740:	f7fd facc 	bl	8000cdc <xQueueGenericReceive>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <get_overdue_dd_task_list+0x4c>
	{
		// check for message type
		if (reply_message.type == get_overdue_dd_list)
 800374a:	783b      	ldrb	r3, [r7, #0]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d101      	bne.n	8003754 <get_overdue_dd_task_list+0x3c>
		{
			return reply_message.task_list;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	e008      	b.n	8003766 <get_overdue_dd_task_list+0x4e>
		}
		else {
			// if wrong message type, put back on queue
			if (xQueueSend(xQueue_response_handle, &reply_message, 1000))
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <get_overdue_dd_task_list+0x5c>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4639      	mov	r1, r7
 800375a:	2300      	movs	r3, #0
 800375c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003760:	f7fd f92e 	bl	80009c0 <xQueueGenericSend>

			}
		}
	}

	return reply_message.task_list;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20001e04 	.word	0x20001e04
 8003774:	20001e08 	.word	0x20001e08

08003778 <add_task>:

/* linked list functions */
// add new task
dd_task_list * add_task( dd_task_list * list_head, struct dd_task * new_dd_task )
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	dd_task_list *temp = (dd_task_list *)pvPortMalloc(sizeof(dd_task_list *));
 8003782:	2004      	movs	r0, #4
 8003784:	f7fc ffec 	bl	8000760 <pvPortMalloc>
 8003788:	60b8      	str	r0, [r7, #8]
	temp->task = *new_dd_task;
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800379a:	e884 0003 	stmia.w	r4, {r0, r1}
	temp->next_task = NULL;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]

	struct dd_task_list *p;

	if (list_head == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d111      	bne.n	80037ce <add_task+0x56>
	{
		list_head = (dd_task_list *)pvPortMalloc(sizeof(dd_task_list *));
 80037aa:	2004      	movs	r0, #4
 80037ac:	f7fc ffd8 	bl	8000760 <pvPortMalloc>
 80037b0:	6078      	str	r0, [r7, #4]
		list_head->task = temp->task;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037c2:	e884 0003 	stmia.w	r4, {r0, r1}
		list_head->next_task = NULL;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
 80037cc:	e00c      	b.n	80037e8 <add_task+0x70>
	}
	else {
		p = list_head;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
		while (p->next_task != NULL)
 80037d2:	e002      	b.n	80037da <add_task+0x62>
		{
			p = p->next_task;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	60fb      	str	r3, [r7, #12]
		while (p->next_task != NULL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f8      	bne.n	80037d4 <add_task+0x5c>
		}
		p->next_task = temp;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	619a      	str	r2, [r3, #24]
	}

	return list_head;
 80037e8:	687b      	ldr	r3, [r7, #4]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}

080037f2 <delete_task>:

// delete task
dd_task_list * delete_task ( struct dd_task_list * list_head, struct dd_task * done_dd_task )
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
	// Store head node
    struct dd_task_list *temp = list_head;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
	struct dd_task_list *prev = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->task.t_handle == done_dd_task->t_handle) {
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d011      	beq.n	800382e <delete_task+0x3c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d10b      	bne.n	800382e <delete_task+0x3c>
        list_head = temp->next_task; // Changed head
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	607b      	str	r3, [r7, #4]
        free(temp); // free old head
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fc15 	bl	800404c <free>
        //return;
    }

    // Search for the task to be deleted, keep track of the
    // previous node as we need to change 'prev->next'
    while (temp != NULL && temp->task.t_handle != done_dd_task->t_handle) {
 8003822:	e004      	b.n	800382e <delete_task+0x3c>
        prev = temp;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	60bb      	str	r3, [r7, #8]
        temp = temp->next_task;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	60fb      	str	r3, [r7, #12]
    while (temp != NULL && temp->task.t_handle != done_dd_task->t_handle) {
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <delete_task+0x4e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d1f1      	bne.n	8003824 <delete_task+0x32>
    /*if (temp == NULL) {
    	return list_head;
    }*/

    // Unlink the node from linked list
    prev->next_task = temp->next_task;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	619a      	str	r2, [r3, #24]

    free(temp); // Free memory
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fbff 	bl	800404c <free>

    return list_head;
 800384e:	687b      	ldr	r3, [r7, #4]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <print_count_of_list>:

// return count of list
int print_count_of_list ( struct dd_task_list * dd_task_list_head )
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	struct dd_task_list *p = dd_task_list_head;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
	while(p != NULL){
 8003868:	e005      	b.n	8003876 <print_count_of_list+0x1e>
	    p = p->next_task;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	60fb      	str	r3, [r7, #12]
	    count++;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3301      	adds	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
	while(p != NULL){
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f6      	bne.n	800386a <print_count_of_list+0x12>
	}

	return count;
 800387c:	68bb      	ldr	r3, [r7, #8]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <order_tasks_deadline_first>:

// reorder by deadline first
dd_task_list * order_tasks_deadline_first( dd_task_list * dd_task_list_head )
{
 800388a:	b4b0      	push	{r4, r5, r7}
 800388c:	b08b      	sub	sp, #44	; 0x2c
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	struct dd_task_list *current = dd_task_list_head;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
	struct dd_task_list *index = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
	struct dd_task temp;

	if (dd_task_list_head == NULL){
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d132      	bne.n	8003906 <order_tasks_deadline_first+0x7c>
		return dd_task_list_head;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	e034      	b.n	800390e <order_tasks_deadline_first+0x84>
	}
	else {
		while (current != NULL){
			index = current->next_task;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	623b      	str	r3, [r7, #32]

			while (index != NULL){
 80038aa:	e026      	b.n	80038fa <order_tasks_deadline_first+0x70>
				if (current->task.absolute_deadline < index->task.absolute_deadline){
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d21d      	bcs.n	80038f4 <order_tasks_deadline_first+0x6a>
					temp = current->task;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	f107 0408 	add.w	r4, r7, #8
 80038be:	461d      	mov	r5, r3
 80038c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038c8:	e884 0003 	stmia.w	r4, {r0, r1}
					current->task = index->task;
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	4614      	mov	r4, r2
 80038d2:	461d      	mov	r5, r3
 80038d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038dc:	e884 0003 	stmia.w	r4, {r0, r1}
					index->task = temp;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	461d      	mov	r5, r3
 80038e4:	f107 0408 	add.w	r4, r7, #8
 80038e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038f0:	e885 0003 	stmia.w	r5, {r0, r1}
				}
				index = index->next_task;
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	623b      	str	r3, [r7, #32]
			while (index != NULL){
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1d5      	bne.n	80038ac <order_tasks_deadline_first+0x22>
			}
			current = current->next_task;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
		while (current != NULL){
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1cb      	bne.n	80038a4 <order_tasks_deadline_first+0x1a>
		}

	}

	return dd_task_list_head;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	372c      	adds	r7, #44	; 0x2c
 8003912:	46bd      	mov	sp, r7
 8003914:	bcb0      	pop	{r4, r5, r7}
 8003916:	4770      	bx	lr

08003918 <assign_task_priorities>:

// assign task priorities
dd_task_list * assign_task_priorities ( dd_task_list * dd_task_list_head )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	int size = configMAX_PRIORITIES-4;
 8003920:	2301      	movs	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]

	if (dd_task_list_head == NULL){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <assign_task_priorities+0x16>
		return dd_task_list_head;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	e01b      	b.n	8003966 <assign_task_priorities+0x4e>
	}
	else {
		struct dd_task_list *temp = dd_task_list_head;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60fb      	str	r3, [r7, #12]
		vTaskPrioritySet(dd_task_list_head->task.t_handle, 3); // highest priority (but what happens if size is as big as max priority?)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2103      	movs	r1, #3
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fdb3 	bl	80014a4 <vTaskPrioritySet>
		if (size - 1 != 0)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00c      	beq.n	800395e <assign_task_priorities+0x46>
		{
			size--; // can't make priority lower than one
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3b01      	subs	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
		}

		// set the rest of tasks priorities
		while(temp != NULL){
 800394a:	e008      	b.n	800395e <assign_task_priorities+0x46>
			vTaskPrioritySet(temp->task.t_handle, 1); // each task is 1 level priority lower than prev task (should they go from 3 to 1 or is 2 and 1 okay?)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fda6 	bl	80014a4 <vTaskPrioritySet>
			temp = temp->next_task;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60fb      	str	r3, [r7, #12]
		while(temp != NULL){
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f3      	bne.n	800394c <assign_task_priorities+0x34>
		}
	}

	return dd_task_list_head;
 8003964:	687b      	ldr	r3, [r7, #4]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <vGenerator1CallbackFunction>:

/*------------------ software timer callbacks -----------------------------------------*/
void vGenerator1CallbackFunction( TimerHandle_t xGenerator1Timer )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	vTaskResume(xGenerator1TaskHandle);
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <vGenerator1CallbackFunction+0x1c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fd ff01 	bl	8001784 <vTaskResume>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20001df8 	.word	0x20001df8

08003990 <vGenerator2CallbackFunction>:

void vGenerator2CallbackFunction( TimerHandle_t xGenerator2Timer )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	vTaskResume(xGenerator2TaskHandle);
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <vGenerator2CallbackFunction+0x1c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fef1 	bl	8001784 <vTaskResume>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20001dfc 	.word	0x20001dfc

080039b0 <vGenerator3CallbackFunction>:

void vGenerator3CallbackFunction( TimerHandle_t xGenerator3Timer )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	// this function gets called when task 1 period complete --> need to call task generator to create new user task 1
	vTaskResume(xGenerator3TaskHandle);
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <vGenerator3CallbackFunction+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fee1 	bl	8001784 <vTaskResume>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20001e00 	.word	0x20001e00

080039d0 <vApplicationMallocFailedHook>:
// could add another timer callback for overdue tasks (would be started each time a task is created?)

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80039d4:	e7fe      	b.n	80039d4 <vApplicationMallocFailedHook+0x4>

080039d6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80039e0:	e7fe      	b.n	80039e0 <vApplicationStackOverflowHook+0xa>

080039e2 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80039e8:	f7fc ff1c 	bl	8000824 <xPortGetFreeHeapSize>
 80039ec:	4603      	mov	r3, r0
 80039ee:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80039f0:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7ff fb20 	bl	8003044 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a0a:	e003      	b.n	8003a14 <LoopCopyDataInit>

08003a0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003a0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a12:	3104      	adds	r1, #4

08003a14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003a18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a1c:	d3f6      	bcc.n	8003a0c <CopyDataInit>
  ldr  r2, =_sbss
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003a20:	e002      	b.n	8003a28 <LoopFillZerobss>

08003a22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a24:	f842 3b04 	str.w	r3, [r2], #4

08003a28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003a2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a2c:	d3f9      	bcc.n	8003a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a2e:	f000 f877 	bl	8003b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a32:	f000 fae7 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a36:	f7ff fb29 	bl	800308c <main>
  bx  lr    
 8003a3a:	4770      	bx	lr
  ldr  r3, =_sidata
 8003a3c:	0800428c 	.word	0x0800428c
  ldr  r0, =_sdata
 8003a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a44:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003a48:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003a4c:	20001ed8 	.word	0x20001ed8

08003a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a50:	e7fe      	b.n	8003a50 <ADC_IRQHandler>

08003a52 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <HardFault_Handler+0x4>

08003a66 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <MemManage_Handler+0x4>

08003a6c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <BusFault_Handler+0x4>

08003a72 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <UsageFault_Handler+0x4>

08003a78 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <ITM_SendChar+0x58>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01a      	beq.n	8003ad2 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003a9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aa0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003aa4:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003aac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ab0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ab4:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003abc:	bf00      	nop
 8003abe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0fa      	beq.n	8003abe <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ad2:	687b      	ldr	r3, [r7, #4]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000edf0 	.word	0xe000edf0

08003ae4 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e009      	b.n	8003b0e <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	60ba      	str	r2, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffc0 	bl	8003a88 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	dbf1      	blt.n	8003afa <_write+0x16>
 return len;
 8003b16:	687b      	ldr	r3, [r7, #4]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <SystemInit+0x60>)
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <SystemInit+0x60>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <SystemInit+0x64>)
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <SystemInit+0x64>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <SystemInit+0x64>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b46:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <SystemInit+0x64>)
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <SystemInit+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <SystemInit+0x64>)
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <SystemInit+0x68>)
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <SystemInit+0x64>)
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <SystemInit+0x64>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <SystemInit+0x64>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003b6e:	f000 f80d 	bl	8003b8c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <SystemInit+0x60>)
 8003b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b78:	609a      	str	r2, [r3, #8]
#endif
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	24003010 	.word	0x24003010

08003b8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003b9a:	4a36      	ldr	r2, [pc, #216]	; (8003c74 <SetSysClock+0xe8>)
 8003b9c:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <SetSysClock+0xe8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <SetSysClock+0xe8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <SetSysClock+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003bc2:	d1f0      	bne.n	8003ba6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <SetSysClock+0xe8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	e001      	b.n	8003bda <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d142      	bne.n	8003c66 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003be0:	4a24      	ldr	r2, [pc, #144]	; (8003c74 <SetSysClock+0xe8>)
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <SetSysClock+0xe8>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <SetSysClock+0xec>)
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <SetSysClock+0xec>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <SetSysClock+0xe8>)
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <SetSysClock+0xe8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003c00:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <SetSysClock+0xe8>)
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <SetSysClock+0xe8>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <SetSysClock+0xe8>)
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <SetSysClock+0xe8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003c16:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <SetSysClock+0xe8>)
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <SetSysClock+0xf0>)
 8003c1c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <SetSysClock+0xe8>)
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <SetSysClock+0xe8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003c2a:	bf00      	nop
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <SetSysClock+0xe8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f9      	beq.n	8003c2c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <SetSysClock+0xf4>)
 8003c3a:	f240 6205 	movw	r2, #1541	; 0x605
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <SetSysClock+0xe8>)
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <SetSysClock+0xe8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003c4c:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <SetSysClock+0xe8>)
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <SetSysClock+0xe8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003c58:	bf00      	nop
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <SetSysClock+0xe8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d1f9      	bne.n	8003c5a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	07405408 	.word	0x07405408
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003c94:	e004      	b.n	8003ca0 <ts_itoa+0x1c>
		div *= base;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d2f3      	bcs.n	8003c96 <ts_itoa+0x12>

	while (div != 0)
 8003cae:	e029      	b.n	8003d04 <ts_itoa+0x80>
	{
		int num = d/div;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cc2:	fb02 f201 	mul.w	r2, r2, r1
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cd2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	dd0a      	ble.n	8003cf0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	6011      	str	r1, [r2, #0]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	3237      	adds	r2, #55	; 0x37
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e009      	b.n	8003d04 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1c59      	adds	r1, r3, #1
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	3230      	adds	r2, #48	; 0x30
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1d2      	bne.n	8003cb0 <ts_itoa+0x2c>
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003d26:	e07d      	b.n	8003e24 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b25      	cmp	r3, #37	; 0x25
 8003d2e:	d171      	bne.n	8003e14 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d01e      	beq.n	8003d7c <ts_formatstring+0x66>
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	dc06      	bgt.n	8003d50 <ts_formatstring+0x3a>
 8003d42:	2b58      	cmp	r3, #88	; 0x58
 8003d44:	d050      	beq.n	8003de8 <ts_formatstring+0xd2>
 8003d46:	2b63      	cmp	r3, #99	; 0x63
 8003d48:	d00e      	beq.n	8003d68 <ts_formatstring+0x52>
 8003d4a:	2b25      	cmp	r3, #37	; 0x25
 8003d4c:	d058      	beq.n	8003e00 <ts_formatstring+0xea>
 8003d4e:	e05d      	b.n	8003e0c <ts_formatstring+0xf6>
 8003d50:	2b73      	cmp	r3, #115	; 0x73
 8003d52:	d02b      	beq.n	8003dac <ts_formatstring+0x96>
 8003d54:	2b73      	cmp	r3, #115	; 0x73
 8003d56:	dc02      	bgt.n	8003d5e <ts_formatstring+0x48>
 8003d58:	2b69      	cmp	r3, #105	; 0x69
 8003d5a:	d00f      	beq.n	8003d7c <ts_formatstring+0x66>
 8003d5c:	e056      	b.n	8003e0c <ts_formatstring+0xf6>
 8003d5e:	2b75      	cmp	r3, #117	; 0x75
 8003d60:	d037      	beq.n	8003dd2 <ts_formatstring+0xbc>
 8003d62:	2b78      	cmp	r3, #120	; 0x78
 8003d64:	d040      	beq.n	8003de8 <ts_formatstring+0xd2>
 8003d66:	e051      	b.n	8003e0c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	60fa      	str	r2, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	1d11      	adds	r1, r2, #4
 8003d72:	6079      	str	r1, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
				break;
 8003d7a:	e047      	b.n	8003e0c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da07      	bge.n	8003d9c <ts_formatstring+0x86>
					{
						val *= -1;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	425b      	negs	r3, r3
 8003d90:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	60fa      	str	r2, [r7, #12]
 8003d98:	222d      	movs	r2, #45	; 0x2d
 8003d9a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	220a      	movs	r2, #10
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff6d 	bl	8003c84 <ts_itoa>
				}
				break;
 8003daa:	e02f      	b.n	8003e0c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	1d1a      	adds	r2, r3, #4
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003db6:	e007      	b.n	8003dc8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	60fa      	str	r2, [r7, #12]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	1c51      	adds	r1, r2, #1
 8003dc2:	61b9      	str	r1, [r7, #24]
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f3      	bne.n	8003db8 <ts_formatstring+0xa2>
					}
				}
				break;
 8003dd0:	e01c      	b.n	8003e0c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	220a      	movs	r2, #10
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff4f 	bl	8003c84 <ts_itoa>
				break;
 8003de6:	e011      	b.n	8003e0c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	f107 030c 	add.w	r3, r7, #12
 8003df6:	2210      	movs	r2, #16
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff43 	bl	8003c84 <ts_itoa>
				break;
 8003dfe:	e005      	b.n	8003e0c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	60fa      	str	r2, [r7, #12]
 8003e06:	2225      	movs	r2, #37	; 0x25
 8003e08:	701a      	strb	r2, [r3, #0]
				  break;
 8003e0a:	bf00      	nop
			}
			fmt++;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	e007      	b.n	8003e24 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	60fa      	str	r2, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	1c51      	adds	r1, r2, #1
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f47f af7d 	bne.w	8003d28 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1ad3      	subs	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003e52:	e081      	b.n	8003f58 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b25      	cmp	r3, #37	; 0x25
 8003e5a:	d177      	bne.n	8003f4c <ts_formatlength+0x108>
		{
			++fmt;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	3b58      	subs	r3, #88	; 0x58
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d86a      	bhi.n	8003f42 <ts_formatlength+0xfe>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <ts_formatlength+0x30>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003f35 	.word	0x08003f35
 8003e78:	08003f43 	.word	0x08003f43
 8003e7c:	08003f43 	.word	0x08003f43
 8003e80:	08003f43 	.word	0x08003f43
 8003e84:	08003f43 	.word	0x08003f43
 8003e88:	08003f43 	.word	0x08003f43
 8003e8c:	08003f43 	.word	0x08003f43
 8003e90:	08003f43 	.word	0x08003f43
 8003e94:	08003f43 	.word	0x08003f43
 8003e98:	08003f43 	.word	0x08003f43
 8003e9c:	08003f43 	.word	0x08003f43
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003f07 	.word	0x08003f07
 8003ea8:	08003f43 	.word	0x08003f43
 8003eac:	08003f43 	.word	0x08003f43
 8003eb0:	08003f43 	.word	0x08003f43
 8003eb4:	08003f43 	.word	0x08003f43
 8003eb8:	08003f07 	.word	0x08003f07
 8003ebc:	08003f43 	.word	0x08003f43
 8003ec0:	08003f43 	.word	0x08003f43
 8003ec4:	08003f43 	.word	0x08003f43
 8003ec8:	08003f43 	.word	0x08003f43
 8003ecc:	08003f43 	.word	0x08003f43
 8003ed0:	08003f43 	.word	0x08003f43
 8003ed4:	08003f43 	.word	0x08003f43
 8003ed8:	08003f43 	.word	0x08003f43
 8003edc:	08003f43 	.word	0x08003f43
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f43 	.word	0x08003f43
 8003ee8:	08003f07 	.word	0x08003f07
 8003eec:	08003f43 	.word	0x08003f43
 8003ef0:	08003f43 	.word	0x08003f43
 8003ef4:	08003f35 	.word	0x08003f35
			{
			  case 'c':
		  		  va_arg(va, int);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	3304      	adds	r3, #4
 8003efc:	603b      	str	r3, [r7, #0]
				  ++length;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
				  break;
 8003f04:	e025      	b.n	8003f52 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	330b      	adds	r3, #11
 8003f0a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	603b      	str	r3, [r7, #0]
				  break;
 8003f12:	e01e      	b.n	8003f52 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	603a      	str	r2, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003f1e:	e002      	b.n	8003f26 <ts_formatlength+0xe2>
			  			  ++length;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	60ba      	str	r2, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f6      	bne.n	8003f20 <ts_formatlength+0xdc>
			  	  }
				  break;
 8003f32:	e00e      	b.n	8003f52 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3308      	adds	r3, #8
 8003f38:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	603b      	str	r3, [r7, #0]
				  break;
 8003f40:	e007      	b.n	8003f52 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
				  break;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3301      	adds	r3, #1
 8003f56:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f47f af79 	bne.w	8003e54 <ts_formatlength+0x10>
	}
	return length;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8003f70:	b40f      	push	{r0, r1, r2, r3}
 8003f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
	int length = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003f7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f82:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f88:	f7ff ff5c 	bl	8003e44 <ts_formatlength>
 8003f8c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003f8e:	466b      	mov	r3, sp
 8003f90:	461e      	mov	r6, r3
		char buf[length];
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	1e4b      	subs	r3, r1, #1
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003fa4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003fa8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003fac:	460b      	mov	r3, r1
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	00dd      	lsls	r5, r3, #3
 8003fb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fba:	00d4      	lsls	r4, r2, #3
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	ebad 0d03 	sub.w	sp, sp, r3
 8003fc8:	466b      	mov	r3, sp
 8003fca:	3300      	adds	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fd2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fe9b 	bl	8003d16 <ts_formatstring>
 8003fe0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff fd7b 	bl	8003ae4 <_write>
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ffe:	b004      	add	sp, #16
 8004000:	4770      	bx	lr
	...

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4e0d      	ldr	r6, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1ba4      	subs	r4, r4, r6
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2500      	movs	r5, #0
 8004010:	42a5      	cmp	r5, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4e0b      	ldr	r6, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f000 f928 	bl	800426c <_init>
 800401c:	1ba4      	subs	r4, r4, r6
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2500      	movs	r5, #0
 8004022:	42a5      	cmp	r5, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800402c:	4798      	blx	r3
 800402e:	3501      	adds	r5, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004036:	4798      	blx	r3
 8004038:	3501      	adds	r5, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	08004284 	.word	0x08004284
 8004040:	08004284 	.word	0x08004284
 8004044:	08004284 	.word	0x08004284
 8004048:	08004288 	.word	0x08004288

0800404c <free>:
 800404c:	4b02      	ldr	r3, [pc, #8]	; (8004058 <free+0xc>)
 800404e:	4601      	mov	r1, r0
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	f000 b817 	b.w	8004084 <_free_r>
 8004056:	bf00      	nop
 8004058:	20000028 	.word	0x20000028

0800405c <memcpy>:
 800405c:	b510      	push	{r4, lr}
 800405e:	1e43      	subs	r3, r0, #1
 8004060:	440a      	add	r2, r1
 8004062:	4291      	cmp	r1, r2
 8004064:	d100      	bne.n	8004068 <memcpy+0xc>
 8004066:	bd10      	pop	{r4, pc}
 8004068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800406c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004070:	e7f7      	b.n	8004062 <memcpy+0x6>

08004072 <memset>:
 8004072:	4402      	add	r2, r0
 8004074:	4603      	mov	r3, r0
 8004076:	4293      	cmp	r3, r2
 8004078:	d100      	bne.n	800407c <memset+0xa>
 800407a:	4770      	bx	lr
 800407c:	f803 1b01 	strb.w	r1, [r3], #1
 8004080:	e7f9      	b.n	8004076 <memset+0x4>
	...

08004084 <_free_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4605      	mov	r5, r0
 8004088:	2900      	cmp	r1, #0
 800408a:	d045      	beq.n	8004118 <_free_r+0x94>
 800408c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004090:	1f0c      	subs	r4, r1, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	bfb8      	it	lt
 8004096:	18e4      	addlt	r4, r4, r3
 8004098:	f000 f842 	bl	8004120 <__malloc_lock>
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <_free_r+0x98>)
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	4610      	mov	r0, r2
 80040a2:	b933      	cbnz	r3, 80040b2 <_free_r+0x2e>
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6014      	str	r4, [r2, #0]
 80040a8:	4628      	mov	r0, r5
 80040aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ae:	f000 b838 	b.w	8004122 <__malloc_unlock>
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	d90c      	bls.n	80040d0 <_free_r+0x4c>
 80040b6:	6821      	ldr	r1, [r4, #0]
 80040b8:	1862      	adds	r2, r4, r1
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bf04      	itt	eq
 80040be:	681a      	ldreq	r2, [r3, #0]
 80040c0:	685b      	ldreq	r3, [r3, #4]
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	bf04      	itt	eq
 80040c6:	1852      	addeq	r2, r2, r1
 80040c8:	6022      	streq	r2, [r4, #0]
 80040ca:	6004      	str	r4, [r0, #0]
 80040cc:	e7ec      	b.n	80040a8 <_free_r+0x24>
 80040ce:	4613      	mov	r3, r2
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	b10a      	cbz	r2, 80040d8 <_free_r+0x54>
 80040d4:	42a2      	cmp	r2, r4
 80040d6:	d9fa      	bls.n	80040ce <_free_r+0x4a>
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	1858      	adds	r0, r3, r1
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d10b      	bne.n	80040f8 <_free_r+0x74>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	4401      	add	r1, r0
 80040e4:	1858      	adds	r0, r3, r1
 80040e6:	4282      	cmp	r2, r0
 80040e8:	6019      	str	r1, [r3, #0]
 80040ea:	d1dd      	bne.n	80040a8 <_free_r+0x24>
 80040ec:	6810      	ldr	r0, [r2, #0]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	4401      	add	r1, r0
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	e7d7      	b.n	80040a8 <_free_r+0x24>
 80040f8:	d902      	bls.n	8004100 <_free_r+0x7c>
 80040fa:	230c      	movs	r3, #12
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	e7d3      	b.n	80040a8 <_free_r+0x24>
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	1821      	adds	r1, r4, r0
 8004104:	428a      	cmp	r2, r1
 8004106:	bf04      	itt	eq
 8004108:	6811      	ldreq	r1, [r2, #0]
 800410a:	6852      	ldreq	r2, [r2, #4]
 800410c:	6062      	str	r2, [r4, #4]
 800410e:	bf04      	itt	eq
 8004110:	1809      	addeq	r1, r1, r0
 8004112:	6021      	streq	r1, [r4, #0]
 8004114:	605c      	str	r4, [r3, #4]
 8004116:	e7c7      	b.n	80040a8 <_free_r+0x24>
 8004118:	bd38      	pop	{r3, r4, r5, pc}
 800411a:	bf00      	nop
 800411c:	20001e0c 	.word	0x20001e0c

08004120 <__malloc_lock>:
 8004120:	4770      	bx	lr

08004122 <__malloc_unlock>:
 8004122:	4770      	bx	lr
 8004124:	454c4449 	.word	0x454c4449
 8004128:	00000000 	.word	0x00000000
 800412c:	20726d54 	.word	0x20726d54
 8004130:	00637653 	.word	0x00637653
 8004134:	51726d54 	.word	0x51726d54
 8004138:	00000000 	.word	0x00000000
 800413c:	75716552 	.word	0x75716552
 8004140:	51747365 	.word	0x51747365
 8004144:	65756575 	.word	0x65756575
 8004148:	00000000 	.word	0x00000000
 800414c:	70736552 	.word	0x70736552
 8004150:	65736e6f 	.word	0x65736e6f
 8004154:	75657551 	.word	0x75657551
 8004158:	00000065 	.word	0x00000065
 800415c:	53204444 	.word	0x53204444
 8004160:	64656863 	.word	0x64656863
 8004164:	72656c75 	.word	0x72656c75
 8004168:	00000000 	.word	0x00000000
 800416c:	54204444 	.word	0x54204444
 8004170:	206b7361 	.word	0x206b7361
 8004174:	656e6547 	.word	0x656e6547
 8004178:	6f746172 	.word	0x6f746172
 800417c:	00312072 	.word	0x00312072
 8004180:	54204444 	.word	0x54204444
 8004184:	206b7361 	.word	0x206b7361
 8004188:	656e6547 	.word	0x656e6547
 800418c:	6f746172 	.word	0x6f746172
 8004190:	00322072 	.word	0x00322072
 8004194:	54204444 	.word	0x54204444
 8004198:	206b7361 	.word	0x206b7361
 800419c:	656e6547 	.word	0x656e6547
 80041a0:	6f746172 	.word	0x6f746172
 80041a4:	00332072 	.word	0x00332072
 80041a8:	696e6f4d 	.word	0x696e6f4d
 80041ac:	00726f74 	.word	0x00726f74
 80041b0:	656e6547 	.word	0x656e6547
 80041b4:	6f746172 	.word	0x6f746172
 80041b8:	00312072 	.word	0x00312072
 80041bc:	656e6547 	.word	0x656e6547
 80041c0:	6f746172 	.word	0x6f746172
 80041c4:	00322072 	.word	0x00322072
 80041c8:	656e6547 	.word	0x656e6547
 80041cc:	6f746172 	.word	0x6f746172
 80041d0:	00332072 	.word	0x00332072
 80041d4:	72657355 	.word	0x72657355
 80041d8:	73615420 	.word	0x73615420
 80041dc:	0031206b 	.word	0x0031206b
 80041e0:	72657355 	.word	0x72657355
 80041e4:	73615420 	.word	0x73615420
 80041e8:	0032206b 	.word	0x0032206b
 80041ec:	72657355 	.word	0x72657355
 80041f0:	73615420 	.word	0x73615420
 80041f4:	0033206b 	.word	0x0033206b
 80041f8:	69746341 	.word	0x69746341
 80041fc:	74206576 	.word	0x74206576
 8004200:	206b7361 	.word	0x206b7361
 8004204:	7473696c 	.word	0x7473696c
 8004208:	756f6320 	.word	0x756f6320
 800420c:	203a746e 	.word	0x203a746e
 8004210:	000a6425 	.word	0x000a6425
 8004214:	706d6f43 	.word	0x706d6f43
 8004218:	6574656c 	.word	0x6574656c
 800421c:	73617420 	.word	0x73617420
 8004220:	696c206b 	.word	0x696c206b
 8004224:	63207473 	.word	0x63207473
 8004228:	746e756f 	.word	0x746e756f
 800422c:	6425203a 	.word	0x6425203a
 8004230:	0000000a 	.word	0x0000000a
 8004234:	7265764f 	.word	0x7265764f
 8004238:	20657564 	.word	0x20657564
 800423c:	6b736174 	.word	0x6b736174
 8004240:	73696c20 	.word	0x73696c20
 8004244:	6f632074 	.word	0x6f632074
 8004248:	3a746e75 	.word	0x3a746e75
 800424c:	0a642520 	.word	0x0a642520
 8004250:	00000000 	.word	0x00000000

08004254 <GPIO_PIN>:
 8004254:	20001000 80004000                       ... .@..

0800425c <GPIO_CLK>:
 800425c:	00000008 00000008 00000008 00000008     ................

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
